<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
        <title>所有文章 - 一个小学生的博客</title>
        <link>http://huxfhk.github.io/posts/</link>
        <description>所有文章 | 一个小学生的博客</description>
        <generator>Hugo -- gohugo.io</generator><language>zh-CN</language><copyright>This work is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License.</copyright><lastBuildDate>Thu, 22 Apr 2021 14:00:08 &#43;0800</lastBuildDate><atom:link href="http://huxfhk.github.io/posts/" rel="self" type="application/rss+xml" /><item>
    <title>Spring Bone</title>
    <link>http://huxfhk.github.io/springbone/</link>
    <pubDate>Thu, 22 Apr 2021 14:00:08 &#43;0800</pubDate>
    <author>Sean</author>
    <guid>http://huxfhk.github.io/springbone/</guid>
    <description><![CDATA[实现现实中柔顺头发的效果
三个主要类：SpringBone、SpringCollider、SpringManager
SpringBone用于挂载到所有的骨骼上，最末端骨骼不需要挂载，需要保留原始动画的骨骼也不要挂载。
  Child：下一个骨骼节点 Bone Axis：骨骼方向 Radius：骨骼的碰撞半径（仅对于spring collider的碰撞 Is Use Each Bone Force Settings：是否使用“弹簧骨骼”自己的Stiffness Force和Drag Force属性，而不是用SpringManager的设置。 Stiffness Force：弹簧回弹力 Drag Force：阻尼力 Spring Force：在世界坐标系下，作用在Spring Bone上的一个力；可以用来模拟重力或风力 Threshold：与SpringManager组件的Dynamic Ratio配合使用 Colliders：与自己发生碰撞的SpringCollider Debug  SpringMnager用于挂载到GameObject的Root节点上。
  Dynamic Ratio：这个需要配合Spring Bone的Threshold来使用，对于每一个Spring Bone来说，当Threshold小于Dynamic Ratio时，Spring Bone才更新，否则是不更新的。 Stiffness Force：弹簧回弹力 Stiffness Curve：弹簧回弹力曲线 Drag Force：阻尼力 Drag Curve：阻尼力曲线 Spring Bones  SpringCollider可以阻挡SpringBone穿过的区域]]></description>
</item><item>
    <title>前置知识</title>
    <link>http://huxfhk.github.io/%E5%89%8D%E7%BD%AE%E7%9F%A5%E8%AF%86/</link>
    <pubDate>Wed, 21 Apr 2021 23:18:45 &#43;0800</pubDate>
    <author>Sean</author>
    <guid>http://huxfhk.github.io/%E5%89%8D%E7%BD%AE%E7%9F%A5%E8%AF%86/</guid>
    <description><![CDATA[常见因式分解   展开 分解     a^2 − b^2 (a+b)(a−b)   a^2 + 2ab + b^2 (a+b)(a+b)   a^2 − 2ab + b^2 (a−b)(a−b)   a^3 + b^3 (a+b)(a^2−ab+b^2)   a^3 − b^3 (a−b)(a^2+ab+b^2)   a^3 + 3a^2b + 3ab^2 + b^3 (a + b)^3   a^3 − 3a^2b + 3ab^2 − b^3 (a − b)^3    十字相乘$$ \begin{aligned} ?]]></description>
</item><item>
    <title>函数与极限</title>
    <link>http://huxfhk.github.io/%E5%87%BD%E6%95%B0%E4%B8%8E%E6%9E%81%E9%99%90/</link>
    <pubDate>Mon, 19 Apr 2021 19:48:29 &#43;0800</pubDate>
    <author>作者</author>
    <guid>http://huxfhk.github.io/%E5%87%BD%E6%95%B0%E4%B8%8E%E6%9E%81%E9%99%90/</guid>
    <description><![CDATA[集合名次解释 集合：具有某种性质的元素的全体。 元素：集合中的每一个。 有限集合 无限集合  集合表示大写字母表示集合A、B
用小写字母表示元素a、b
$$ 元素a属于集合A:a \in A\
元素b不属于集合A:b \notin A $$
集合表示方法-列举法 $$ \mathbb{A}=\left{a_1,a_2,a_3\right} $$
集合表示方法-描述法 $$ \mathbb{M}=\left{x \middle| x具有的性质p\right} $$
特殊集合表示 $$ 实数集合:\
\mathbb{R}=\left{所有的实数\right}\
整数集合:\
\mathbb{Z}=\left{\cdots,-n,\cdots,-2,-1,0,1,2,\cdots,n,\cdots\right}\
自然数集合:\
\mathbb{N}=\left{0,1,2,3,n,\cdots\right}\
正自然数集合:\
\mathbb{N^+}=\left{1,2,3,n,\cdots\right}\
有理数集合:\
\mathbb{Q}=\left{\frac{p}{q}\middle| p\in \mathbb{Z},q \in \mathbb{N^+},p与q互质 \right}\
$$
集合之间的关系$$ A包含在B里\
A \subset B,A称为B的子集。\
集合相等\
A=B \Leftrightarrow A \subset B且， A \supset B\
真子集\
A \subset B,且 A \neq B,则A就是B的真子集。A \subsetneqq B $$
空集 $$ \emptyset $$]]></description>
</item><item>
    <title>解线性方程组</title>
    <link>http://huxfhk.github.io/%E8%A7%A3%E7%BA%BF%E6%80%A7%E6%96%B9%E7%A8%8B%E7%BB%84/</link>
    <pubDate>Thu, 15 Apr 2021 20:34:40 &#43;0800</pubDate>
    <author>作者</author>
    <guid>http://huxfhk.github.io/%E8%A7%A3%E7%BA%BF%E6%80%A7%E6%96%B9%E7%A8%8B%E7%BB%84/</guid>
    <description><![CDATA[矩阵的初等行变换 两行互换 一行加上另一行的倍数 一行乘以一个非0数  阶梯形矩阵 如果有全0行，那么全0行在最下方 所有行的主元的所在列随着行号增加而增加 阶梯的长度可以很长，但是高度必须为1。阶梯下全为0。  简化行阶梯型矩阵 主元都是1，主元所在列的其余元素都为0.  自由未知量
主变量
一般解
三种解当矩阵中出现0 = b时无解；非0行数 = 未知数个数时则有唯一解；非0行数 &lt; 未知数个数无穷解。
行列式 性质1:矩阵与其转置矩阵的行列式相同 性质2:行列式某行乘以k倍 性质3:行列式某行是两个数之和 性质4:对换两行 性质5:两行相等 性质6:两行成比例 性质7:某行加上另外一行的倍数  ]]></description>
</item><item>
    <title>CGFunctions</title>
    <link>http://huxfhk.github.io/cgfunctions/</link>
    <pubDate>Wed, 14 Apr 2021 09:46:52 &#43;0800</pubDate>
    <author>作者</author>
    <guid>http://huxfhk.github.io/cgfunctions/</guid>
    <description><![CDATA[数学函数   函数 功能     abs(x) 返回输入参数的绝对值   acos(x) 反余切函数，输入参数范围为[-1,1]，返回[0,π ]区间的角度值   all(x) 如果输入参数均不为0，则返回ture；否则返回flase。&amp;&amp;运算   any(x) 输入参数只要有其中一个不为0，则返回true。||运算   asin(x) 反正弦函数,输入参数取值区间为[−1,1]，返回角度值范围为$$ \begin{vmatrix} -\frac{\pi}{2}&amp;\frac{\pi}{2}\end{vmatrix} $$   atan(x) 反正切函数，返回角度值范围为,   atan2(y,x) 计算y/x 的反正切值。实际上和atan(x)函数功能完全一样，至少输入参数不同。atan(x) = atan2(x, float(1))。   ceil(x) 对输入参数向上取整。例如：ceil(float(1.3)) ，其返回值为2.0   clamp(x,a,b) 如果x 值小于a，则返回a；如果x 值大于b，返回b；否则，返回x。   cos(x) 返回弧度 x的余弦值。返回值范围为[−1,1]   cosh(x) 双曲余弦（hyperbolic cosine）函数，计算x的双曲余弦值。   cross(A,B) 返回两个三元向量的叉积(cross product)。注意，输入参数必须是三元向量！   degrees(x) 输入参数为弧度值(radians)，函数将其转换为角度值(degrees)   determinant(m) 计算矩阵的行列式因子。   dot(A,B) 返回A 和B 的点积(dot product)。参数A 和B可以是标量，也可以是向量（输入参数方面，点积和叉积函数有很大不同）。   exp(x) 计算ex的值，e= 2.]]></description>
</item><item>
    <title>SurfaceShader</title>
    <link>http://huxfhk.github.io/surfaceshader/</link>
    <pubDate>Tue, 13 Apr 2021 17:16:20 &#43;0800</pubDate>
    <author>作者</author>
    <guid>http://huxfhk.github.io/surfaceshader/</guid>
    <description><![CDATA[1 2  #pragma surface surfaceFunction lightModel [optionalparams]   ]]></description>
</item><item>
    <title>ShaderLab</title>
    <link>http://huxfhk.github.io/shaderlab/</link>
    <pubDate>Tue, 13 Apr 2021 10:24:45 &#43;0800</pubDate>
    <author>作者</author>
    <guid>http://huxfhk.github.io/shaderlab/</guid>
    <description><![CDATA[1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28  Shader &#34;path1/path2/ShaderName&#34; { Properties { _Int(&#34;Int&#34;,int) = 0 _Float(&#34;Float&#34;, float) = 0 _Range(&#34;Range&#34;, Range(0,1)) = 0 _Color(&#34;Color&#34;, Color) = (1,1,1,1) _Vector(&#34;Vector&#34;, vector) = (1,1,1,1) _MainTex(&#34;Texture&#34;, 2D) = &#34;&#34;{} _3D(&#34;3D Texture&#34;, 3D) = &#34;&#34;{} _Cube(&#34;Cube Texture&#34;, Cube) = &#34;&#34;{} } SubShader { Pass{ } } SubShader { } Fallback &#34;Diffuse&#34; }   _Object2World == unity_ObjectToWorld]]></description>
</item><item>
    <title>Unity特性</title>
    <link>http://huxfhk.github.io/unity%E7%89%B9%E6%80%A7/</link>
    <pubDate>Thu, 14 Jan 2021 16:22:47 &#43;0800</pubDate>
    <author>作者</author>
    <guid>http://huxfhk.github.io/unity%E7%89%B9%E6%80%A7/</guid>
    <description><![CDATA[Editor MenuItem 用于修饰函数，在编辑器中添加菜单项（脚本需要放在Editor目录）  1 2 3 4  [MenuItem(string itemName, bool isValidateFunction, int priority)] public static void Test(){ }    CreateAssetMenu  用于创建ScriptObject资源文件菜单（无需放在Editor目录）
  Header
  HideInInspector
  TextArea
  CustomEditor
  OnOpenAsset
  SerializeField
  约束  RequireComponent(typeof(OneComponent))
  HideInInspector
   Conditional  ]]></description>
</item><item>
    <title>c&#43;&#43; const使用</title>
    <link>http://huxfhk.github.io/const/</link>
    <pubDate>Tue, 15 Dec 2020 22:33:27 &#43;0000</pubDate>
    <author>Sean</author>
    <guid>http://huxfhk.github.io/const/</guid>
    <description><![CDATA[普通常量定义const常量时必须对其初始化，且初始化后不能修改其值；常量与变量可以相互赋值。
1 2 3  int n1 = 10; const int n2 = n1; n1 = n2;   const与引用初始化引用或参数传递给引用的各种情况
   引用 变量 常量 表达式 字面值     普通引用（int&amp;） true false false false   常引用（const int&amp;） true true true true    1 2 3 4 5 6 7 8 9 10  int n1 = 10; const int n2 = 20; int&amp; r1 = n1; //普通引用只能引用变量 // 常量引用可以引用变量、常量、表达式、字面值 const int&amp; r2 = n1; const int&amp; r3 = n2; const int&amp; r4 = 3 * 4; const int&amp; r5 = 10;   const与指针 指针的各种赋值情况     指针 变量 常量     普通指针（int*） true false   常量指针（const int*） true true      常量指针与指针常量的区别 常量指针const在号的左边，表示指针地址对应的值不可改变；指针常量const在号的右边，表示指针地址不可改变。]]></description>
</item><item>
    <title>Lua与C/C&#43;&#43;交互</title>
    <link>http://huxfhk.github.io/lua%E4%B8%8Ec%E4%BA%A4%E4%BA%92/</link>
    <pubDate>Wed, 04 Nov 2020 12:04:27 &#43;0800</pubDate>
    <author>作者</author>
    <guid>http://huxfhk.github.io/lua%E4%B8%8Ec%E4%BA%A4%E4%BA%92/</guid>
    <description><![CDATA[C调用Lua首先读取lua原文件，然后将要调用的lua函数压入栈中，之后再将函数参数依次压入栈中，最后使用函数lua_pcall调用lua函数，另外lua函数返回值会被压入栈中。
定义Lua1 2 3 4 5 6 7 8 9 10  local Test = {} function Test:waitForCppCall(name, age) print(name) print(age) return string.format(&#34;Hello I&#39;m %s %d years old.&#34;,name,age) end return Test   调用Lua代码1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24  auto L = luaL_newstate(); luaL_openlibs(L); // dofile会将代码块中的返回值压入栈 luaL_dofile(L,&#34;../lua/main.lua&#34;); // 堆栈情况{table(Test)} lua_getfield(L,1,&#34;waitForCppCall&#34;); // 堆栈情况{table(Test),waitForCppCall()} // lua的函数用`：`形式定义的，这里还需要将table传入 lua_pushvalue(L,1); // 堆栈情况{table(Test),waitForCppCall(),table(Test)} lua_pushstring(L,&#34;Sean&#34;); // 堆栈情况{table(Test),waitForCppCall(),table(Test), &#34;Sean&#34;} lua_pushnumber(L,20); // 堆栈情况{table(Test),waitForCppCall(),table(Test), &#34;Sean&#34;, 20} lua_pcall(L,3,1,0); // 堆栈情况{table(Test),[函数返回值1,函数返回值2,.]]></description>
</item></channel>
</rss>
