// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "ClownServerMessage.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace com {
namespace ourgame {
namespace clown {
namespace msg {

namespace {

const ::google::protobuf::Descriptor* DuxLiveTick_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DuxLiveTick_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReqLogin_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReqLogin_reflection_ = NULL;
const ::google::protobuf::Descriptor* AckLogin_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AckLogin_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReqChipIn_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReqChipIn_reflection_ = NULL;
const ::google::protobuf::Descriptor* AckChipInResult_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AckChipInResult_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReqCharge_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReqCharge_reflection_ = NULL;
const ::google::protobuf::Descriptor* AckCharge_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AckCharge_reflection_ = NULL;
const ::google::protobuf::Descriptor* AckEntityAward_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AckEntityAward_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReqFillUserInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReqFillUserInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* AckFillUserInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AckFillUserInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* EntityAward_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  EntityAward_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReqActivityAwardList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReqActivityAwardList_reflection_ = NULL;
const ::google::protobuf::Descriptor* AckActivityAwardList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AckActivityAwardList_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReqEntityAwardHistory_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReqEntityAwardHistory_reflection_ = NULL;
const ::google::protobuf::Descriptor* AckEntityAwardHistory_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AckEntityAwardHistory_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReqBet_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReqBet_reflection_ = NULL;
const ::google::protobuf::Descriptor* AckBet_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AckBet_reflection_ = NULL;
const ::google::protobuf::Descriptor* AckTipMessage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AckTipMessage_reflection_ = NULL;
const ::google::protobuf::Descriptor* AckHugeAward_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AckHugeAward_reflection_ = NULL;
const ::google::protobuf::Descriptor* AckDoubleChanceAward_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AckDoubleChanceAward_reflection_ = NULL;
const ::google::protobuf::Descriptor* AckLoseTooMuch_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AckLoseTooMuch_reflection_ = NULL;
const ::google::protobuf::Descriptor* AckCloseConnection_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AckCloseConnection_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReqOpenClown_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReqOpenClown_reflection_ = NULL;
const ::google::protobuf::Descriptor* AckOpenClown_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AckOpenClown_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReqCloseClown_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReqCloseClown_reflection_ = NULL;
const ::google::protobuf::Descriptor* AckCloseClown_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AckCloseClown_reflection_ = NULL;
const ::google::protobuf::Descriptor* AckServerInMaintaining_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AckServerInMaintaining_reflection_ = NULL;
const ::google::protobuf::Descriptor* AckPoolValue_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AckPoolValue_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReqRankingList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReqRankingList_reflection_ = NULL;
const ::google::protobuf::Descriptor* AckRankingList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AckRankingList_reflection_ = NULL;
const ::google::protobuf::Descriptor* AckRankingList_RankInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AckRankingList_RankInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReqHandselAwardHistory_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReqHandselAwardHistory_reflection_ = NULL;
const ::google::protobuf::Descriptor* AckHandselAwardHistory_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AckHandselAwardHistory_reflection_ = NULL;
const ::google::protobuf::Descriptor* AckHandselAwardHistory_HandselAward_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AckHandselAwardHistory_HandselAward_reflection_ = NULL;
const ::google::protobuf::Descriptor* AckIncreaseExpActivity_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AckIncreaseExpActivity_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReqDegrade_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReqDegrade_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReqNewActivityInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReqNewActivityInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* AckNewActivityInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AckNewActivityInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* AckNewActivityInfo_NewActivity_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AckNewActivityInfo_NewActivity_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReqBox_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReqBox_reflection_ = NULL;
const ::google::protobuf::Descriptor* AckBox_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AckBox_reflection_ = NULL;
const ::google::protobuf::Descriptor* AckUserMoney_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AckUserMoney_reflection_ = NULL;
const ::google::protobuf::Descriptor* AckDegradeTime_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AckDegradeTime_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReqOrAccordRecharge_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReqOrAccordRecharge_reflection_ = NULL;
const ::google::protobuf::Descriptor* AckOrAccordRecharge_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AckOrAccordRecharge_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReqAuthCode_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReqAuthCode_reflection_ = NULL;
const ::google::protobuf::Descriptor* AckAuthCode_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AckAuthCode_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReqUserRecharge_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReqUserRecharge_reflection_ = NULL;
const ::google::protobuf::Descriptor* AckUserRecharge_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AckUserRecharge_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReqMobleRecharge_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReqMobleRecharge_reflection_ = NULL;
const ::google::protobuf::Descriptor* AckMobleRecharge_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AckMobleRecharge_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReqPopMobleRecharge_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReqPopMobleRecharge_reflection_ = NULL;
const ::google::protobuf::Descriptor* AckPopMobleRecharge_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AckPopMobleRecharge_reflection_ = NULL;
const ::google::protobuf::Descriptor* AckWndAwardNotice_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AckWndAwardNotice_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReqNewGuideResult_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReqNewGuideResult_reflection_ = NULL;
const ::google::protobuf::Descriptor* ackLotteryAward_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ackLotteryAward_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReqSendHorn_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReqSendHorn_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReqBetFromOthers_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReqBetFromOthers_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReqUserMoney_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReqUserMoney_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_ClownServerMessage_2eproto() {
  protobuf_AddDesc_ClownServerMessage_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "ClownServerMessage.proto");
  GOOGLE_CHECK(file != NULL);
  DuxLiveTick_descriptor_ = file->message_type(0);
  static const int DuxLiveTick_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DuxLiveTick, time_),
  };
  DuxLiveTick_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DuxLiveTick_descriptor_,
      DuxLiveTick::default_instance_,
      DuxLiveTick_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DuxLiveTick, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DuxLiveTick, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DuxLiveTick));
  ReqLogin_descriptor_ = file->message_type(1);
  static const int ReqLogin_offsets_[11] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqLogin, rolename_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqLogin, userid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqLogin, username_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqLogin, password_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqLogin, fathergameid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqLogin, loaderurl_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqLogin, force_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqLogin, ticket_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqLogin, ipaddress_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqLogin, gameid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqLogin, moneytype_),
  };
  ReqLogin_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReqLogin_descriptor_,
      ReqLogin::default_instance_,
      ReqLogin_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqLogin, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqLogin, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReqLogin));
  AckLogin_descriptor_ = file->message_type(2);
  static const int AckLogin_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckLogin, sessionid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckLogin, success_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckLogin, failreason_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckLogin, userid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckLogin, username_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckLogin, usermoney_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckLogin, playtimes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckLogin, doubletimes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckLogin, is_guide_),
  };
  AckLogin_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AckLogin_descriptor_,
      AckLogin::default_instance_,
      AckLogin_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckLogin, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckLogin, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AckLogin));
  ReqChipIn_descriptor_ = file->message_type(3);
  static const int ReqChipIn_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqChipIn, sessionid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqChipIn, ante_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqChipIn, usedouble_),
  };
  ReqChipIn_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReqChipIn_descriptor_,
      ReqChipIn::default_instance_,
      ReqChipIn_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqChipIn, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqChipIn, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReqChipIn));
  AckChipInResult_descriptor_ = file->message_type(4);
  static const int AckChipInResult_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckChipInResult, sessionid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckChipInResult, patterns_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckChipInResult, awardmoney_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckChipInResult, usermoney_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckChipInResult, awardindex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckChipInResult, playtimes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckChipInResult, doubletimes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckChipInResult, canbet_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckChipInResult, candoublebet_),
  };
  AckChipInResult_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AckChipInResult_descriptor_,
      AckChipInResult::default_instance_,
      AckChipInResult_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckChipInResult, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckChipInResult, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AckChipInResult));
  ReqCharge_descriptor_ = file->message_type(5);
  static const int ReqCharge_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqCharge, sessionid_),
  };
  ReqCharge_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReqCharge_descriptor_,
      ReqCharge::default_instance_,
      ReqCharge_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqCharge, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqCharge, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReqCharge));
  AckCharge_descriptor_ = file->message_type(6);
  static const int AckCharge_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckCharge, sessionid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckCharge, success_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckCharge, usermoney_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckCharge, extraaward_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckCharge, persent_),
  };
  AckCharge_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AckCharge_descriptor_,
      AckCharge::default_instance_,
      AckCharge_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckCharge, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckCharge, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AckCharge));
  AckEntityAward_descriptor_ = file->message_type(7);
  static const int AckEntityAward_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckEntityAward, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckEntityAward, amount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckEntityAward, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckEntityAward, unit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckEntityAward, url_),
  };
  AckEntityAward_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AckEntityAward_descriptor_,
      AckEntityAward::default_instance_,
      AckEntityAward_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckEntityAward, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckEntityAward, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AckEntityAward));
  ReqFillUserInfo_descriptor_ = file->message_type(8);
  static const int ReqFillUserInfo_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqFillUserInfo, realname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqFillUserInfo, mobile_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqFillUserInfo, address_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqFillUserInfo, zipcode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqFillUserInfo, idcard_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqFillUserInfo, areacode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqFillUserInfo, phone_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqFillUserInfo, memo_),
  };
  ReqFillUserInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReqFillUserInfo_descriptor_,
      ReqFillUserInfo::default_instance_,
      ReqFillUserInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqFillUserInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqFillUserInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReqFillUserInfo));
  AckFillUserInfo_descriptor_ = file->message_type(9);
  static const int AckFillUserInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckFillUserInfo, success_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckFillUserInfo, failreson_),
  };
  AckFillUserInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AckFillUserInfo_descriptor_,
      AckFillUserInfo::default_instance_,
      AckFillUserInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckFillUserInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckFillUserInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AckFillUserInfo));
  EntityAward_descriptor_ = file->message_type(10);
  static const int EntityAward_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EntityAward, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EntityAward, nickname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EntityAward, date_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EntityAward, amount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EntityAward, unit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EntityAward, name_),
  };
  EntityAward_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      EntityAward_descriptor_,
      EntityAward::default_instance_,
      EntityAward_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EntityAward, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EntityAward, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(EntityAward));
  ReqActivityAwardList_descriptor_ = file->message_type(11);
  static const int ReqActivityAwardList_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqActivityAwardList, page_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqActivityAwardList, size_),
  };
  ReqActivityAwardList_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReqActivityAwardList_descriptor_,
      ReqActivityAwardList::default_instance_,
      ReqActivityAwardList_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqActivityAwardList, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqActivityAwardList, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReqActivityAwardList));
  AckActivityAwardList_descriptor_ = file->message_type(12);
  static const int AckActivityAwardList_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckActivityAwardList, awardlist_),
  };
  AckActivityAwardList_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AckActivityAwardList_descriptor_,
      AckActivityAwardList::default_instance_,
      AckActivityAwardList_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckActivityAwardList, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckActivityAwardList, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AckActivityAwardList));
  ReqEntityAwardHistory_descriptor_ = file->message_type(13);
  static const int ReqEntityAwardHistory_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqEntityAwardHistory, page_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqEntityAwardHistory, size_),
  };
  ReqEntityAwardHistory_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReqEntityAwardHistory_descriptor_,
      ReqEntityAwardHistory::default_instance_,
      ReqEntityAwardHistory_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqEntityAwardHistory, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqEntityAwardHistory, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReqEntityAwardHistory));
  AckEntityAwardHistory_descriptor_ = file->message_type(14);
  static const int AckEntityAwardHistory_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckEntityAwardHistory, awardlist_),
  };
  AckEntityAwardHistory_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AckEntityAwardHistory_descriptor_,
      AckEntityAwardHistory::default_instance_,
      AckEntityAwardHistory_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckEntityAwardHistory, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckEntityAwardHistory, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AckEntityAwardHistory));
  ReqBet_descriptor_ = file->message_type(15);
  static const int ReqBet_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqBet, sessionid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqBet, bettype_),
  };
  ReqBet_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReqBet_descriptor_,
      ReqBet::default_instance_,
      ReqBet_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqBet, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqBet, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReqBet));
  AckBet_descriptor_ = file->message_type(16);
  static const int AckBet_offsets_[10] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckBet, sessionid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckBet, betresult_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckBet, awardmoney_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckBet, baseante_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckBet, bettimes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckBet, usermoney_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckBet, nextmultiple_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckBet, canbet_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckBet, candoublebet_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckBet, tipmessage_),
  };
  AckBet_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AckBet_descriptor_,
      AckBet::default_instance_,
      AckBet_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckBet, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckBet, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AckBet));
  AckTipMessage_descriptor_ = file->message_type(17);
  static const int AckTipMessage_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckTipMessage, sessionid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckTipMessage, msgtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckTipMessage, txtmsg_),
  };
  AckTipMessage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AckTipMessage_descriptor_,
      AckTipMessage::default_instance_,
      AckTipMessage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckTipMessage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckTipMessage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AckTipMessage));
  AckHugeAward_descriptor_ = file->message_type(18);
  static const int AckHugeAward_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckHugeAward, username_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckHugeAward, awardmoney_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckHugeAward, awardtime_),
  };
  AckHugeAward_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AckHugeAward_descriptor_,
      AckHugeAward::default_instance_,
      AckHugeAward_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckHugeAward, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckHugeAward, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AckHugeAward));
  AckDoubleChanceAward_descriptor_ = file->message_type(19);
  static const int AckDoubleChanceAward_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckDoubleChanceAward, sessionid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckDoubleChanceAward, chance_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckDoubleChanceAward, totalchance_),
  };
  AckDoubleChanceAward_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AckDoubleChanceAward_descriptor_,
      AckDoubleChanceAward::default_instance_,
      AckDoubleChanceAward_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckDoubleChanceAward, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckDoubleChanceAward, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AckDoubleChanceAward));
  AckLoseTooMuch_descriptor_ = file->message_type(20);
  static const int AckLoseTooMuch_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckLoseTooMuch, sessionid_),
  };
  AckLoseTooMuch_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AckLoseTooMuch_descriptor_,
      AckLoseTooMuch::default_instance_,
      AckLoseTooMuch_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckLoseTooMuch, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckLoseTooMuch, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AckLoseTooMuch));
  AckCloseConnection_descriptor_ = file->message_type(21);
  static const int AckCloseConnection_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckCloseConnection, sessionid_),
  };
  AckCloseConnection_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AckCloseConnection_descriptor_,
      AckCloseConnection::default_instance_,
      AckCloseConnection_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckCloseConnection, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckCloseConnection, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AckCloseConnection));
  ReqOpenClown_descriptor_ = file->message_type(22);
  static const int ReqOpenClown_offsets_[1] = {
  };
  ReqOpenClown_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReqOpenClown_descriptor_,
      ReqOpenClown::default_instance_,
      ReqOpenClown_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqOpenClown, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqOpenClown, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReqOpenClown));
  AckOpenClown_descriptor_ = file->message_type(23);
  static const int AckOpenClown_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckOpenClown, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckOpenClown, freemoney_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckOpenClown, exchangemoney_),
  };
  AckOpenClown_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AckOpenClown_descriptor_,
      AckOpenClown::default_instance_,
      AckOpenClown_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckOpenClown, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckOpenClown, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AckOpenClown));
  ReqCloseClown_descriptor_ = file->message_type(24);
  static const int ReqCloseClown_offsets_[1] = {
  };
  ReqCloseClown_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReqCloseClown_descriptor_,
      ReqCloseClown::default_instance_,
      ReqCloseClown_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqCloseClown, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqCloseClown, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReqCloseClown));
  AckCloseClown_descriptor_ = file->message_type(25);
  static const int AckCloseClown_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckCloseClown, result_),
  };
  AckCloseClown_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AckCloseClown_descriptor_,
      AckCloseClown::default_instance_,
      AckCloseClown_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckCloseClown, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckCloseClown, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AckCloseClown));
  AckServerInMaintaining_descriptor_ = file->message_type(26);
  static const int AckServerInMaintaining_offsets_[1] = {
  };
  AckServerInMaintaining_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AckServerInMaintaining_descriptor_,
      AckServerInMaintaining::default_instance_,
      AckServerInMaintaining_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckServerInMaintaining, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckServerInMaintaining, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AckServerInMaintaining));
  AckPoolValue_descriptor_ = file->message_type(27);
  static const int AckPoolValue_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckPoolValue, poolvalue_),
  };
  AckPoolValue_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AckPoolValue_descriptor_,
      AckPoolValue::default_instance_,
      AckPoolValue_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckPoolValue, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckPoolValue, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AckPoolValue));
  ReqRankingList_descriptor_ = file->message_type(28);
  static const int ReqRankingList_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqRankingList, days_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqRankingList, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqRankingList, number_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqRankingList, containself_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqRankingList, strictchannel_),
  };
  ReqRankingList_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReqRankingList_descriptor_,
      ReqRankingList::default_instance_,
      ReqRankingList_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqRankingList, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqRankingList, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReqRankingList));
  AckRankingList_descriptor_ = file->message_type(29);
  static const int AckRankingList_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckRankingList, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckRankingList, channel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckRankingList, list_),
  };
  AckRankingList_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AckRankingList_descriptor_,
      AckRankingList::default_instance_,
      AckRankingList_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckRankingList, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckRankingList, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AckRankingList));
  AckRankingList_RankInfo_descriptor_ = AckRankingList_descriptor_->nested_type(0);
  static const int AckRankingList_RankInfo_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckRankingList_RankInfo, serial_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckRankingList_RankInfo, userid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckRankingList_RankInfo, rolename_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckRankingList_RankInfo, value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckRankingList_RankInfo, subvalue_),
  };
  AckRankingList_RankInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AckRankingList_RankInfo_descriptor_,
      AckRankingList_RankInfo::default_instance_,
      AckRankingList_RankInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckRankingList_RankInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckRankingList_RankInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AckRankingList_RankInfo));
  ReqHandselAwardHistory_descriptor_ = file->message_type(30);
  static const int ReqHandselAwardHistory_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqHandselAwardHistory, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqHandselAwardHistory, rows_),
  };
  ReqHandselAwardHistory_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReqHandselAwardHistory_descriptor_,
      ReqHandselAwardHistory::default_instance_,
      ReqHandselAwardHistory_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqHandselAwardHistory, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqHandselAwardHistory, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReqHandselAwardHistory));
  AckHandselAwardHistory_descriptor_ = file->message_type(31);
  static const int AckHandselAwardHistory_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckHandselAwardHistory, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckHandselAwardHistory, history_),
  };
  AckHandselAwardHistory_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AckHandselAwardHistory_descriptor_,
      AckHandselAwardHistory::default_instance_,
      AckHandselAwardHistory_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckHandselAwardHistory, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckHandselAwardHistory, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AckHandselAwardHistory));
  AckHandselAwardHistory_HandselAward_descriptor_ = AckHandselAwardHistory_descriptor_->nested_type(0);
  static const int AckHandselAwardHistory_HandselAward_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckHandselAwardHistory_HandselAward, serial_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckHandselAwardHistory_HandselAward, username_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckHandselAwardHistory_HandselAward, happentime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckHandselAwardHistory_HandselAward, awardmoney_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckHandselAwardHistory_HandselAward, handselpool_),
  };
  AckHandselAwardHistory_HandselAward_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AckHandselAwardHistory_HandselAward_descriptor_,
      AckHandselAwardHistory_HandselAward::default_instance_,
      AckHandselAwardHistory_HandselAward_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckHandselAwardHistory_HandselAward, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckHandselAwardHistory_HandselAward, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AckHandselAwardHistory_HandselAward));
  AckIncreaseExpActivity_descriptor_ = file->message_type(32);
  static const int AckIncreaseExpActivity_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckIncreaseExpActivity, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckIncreaseExpActivity, orlev_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckIncreaseExpActivity, award_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckIncreaseExpActivity, curexp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckIncreaseExpActivity, maxexp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckIncreaseExpActivity, title_),
  };
  AckIncreaseExpActivity_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AckIncreaseExpActivity_descriptor_,
      AckIncreaseExpActivity::default_instance_,
      AckIncreaseExpActivity_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckIncreaseExpActivity, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckIncreaseExpActivity, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AckIncreaseExpActivity));
  ReqDegrade_descriptor_ = file->message_type(33);
  static const int ReqDegrade_offsets_[1] = {
  };
  ReqDegrade_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReqDegrade_descriptor_,
      ReqDegrade::default_instance_,
      ReqDegrade_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqDegrade, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqDegrade, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReqDegrade));
  ReqNewActivityInfo_descriptor_ = file->message_type(34);
  static const int ReqNewActivityInfo_offsets_[1] = {
  };
  ReqNewActivityInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReqNewActivityInfo_descriptor_,
      ReqNewActivityInfo::default_instance_,
      ReqNewActivityInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqNewActivityInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqNewActivityInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReqNewActivityInfo));
  AckNewActivityInfo_descriptor_ = file->message_type(35);
  static const int AckNewActivityInfo_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckNewActivityInfo, newactivitylist_),
  };
  AckNewActivityInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AckNewActivityInfo_descriptor_,
      AckNewActivityInfo::default_instance_,
      AckNewActivityInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckNewActivityInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckNewActivityInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AckNewActivityInfo));
  AckNewActivityInfo_NewActivity_descriptor_ = AckNewActivityInfo_descriptor_->nested_type(0);
  static const int AckNewActivityInfo_NewActivity_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckNewActivityInfo_NewActivity, actid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckNewActivityInfo_NewActivity, open_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckNewActivityInfo_NewActivity, title_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckNewActivityInfo_NewActivity, curexp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckNewActivityInfo_NewActivity, maxexp_),
  };
  AckNewActivityInfo_NewActivity_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AckNewActivityInfo_NewActivity_descriptor_,
      AckNewActivityInfo_NewActivity::default_instance_,
      AckNewActivityInfo_NewActivity_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckNewActivityInfo_NewActivity, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckNewActivityInfo_NewActivity, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AckNewActivityInfo_NewActivity));
  ReqBox_descriptor_ = file->message_type(36);
  static const int ReqBox_offsets_[1] = {
  };
  ReqBox_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReqBox_descriptor_,
      ReqBox::default_instance_,
      ReqBox_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqBox, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqBox, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReqBox));
  AckBox_descriptor_ = file->message_type(37);
  static const int AckBox_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckBox, award_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckBox, boxcount_),
  };
  AckBox_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AckBox_descriptor_,
      AckBox::default_instance_,
      AckBox_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckBox, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckBox, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AckBox));
  AckUserMoney_descriptor_ = file->message_type(38);
  static const int AckUserMoney_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckUserMoney, usermoney_),
  };
  AckUserMoney_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AckUserMoney_descriptor_,
      AckUserMoney::default_instance_,
      AckUserMoney_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckUserMoney, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckUserMoney, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AckUserMoney));
  AckDegradeTime_descriptor_ = file->message_type(39);
  static const int AckDegradeTime_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckDegradeTime, remaintime_),
  };
  AckDegradeTime_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AckDegradeTime_descriptor_,
      AckDegradeTime::default_instance_,
      AckDegradeTime_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckDegradeTime, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckDegradeTime, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AckDegradeTime));
  ReqOrAccordRecharge_descriptor_ = file->message_type(40);
  static const int ReqOrAccordRecharge_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqOrAccordRecharge, username_),
  };
  ReqOrAccordRecharge_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReqOrAccordRecharge_descriptor_,
      ReqOrAccordRecharge::default_instance_,
      ReqOrAccordRecharge_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqOrAccordRecharge, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqOrAccordRecharge, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReqOrAccordRecharge));
  AckOrAccordRecharge_descriptor_ = file->message_type(41);
  static const int AckOrAccordRecharge_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckOrAccordRecharge, orcan_),
  };
  AckOrAccordRecharge_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AckOrAccordRecharge_descriptor_,
      AckOrAccordRecharge::default_instance_,
      AckOrAccordRecharge_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckOrAccordRecharge, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckOrAccordRecharge, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AckOrAccordRecharge));
  ReqAuthCode_descriptor_ = file->message_type(42);
  static const int ReqAuthCode_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqAuthCode, username_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqAuthCode, tel_),
  };
  ReqAuthCode_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReqAuthCode_descriptor_,
      ReqAuthCode::default_instance_,
      ReqAuthCode_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqAuthCode, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqAuthCode, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReqAuthCode));
  AckAuthCode_descriptor_ = file->message_type(43);
  static const int AckAuthCode_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckAuthCode, sucess_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckAuthCode, reason_),
  };
  AckAuthCode_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AckAuthCode_descriptor_,
      AckAuthCode::default_instance_,
      AckAuthCode_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckAuthCode, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckAuthCode, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AckAuthCode));
  ReqUserRecharge_descriptor_ = file->message_type(44);
  static const int ReqUserRecharge_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqUserRecharge, username_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqUserRecharge, authcode_),
  };
  ReqUserRecharge_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReqUserRecharge_descriptor_,
      ReqUserRecharge::default_instance_,
      ReqUserRecharge_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqUserRecharge, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqUserRecharge, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReqUserRecharge));
  AckUserRecharge_descriptor_ = file->message_type(45);
  static const int AckUserRecharge_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckUserRecharge, frecharge_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckUserRecharge, money_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckUserRecharge, times_),
  };
  AckUserRecharge_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AckUserRecharge_descriptor_,
      AckUserRecharge::default_instance_,
      AckUserRecharge_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckUserRecharge, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckUserRecharge, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AckUserRecharge));
  ReqMobleRecharge_descriptor_ = file->message_type(46);
  static const int ReqMobleRecharge_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqMobleRecharge, username_),
  };
  ReqMobleRecharge_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReqMobleRecharge_descriptor_,
      ReqMobleRecharge::default_instance_,
      ReqMobleRecharge_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqMobleRecharge, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqMobleRecharge, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReqMobleRecharge));
  AckMobleRecharge_descriptor_ = file->message_type(47);
  static const int AckMobleRecharge_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckMobleRecharge, success_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckMobleRecharge, reason_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckMobleRecharge, money_),
  };
  AckMobleRecharge_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AckMobleRecharge_descriptor_,
      AckMobleRecharge::default_instance_,
      AckMobleRecharge_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckMobleRecharge, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckMobleRecharge, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AckMobleRecharge));
  ReqPopMobleRecharge_descriptor_ = file->message_type(48);
  static const int ReqPopMobleRecharge_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqPopMobleRecharge, username_),
  };
  ReqPopMobleRecharge_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReqPopMobleRecharge_descriptor_,
      ReqPopMobleRecharge::default_instance_,
      ReqPopMobleRecharge_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqPopMobleRecharge, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqPopMobleRecharge, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReqPopMobleRecharge));
  AckPopMobleRecharge_descriptor_ = file->message_type(49);
  static const int AckPopMobleRecharge_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckPopMobleRecharge, result_),
  };
  AckPopMobleRecharge_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AckPopMobleRecharge_descriptor_,
      AckPopMobleRecharge::default_instance_,
      AckPopMobleRecharge_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckPopMobleRecharge, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckPopMobleRecharge, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AckPopMobleRecharge));
  AckWndAwardNotice_descriptor_ = file->message_type(50);
  static const int AckWndAwardNotice_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckWndAwardNotice, wndcount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckWndAwardNotice, yxdcount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckWndAwardNotice, noticetype_),
  };
  AckWndAwardNotice_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AckWndAwardNotice_descriptor_,
      AckWndAwardNotice::default_instance_,
      AckWndAwardNotice_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckWndAwardNotice, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckWndAwardNotice, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AckWndAwardNotice));
  ReqNewGuideResult_descriptor_ = file->message_type(51);
  static const int ReqNewGuideResult_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqNewGuideResult, username_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqNewGuideResult, result_),
  };
  ReqNewGuideResult_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReqNewGuideResult_descriptor_,
      ReqNewGuideResult::default_instance_,
      ReqNewGuideResult_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqNewGuideResult, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqNewGuideResult, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReqNewGuideResult));
  ackLotteryAward_descriptor_ = file->message_type(52);
  static const int ackLotteryAward_offsets_[10] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ackLotteryAward, sessionid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ackLotteryAward, patterns_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ackLotteryAward, awardmoney_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ackLotteryAward, usermoney_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ackLotteryAward, awardindex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ackLotteryAward, playtimes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ackLotteryAward, doubletimes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ackLotteryAward, canbet_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ackLotteryAward, candoublebet_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ackLotteryAward, count_),
  };
  ackLotteryAward_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ackLotteryAward_descriptor_,
      ackLotteryAward::default_instance_,
      ackLotteryAward_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ackLotteryAward, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ackLotteryAward, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ackLotteryAward));
  ReqSendHorn_descriptor_ = file->message_type(53);
  static const int ReqSendHorn_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqSendHorn, username_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqSendHorn, contents_),
  };
  ReqSendHorn_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReqSendHorn_descriptor_,
      ReqSendHorn::default_instance_,
      ReqSendHorn_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqSendHorn, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqSendHorn, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReqSendHorn));
  ReqBetFromOthers_descriptor_ = file->message_type(54);
  static const int ReqBetFromOthers_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqBetFromOthers, sessionid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqBetFromOthers, bettype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqBetFromOthers, ante_),
  };
  ReqBetFromOthers_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReqBetFromOthers_descriptor_,
      ReqBetFromOthers::default_instance_,
      ReqBetFromOthers_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqBetFromOthers, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqBetFromOthers, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReqBetFromOthers));
  ReqUserMoney_descriptor_ = file->message_type(55);
  static const int ReqUserMoney_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqUserMoney, username_),
  };
  ReqUserMoney_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReqUserMoney_descriptor_,
      ReqUserMoney::default_instance_,
      ReqUserMoney_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqUserMoney, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqUserMoney, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReqUserMoney));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_ClownServerMessage_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DuxLiveTick_descriptor_, &DuxLiveTick::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReqLogin_descriptor_, &ReqLogin::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AckLogin_descriptor_, &AckLogin::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReqChipIn_descriptor_, &ReqChipIn::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AckChipInResult_descriptor_, &AckChipInResult::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReqCharge_descriptor_, &ReqCharge::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AckCharge_descriptor_, &AckCharge::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AckEntityAward_descriptor_, &AckEntityAward::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReqFillUserInfo_descriptor_, &ReqFillUserInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AckFillUserInfo_descriptor_, &AckFillUserInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    EntityAward_descriptor_, &EntityAward::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReqActivityAwardList_descriptor_, &ReqActivityAwardList::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AckActivityAwardList_descriptor_, &AckActivityAwardList::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReqEntityAwardHistory_descriptor_, &ReqEntityAwardHistory::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AckEntityAwardHistory_descriptor_, &AckEntityAwardHistory::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReqBet_descriptor_, &ReqBet::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AckBet_descriptor_, &AckBet::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AckTipMessage_descriptor_, &AckTipMessage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AckHugeAward_descriptor_, &AckHugeAward::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AckDoubleChanceAward_descriptor_, &AckDoubleChanceAward::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AckLoseTooMuch_descriptor_, &AckLoseTooMuch::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AckCloseConnection_descriptor_, &AckCloseConnection::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReqOpenClown_descriptor_, &ReqOpenClown::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AckOpenClown_descriptor_, &AckOpenClown::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReqCloseClown_descriptor_, &ReqCloseClown::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AckCloseClown_descriptor_, &AckCloseClown::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AckServerInMaintaining_descriptor_, &AckServerInMaintaining::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AckPoolValue_descriptor_, &AckPoolValue::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReqRankingList_descriptor_, &ReqRankingList::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AckRankingList_descriptor_, &AckRankingList::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AckRankingList_RankInfo_descriptor_, &AckRankingList_RankInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReqHandselAwardHistory_descriptor_, &ReqHandselAwardHistory::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AckHandselAwardHistory_descriptor_, &AckHandselAwardHistory::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AckHandselAwardHistory_HandselAward_descriptor_, &AckHandselAwardHistory_HandselAward::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AckIncreaseExpActivity_descriptor_, &AckIncreaseExpActivity::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReqDegrade_descriptor_, &ReqDegrade::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReqNewActivityInfo_descriptor_, &ReqNewActivityInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AckNewActivityInfo_descriptor_, &AckNewActivityInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AckNewActivityInfo_NewActivity_descriptor_, &AckNewActivityInfo_NewActivity::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReqBox_descriptor_, &ReqBox::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AckBox_descriptor_, &AckBox::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AckUserMoney_descriptor_, &AckUserMoney::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AckDegradeTime_descriptor_, &AckDegradeTime::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReqOrAccordRecharge_descriptor_, &ReqOrAccordRecharge::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AckOrAccordRecharge_descriptor_, &AckOrAccordRecharge::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReqAuthCode_descriptor_, &ReqAuthCode::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AckAuthCode_descriptor_, &AckAuthCode::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReqUserRecharge_descriptor_, &ReqUserRecharge::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AckUserRecharge_descriptor_, &AckUserRecharge::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReqMobleRecharge_descriptor_, &ReqMobleRecharge::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AckMobleRecharge_descriptor_, &AckMobleRecharge::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReqPopMobleRecharge_descriptor_, &ReqPopMobleRecharge::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AckPopMobleRecharge_descriptor_, &AckPopMobleRecharge::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AckWndAwardNotice_descriptor_, &AckWndAwardNotice::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReqNewGuideResult_descriptor_, &ReqNewGuideResult::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ackLotteryAward_descriptor_, &ackLotteryAward::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReqSendHorn_descriptor_, &ReqSendHorn::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReqBetFromOthers_descriptor_, &ReqBetFromOthers::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReqUserMoney_descriptor_, &ReqUserMoney::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_ClownServerMessage_2eproto() {
  delete DuxLiveTick::default_instance_;
  delete DuxLiveTick_reflection_;
  delete ReqLogin::default_instance_;
  delete ReqLogin_reflection_;
  delete AckLogin::default_instance_;
  delete AckLogin_reflection_;
  delete ReqChipIn::default_instance_;
  delete ReqChipIn_reflection_;
  delete AckChipInResult::default_instance_;
  delete AckChipInResult_reflection_;
  delete ReqCharge::default_instance_;
  delete ReqCharge_reflection_;
  delete AckCharge::default_instance_;
  delete AckCharge_reflection_;
  delete AckEntityAward::default_instance_;
  delete AckEntityAward_reflection_;
  delete ReqFillUserInfo::default_instance_;
  delete ReqFillUserInfo_reflection_;
  delete AckFillUserInfo::default_instance_;
  delete AckFillUserInfo_reflection_;
  delete EntityAward::default_instance_;
  delete EntityAward_reflection_;
  delete ReqActivityAwardList::default_instance_;
  delete ReqActivityAwardList_reflection_;
  delete AckActivityAwardList::default_instance_;
  delete AckActivityAwardList_reflection_;
  delete ReqEntityAwardHistory::default_instance_;
  delete ReqEntityAwardHistory_reflection_;
  delete AckEntityAwardHistory::default_instance_;
  delete AckEntityAwardHistory_reflection_;
  delete ReqBet::default_instance_;
  delete ReqBet_reflection_;
  delete AckBet::default_instance_;
  delete AckBet_reflection_;
  delete AckTipMessage::default_instance_;
  delete AckTipMessage_reflection_;
  delete AckHugeAward::default_instance_;
  delete AckHugeAward_reflection_;
  delete AckDoubleChanceAward::default_instance_;
  delete AckDoubleChanceAward_reflection_;
  delete AckLoseTooMuch::default_instance_;
  delete AckLoseTooMuch_reflection_;
  delete AckCloseConnection::default_instance_;
  delete AckCloseConnection_reflection_;
  delete ReqOpenClown::default_instance_;
  delete ReqOpenClown_reflection_;
  delete AckOpenClown::default_instance_;
  delete AckOpenClown_reflection_;
  delete ReqCloseClown::default_instance_;
  delete ReqCloseClown_reflection_;
  delete AckCloseClown::default_instance_;
  delete AckCloseClown_reflection_;
  delete AckServerInMaintaining::default_instance_;
  delete AckServerInMaintaining_reflection_;
  delete AckPoolValue::default_instance_;
  delete AckPoolValue_reflection_;
  delete ReqRankingList::default_instance_;
  delete ReqRankingList_reflection_;
  delete AckRankingList::default_instance_;
  delete AckRankingList_reflection_;
  delete AckRankingList_RankInfo::default_instance_;
  delete AckRankingList_RankInfo_reflection_;
  delete ReqHandselAwardHistory::default_instance_;
  delete ReqHandselAwardHistory_reflection_;
  delete AckHandselAwardHistory::default_instance_;
  delete AckHandselAwardHistory_reflection_;
  delete AckHandselAwardHistory_HandselAward::default_instance_;
  delete AckHandselAwardHistory_HandselAward_reflection_;
  delete AckIncreaseExpActivity::default_instance_;
  delete AckIncreaseExpActivity_reflection_;
  delete ReqDegrade::default_instance_;
  delete ReqDegrade_reflection_;
  delete ReqNewActivityInfo::default_instance_;
  delete ReqNewActivityInfo_reflection_;
  delete AckNewActivityInfo::default_instance_;
  delete AckNewActivityInfo_reflection_;
  delete AckNewActivityInfo_NewActivity::default_instance_;
  delete AckNewActivityInfo_NewActivity_reflection_;
  delete ReqBox::default_instance_;
  delete ReqBox_reflection_;
  delete AckBox::default_instance_;
  delete AckBox_reflection_;
  delete AckUserMoney::default_instance_;
  delete AckUserMoney_reflection_;
  delete AckDegradeTime::default_instance_;
  delete AckDegradeTime_reflection_;
  delete ReqOrAccordRecharge::default_instance_;
  delete ReqOrAccordRecharge_reflection_;
  delete AckOrAccordRecharge::default_instance_;
  delete AckOrAccordRecharge_reflection_;
  delete ReqAuthCode::default_instance_;
  delete ReqAuthCode_reflection_;
  delete AckAuthCode::default_instance_;
  delete AckAuthCode_reflection_;
  delete ReqUserRecharge::default_instance_;
  delete ReqUserRecharge_reflection_;
  delete AckUserRecharge::default_instance_;
  delete AckUserRecharge_reflection_;
  delete ReqMobleRecharge::default_instance_;
  delete ReqMobleRecharge_reflection_;
  delete AckMobleRecharge::default_instance_;
  delete AckMobleRecharge_reflection_;
  delete ReqPopMobleRecharge::default_instance_;
  delete ReqPopMobleRecharge_reflection_;
  delete AckPopMobleRecharge::default_instance_;
  delete AckPopMobleRecharge_reflection_;
  delete AckWndAwardNotice::default_instance_;
  delete AckWndAwardNotice_reflection_;
  delete ReqNewGuideResult::default_instance_;
  delete ReqNewGuideResult_reflection_;
  delete ackLotteryAward::default_instance_;
  delete ackLotteryAward_reflection_;
  delete ReqSendHorn::default_instance_;
  delete ReqSendHorn_reflection_;
  delete ReqBetFromOthers::default_instance_;
  delete ReqBetFromOthers_reflection_;
  delete ReqUserMoney::default_instance_;
  delete ReqUserMoney_reflection_;
}

void protobuf_AddDesc_ClownServerMessage_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\030ClownServerMessage.proto\022\025com.ourgame."
    "clown.msg\"\033\n\013DuxLiveTick\022\014\n\004time\030\001 \002(\003\"\316"
    "\001\n\010ReqLogin\022\020\n\010roleName\030\001 \002(\t\022\016\n\006userId\030"
    "\002 \001(\003\022\020\n\010userName\030\003 \002(\t\022\020\n\010password\030\004 \001("
    "\t\022\024\n\014fatherGameId\030\005 \001(\005\022\021\n\tloaderURL\030\006 \001"
    "(\t\022\r\n\005force\030\007 \001(\010\022\016\n\006ticket\030\010 \001(\t\022\021\n\tipA"
    "ddress\030\t \001(\004\022\016\n\006gameId\030\n \001(\r\022\021\n\tmoneyTyp"
    "e\030\013 \001(\r\"\261\001\n\010AckLogin\022\021\n\tsessionId\030\001 \002(\003\022"
    "\017\n\007success\030\002 \002(\005\022\022\n\nfailReason\030\003 \001(\t\022\016\n\006"
    "userId\030\004 \001(\003\022\020\n\010username\030\005 \001(\t\022\021\n\tuserMo"
    "ney\030\006 \001(\003\022\021\n\tplayTimes\030\007 \001(\005\022\023\n\013doubleTi"
    "mes\030\010 \001(\005\022\020\n\010is_guide\030\t \001(\005\"\?\n\tReqChipIn"
    "\022\021\n\tsessionId\030\001 \002(\003\022\014\n\004ante\030\002 \002(\003\022\021\n\tuse"
    "Double\030\003 \001(\010\"\277\001\n\017AckChipInResult\022\021\n\tsess"
    "ionId\030\001 \002(\003\022\020\n\010patterns\030\002 \002(\t\022\022\n\nawardMo"
    "ney\030\003 \002(\003\022\021\n\tuserMoney\030\004 \002(\003\022\022\n\nawardInd"
    "ex\030\005 \001(\005\022\021\n\tplayTimes\030\006 \001(\005\022\023\n\013doubleTim"
    "es\030\007 \001(\005\022\016\n\006canBet\030\010 \002(\010\022\024\n\014canDoubleBet"
    "\030\t \002(\010\"\036\n\tReqCharge\022\021\n\tsessionId\030\001 \002(\003\"g"
    "\n\tAckCharge\022\021\n\tsessionId\030\001 \002(\003\022\017\n\007succes"
    "s\030\002 \002(\010\022\021\n\tuserMoney\030\003 \002(\003\022\022\n\nextraAward"
    "\030\004 \001(\003\022\017\n\007persent\030\005 \001(\005\"U\n\016AckEntityAwar"
    "d\022\n\n\002id\030\001 \002(\r\022\016\n\006amount\030\002 \002(\r\022\014\n\004name\030\003 "
    "\002(\t\022\014\n\004unit\030\004 \002(\t\022\013\n\003url\030\005 \002(\t\"\224\001\n\017ReqFi"
    "llUserInfo\022\020\n\010realName\030\001 \002(\t\022\016\n\006mobile\030\002"
    " \002(\t\022\017\n\007address\030\003 \002(\t\022\017\n\007zipCode\030\004 \002(\t\022\016"
    "\n\006idcard\030\005 \002(\t\022\020\n\010areaCode\030\006 \001(\t\022\r\n\005phon"
    "e\030\007 \001(\t\022\014\n\004memo\030\010 \001(\t\"5\n\017AckFillUserInfo"
    "\022\017\n\007success\030\001 \002(\005\022\021\n\tfailReson\030\002 \001(\t\"e\n\013"
    "EntityAward\022\n\n\002id\030\001 \002(\005\022\020\n\010nickname\030\002 \002("
    "\t\022\014\n\004date\030\003 \002(\t\022\016\n\006amount\030\004 \002(\004\022\014\n\004unit\030"
    "\005 \002(\t\022\014\n\004name\030\006 \002(\t\"9\n\024ReqActivityAwardL"
    "ist\022\017\n\004page\030\001 \001(\005:\0011\022\020\n\004size\030\002 \001(\005:\00210\"M"
    "\n\024AckActivityAwardList\0225\n\tawardList\030\001 \003("
    "\0132\".com.ourgame.clown.msg.EntityAward\":\n"
    "\025ReqEntityAwardHistory\022\017\n\004page\030\001 \001(\005:\0011\022"
    "\020\n\004size\030\002 \001(\005:\00210\"N\n\025AckEntityAwardHisto"
    "ry\0225\n\tawardList\030\001 \003(\0132\".com.ourgame.clow"
    "n.msg.EntityAward\",\n\006ReqBet\022\021\n\tsessionId"
    "\030\001 \002(\003\022\017\n\007betType\030\002 \002(\005\"\311\001\n\006AckBet\022\021\n\tse"
    "ssionId\030\001 \002(\003\022\021\n\tbetResult\030\002 \002(\005\022\022\n\nawar"
    "dMoney\030\003 \002(\003\022\020\n\010baseAnte\030\004 \002(\003\022\020\n\010betTim"
    "es\030\005 \002(\005\022\021\n\tuserMoney\030\006 \002(\003\022\024\n\014nextMulti"
    "ple\030\007 \001(\005\022\016\n\006canBet\030\010 \002(\010\022\024\n\014canDoubleBe"
    "t\030\t \002(\010\022\022\n\ntipMessage\030\n \001(\t\"C\n\rAckTipMes"
    "sage\022\021\n\tsessionId\030\001 \002(\003\022\017\n\007msgType\030\002 \002(\005"
    "\022\016\n\006txtMsg\030\003 \002(\t\"G\n\014AckHugeAward\022\020\n\010user"
    "name\030\001 \002(\t\022\022\n\nawardMoney\030\002 \002(\003\022\021\n\tawardT"
    "ime\030\003 \002(\003\"N\n\024AckDoubleChanceAward\022\021\n\tses"
    "sionId\030\001 \002(\003\022\016\n\006chance\030\002 \002(\005\022\023\n\013totalCha"
    "nce\030\003 \002(\005\"#\n\016AckLoseTooMuch\022\021\n\tsessionId"
    "\030\001 \002(\003\"\'\n\022AckCloseConnection\022\021\n\tsessionI"
    "d\030\001 \002(\003\"\016\n\014ReqOpenClown\"H\n\014AckOpenClown\022"
    "\016\n\006result\030\001 \002(\005\022\021\n\tfreeMoney\030\002 \001(\003\022\025\n\rex"
    "changeMoney\030\003 \001(\003\"\017\n\rReqCloseClown\"\037\n\rAc"
    "kCloseClown\022\016\n\006result\030\001 \002(\005\"\030\n\026AckServer"
    "InMaintaining\"!\n\014AckPoolValue\022\021\n\tpoolVal"
    "ue\030\001 \002(\004\"y\n\016ReqRankingList\022\014\n\004days\030\001 \002(\r"
    "\022\014\n\004type\030\002 \002(\r\022\022\n\006number\030\003 \001(\r:\00210\022\031\n\013co"
    "ntainSelf\030\004 \001(\010:\004true\022\034\n\rstrictChannel\030\005"
    " \001(\010:\005false\"\314\001\n\016AckRankingList\022\014\n\004type\030\001"
    " \002(\r\022\017\n\007channel\030\002 \001(\r\022<\n\004list\030\003 \003(\0132..co"
    "m.ourgame.clown.msg.AckRankingList.RankI"
    "nfo\032]\n\010RankInfo\022\016\n\006serial\030\001 \002(\r\022\016\n\006userI"
    "d\030\002 \002(\004\022\020\n\010roleName\030\003 \002(\t\022\r\n\005value\030\004 \002(\003"
    "\022\020\n\010subValue\030\005 \002(\004\"8\n\026ReqHandselAwardHis"
    "tory\022\014\n\004type\030\001 \001(\r\022\020\n\004rows\030\002 \001(\r:\00220\"\345\001\n"
    "\026AckHandselAwardHistory\022\017\n\004type\030\001 \002(\r:\0010"
    "\022K\n\007history\030\002 \003(\0132:.com.ourgame.clown.ms"
    "g.AckHandselAwardHistory.HandselAward\032m\n"
    "\014HandselAward\022\016\n\006serial\030\001 \002(\r\022\020\n\010usernam"
    "e\030\002 \002(\t\022\022\n\nhappenTime\030\003 \002(\t\022\022\n\nawardMone"
    "y\030\004 \002(\004\022\023\n\013handselPool\030\005 \002(\004\"t\n\026AckIncre"
    "aseExpActivity\022\r\n\005level\030\001 \002(\005\022\r\n\005orLev\030\002"
    " \002(\005\022\r\n\005award\030\003 \002(\003\022\016\n\006curExp\030\004 \002(\003\022\016\n\006m"
    "axExp\030\005 \002(\003\022\r\n\005title\030\006 \002(\t\"\014\n\nReqDegrade"
    "\"\024\n\022ReqNewActivityInfo\"\277\001\n\022AckNewActivit"
    "yInfo\022N\n\017newActivityList\030\001 \003(\01325.com.our"
    "game.clown.msg.AckNewActivityInfo.NewAct"
    "ivity\032Y\n\013NewActivity\022\r\n\005actId\030\001 \002(\005\022\014\n\004o"
    "pen\030\002 \002(\010\022\r\n\005title\030\003 \002(\t\022\016\n\006curExp\030\004 \002(\003"
    "\022\016\n\006maxExp\030\005 \002(\003\"\010\n\006ReqBox\")\n\006AckBox\022\r\n\005"
    "award\030\001 \002(\003\022\020\n\010boxCount\030\002 \002(\005\"!\n\014AckUser"
    "Money\022\021\n\tuserMoney\030\001 \002(\003\"$\n\016AckDegradeTi"
    "me\022\022\n\nremainTime\030\001 \002(\005\"\'\n\023ReqOrAccordRec"
    "harge\022\020\n\010username\030\001 \002(\t\"$\n\023AckOrAccordRe"
    "charge\022\r\n\005orCan\030\001 \002(\005\",\n\013ReqAuthCode\022\020\n\010"
    "username\030\001 \002(\t\022\013\n\003tel\030\002 \002(\t\"-\n\013AckAuthCo"
    "de\022\016\n\006sucess\030\001 \002(\005\022\016\n\006reason\030\003 \002(\t\"5\n\017Re"
    "qUserRecharge\022\020\n\010username\030\001 \002(\t\022\020\n\010authC"
    "ode\030\002 \002(\t\"B\n\017AckUserRecharge\022\021\n\tfrecharg"
    "e\030\001 \002(\003\022\r\n\005money\030\002 \002(\003\022\r\n\005times\030\003 \002(\005\"$\n"
    "\020ReqMobleRecharge\022\020\n\010username\030\001 \002(\t\"B\n\020A"
    "ckMobleRecharge\022\017\n\007success\030\001 \002(\005\022\016\n\006reas"
    "on\030\002 \001(\t\022\r\n\005money\030\003 \001(\003\"\'\n\023ReqPopMobleRe"
    "charge\022\020\n\010username\030\001 \002(\t\"%\n\023AckPopMobleR"
    "echarge\022\016\n\006result\030\001 \002(\005\"K\n\021AckWndAwardNo"
    "tice\022\020\n\010wndCount\030\001 \002(\003\022\020\n\010yxdCount\030\002 \002(\003"
    "\022\022\n\nnoticeType\030\003 \002(\005\"5\n\021ReqNewGuideResul"
    "t\022\020\n\010username\030\001 \002(\t\022\016\n\006result\030\002 \002(\005\"\316\001\n\017"
    "ackLotteryAward\022\021\n\tsessionId\030\001 \002(\003\022\020\n\010pa"
    "tterns\030\002 \002(\t\022\022\n\nawardMoney\030\003 \002(\003\022\021\n\tuser"
    "Money\030\004 \002(\003\022\022\n\nawardIndex\030\005 \001(\005\022\021\n\tplayT"
    "imes\030\006 \001(\005\022\023\n\013doubleTimes\030\007 \001(\005\022\016\n\006canBe"
    "t\030\010 \002(\010\022\024\n\014canDoubleBet\030\t \002(\010\022\r\n\005count\030\n"
    " \002(\005\"1\n\013ReqSendHorn\022\020\n\010username\030\001 \001(\t\022\020\n"
    "\010contents\030\002 \001(\t\"D\n\020ReqBetFromOthers\022\021\n\ts"
    "essionId\030\001 \002(\003\022\017\n\007betType\030\002 \002(\005\022\014\n\004ante\030"
    "\003 \002(\003\" \n\014ReqUserMoney\022\020\n\010username\030\001 \002(\t", 4359);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "ClownServerMessage.proto", &protobuf_RegisterTypes);
  DuxLiveTick::default_instance_ = new DuxLiveTick();
  ReqLogin::default_instance_ = new ReqLogin();
  AckLogin::default_instance_ = new AckLogin();
  ReqChipIn::default_instance_ = new ReqChipIn();
  AckChipInResult::default_instance_ = new AckChipInResult();
  ReqCharge::default_instance_ = new ReqCharge();
  AckCharge::default_instance_ = new AckCharge();
  AckEntityAward::default_instance_ = new AckEntityAward();
  ReqFillUserInfo::default_instance_ = new ReqFillUserInfo();
  AckFillUserInfo::default_instance_ = new AckFillUserInfo();
  EntityAward::default_instance_ = new EntityAward();
  ReqActivityAwardList::default_instance_ = new ReqActivityAwardList();
  AckActivityAwardList::default_instance_ = new AckActivityAwardList();
  ReqEntityAwardHistory::default_instance_ = new ReqEntityAwardHistory();
  AckEntityAwardHistory::default_instance_ = new AckEntityAwardHistory();
  ReqBet::default_instance_ = new ReqBet();
  AckBet::default_instance_ = new AckBet();
  AckTipMessage::default_instance_ = new AckTipMessage();
  AckHugeAward::default_instance_ = new AckHugeAward();
  AckDoubleChanceAward::default_instance_ = new AckDoubleChanceAward();
  AckLoseTooMuch::default_instance_ = new AckLoseTooMuch();
  AckCloseConnection::default_instance_ = new AckCloseConnection();
  ReqOpenClown::default_instance_ = new ReqOpenClown();
  AckOpenClown::default_instance_ = new AckOpenClown();
  ReqCloseClown::default_instance_ = new ReqCloseClown();
  AckCloseClown::default_instance_ = new AckCloseClown();
  AckServerInMaintaining::default_instance_ = new AckServerInMaintaining();
  AckPoolValue::default_instance_ = new AckPoolValue();
  ReqRankingList::default_instance_ = new ReqRankingList();
  AckRankingList::default_instance_ = new AckRankingList();
  AckRankingList_RankInfo::default_instance_ = new AckRankingList_RankInfo();
  ReqHandselAwardHistory::default_instance_ = new ReqHandselAwardHistory();
  AckHandselAwardHistory::default_instance_ = new AckHandselAwardHistory();
  AckHandselAwardHistory_HandselAward::default_instance_ = new AckHandselAwardHistory_HandselAward();
  AckIncreaseExpActivity::default_instance_ = new AckIncreaseExpActivity();
  ReqDegrade::default_instance_ = new ReqDegrade();
  ReqNewActivityInfo::default_instance_ = new ReqNewActivityInfo();
  AckNewActivityInfo::default_instance_ = new AckNewActivityInfo();
  AckNewActivityInfo_NewActivity::default_instance_ = new AckNewActivityInfo_NewActivity();
  ReqBox::default_instance_ = new ReqBox();
  AckBox::default_instance_ = new AckBox();
  AckUserMoney::default_instance_ = new AckUserMoney();
  AckDegradeTime::default_instance_ = new AckDegradeTime();
  ReqOrAccordRecharge::default_instance_ = new ReqOrAccordRecharge();
  AckOrAccordRecharge::default_instance_ = new AckOrAccordRecharge();
  ReqAuthCode::default_instance_ = new ReqAuthCode();
  AckAuthCode::default_instance_ = new AckAuthCode();
  ReqUserRecharge::default_instance_ = new ReqUserRecharge();
  AckUserRecharge::default_instance_ = new AckUserRecharge();
  ReqMobleRecharge::default_instance_ = new ReqMobleRecharge();
  AckMobleRecharge::default_instance_ = new AckMobleRecharge();
  ReqPopMobleRecharge::default_instance_ = new ReqPopMobleRecharge();
  AckPopMobleRecharge::default_instance_ = new AckPopMobleRecharge();
  AckWndAwardNotice::default_instance_ = new AckWndAwardNotice();
  ReqNewGuideResult::default_instance_ = new ReqNewGuideResult();
  ackLotteryAward::default_instance_ = new ackLotteryAward();
  ReqSendHorn::default_instance_ = new ReqSendHorn();
  ReqBetFromOthers::default_instance_ = new ReqBetFromOthers();
  ReqUserMoney::default_instance_ = new ReqUserMoney();
  DuxLiveTick::default_instance_->InitAsDefaultInstance();
  ReqLogin::default_instance_->InitAsDefaultInstance();
  AckLogin::default_instance_->InitAsDefaultInstance();
  ReqChipIn::default_instance_->InitAsDefaultInstance();
  AckChipInResult::default_instance_->InitAsDefaultInstance();
  ReqCharge::default_instance_->InitAsDefaultInstance();
  AckCharge::default_instance_->InitAsDefaultInstance();
  AckEntityAward::default_instance_->InitAsDefaultInstance();
  ReqFillUserInfo::default_instance_->InitAsDefaultInstance();
  AckFillUserInfo::default_instance_->InitAsDefaultInstance();
  EntityAward::default_instance_->InitAsDefaultInstance();
  ReqActivityAwardList::default_instance_->InitAsDefaultInstance();
  AckActivityAwardList::default_instance_->InitAsDefaultInstance();
  ReqEntityAwardHistory::default_instance_->InitAsDefaultInstance();
  AckEntityAwardHistory::default_instance_->InitAsDefaultInstance();
  ReqBet::default_instance_->InitAsDefaultInstance();
  AckBet::default_instance_->InitAsDefaultInstance();
  AckTipMessage::default_instance_->InitAsDefaultInstance();
  AckHugeAward::default_instance_->InitAsDefaultInstance();
  AckDoubleChanceAward::default_instance_->InitAsDefaultInstance();
  AckLoseTooMuch::default_instance_->InitAsDefaultInstance();
  AckCloseConnection::default_instance_->InitAsDefaultInstance();
  ReqOpenClown::default_instance_->InitAsDefaultInstance();
  AckOpenClown::default_instance_->InitAsDefaultInstance();
  ReqCloseClown::default_instance_->InitAsDefaultInstance();
  AckCloseClown::default_instance_->InitAsDefaultInstance();
  AckServerInMaintaining::default_instance_->InitAsDefaultInstance();
  AckPoolValue::default_instance_->InitAsDefaultInstance();
  ReqRankingList::default_instance_->InitAsDefaultInstance();
  AckRankingList::default_instance_->InitAsDefaultInstance();
  AckRankingList_RankInfo::default_instance_->InitAsDefaultInstance();
  ReqHandselAwardHistory::default_instance_->InitAsDefaultInstance();
  AckHandselAwardHistory::default_instance_->InitAsDefaultInstance();
  AckHandselAwardHistory_HandselAward::default_instance_->InitAsDefaultInstance();
  AckIncreaseExpActivity::default_instance_->InitAsDefaultInstance();
  ReqDegrade::default_instance_->InitAsDefaultInstance();
  ReqNewActivityInfo::default_instance_->InitAsDefaultInstance();
  AckNewActivityInfo::default_instance_->InitAsDefaultInstance();
  AckNewActivityInfo_NewActivity::default_instance_->InitAsDefaultInstance();
  ReqBox::default_instance_->InitAsDefaultInstance();
  AckBox::default_instance_->InitAsDefaultInstance();
  AckUserMoney::default_instance_->InitAsDefaultInstance();
  AckDegradeTime::default_instance_->InitAsDefaultInstance();
  ReqOrAccordRecharge::default_instance_->InitAsDefaultInstance();
  AckOrAccordRecharge::default_instance_->InitAsDefaultInstance();
  ReqAuthCode::default_instance_->InitAsDefaultInstance();
  AckAuthCode::default_instance_->InitAsDefaultInstance();
  ReqUserRecharge::default_instance_->InitAsDefaultInstance();
  AckUserRecharge::default_instance_->InitAsDefaultInstance();
  ReqMobleRecharge::default_instance_->InitAsDefaultInstance();
  AckMobleRecharge::default_instance_->InitAsDefaultInstance();
  ReqPopMobleRecharge::default_instance_->InitAsDefaultInstance();
  AckPopMobleRecharge::default_instance_->InitAsDefaultInstance();
  AckWndAwardNotice::default_instance_->InitAsDefaultInstance();
  ReqNewGuideResult::default_instance_->InitAsDefaultInstance();
  ackLotteryAward::default_instance_->InitAsDefaultInstance();
  ReqSendHorn::default_instance_->InitAsDefaultInstance();
  ReqBetFromOthers::default_instance_->InitAsDefaultInstance();
  ReqUserMoney::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_ClownServerMessage_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_ClownServerMessage_2eproto {
  StaticDescriptorInitializer_ClownServerMessage_2eproto() {
    protobuf_AddDesc_ClownServerMessage_2eproto();
  }
} static_descriptor_initializer_ClownServerMessage_2eproto_;


// ===================================================================

#ifndef _MSC_VER
const int DuxLiveTick::kTimeFieldNumber;
#endif  // !_MSC_VER

DuxLiveTick::DuxLiveTick()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DuxLiveTick::InitAsDefaultInstance() {
}

DuxLiveTick::DuxLiveTick(const DuxLiveTick& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DuxLiveTick::SharedCtor() {
  _cached_size_ = 0;
  time_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DuxLiveTick::~DuxLiveTick() {
  SharedDtor();
}

void DuxLiveTick::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DuxLiveTick::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DuxLiveTick::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DuxLiveTick_descriptor_;
}

const DuxLiveTick& DuxLiveTick::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ClownServerMessage_2eproto();  return *default_instance_;
}

DuxLiveTick* DuxLiveTick::default_instance_ = NULL;

DuxLiveTick* DuxLiveTick::New() const {
  return new DuxLiveTick;
}

void DuxLiveTick::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    time_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DuxLiveTick::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 time = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &time_)));
          set_has_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DuxLiveTick::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int64 time = 1;
  if (has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->time(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DuxLiveTick::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int64 time = 1;
  if (has_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->time(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DuxLiveTick::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 time = 1;
    if (has_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->time());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DuxLiveTick::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DuxLiveTick* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DuxLiveTick*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DuxLiveTick::MergeFrom(const DuxLiveTick& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_time()) {
      set_time(from.time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DuxLiveTick::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DuxLiveTick::CopyFrom(const DuxLiveTick& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DuxLiveTick::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void DuxLiveTick::Swap(DuxLiveTick* other) {
  if (other != this) {
    std::swap(time_, other->time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DuxLiveTick::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DuxLiveTick_descriptor_;
  metadata.reflection = DuxLiveTick_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ReqLogin::kRoleNameFieldNumber;
const int ReqLogin::kUserIdFieldNumber;
const int ReqLogin::kUserNameFieldNumber;
const int ReqLogin::kPasswordFieldNumber;
const int ReqLogin::kFatherGameIdFieldNumber;
const int ReqLogin::kLoaderURLFieldNumber;
const int ReqLogin::kForceFieldNumber;
const int ReqLogin::kTicketFieldNumber;
const int ReqLogin::kIpAddressFieldNumber;
const int ReqLogin::kGameIdFieldNumber;
const int ReqLogin::kMoneyTypeFieldNumber;
#endif  // !_MSC_VER

ReqLogin::ReqLogin()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ReqLogin::InitAsDefaultInstance() {
}

ReqLogin::ReqLogin(const ReqLogin& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ReqLogin::SharedCtor() {
  _cached_size_ = 0;
  rolename_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  userid_ = GOOGLE_LONGLONG(0);
  username_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  password_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  fathergameid_ = 0;
  loaderurl_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  force_ = false;
  ticket_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ipaddress_ = GOOGLE_ULONGLONG(0);
  gameid_ = 0u;
  moneytype_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReqLogin::~ReqLogin() {
  SharedDtor();
}

void ReqLogin::SharedDtor() {
  if (rolename_ != &::google::protobuf::internal::kEmptyString) {
    delete rolename_;
  }
  if (username_ != &::google::protobuf::internal::kEmptyString) {
    delete username_;
  }
  if (password_ != &::google::protobuf::internal::kEmptyString) {
    delete password_;
  }
  if (loaderurl_ != &::google::protobuf::internal::kEmptyString) {
    delete loaderurl_;
  }
  if (ticket_ != &::google::protobuf::internal::kEmptyString) {
    delete ticket_;
  }
  if (this != default_instance_) {
  }
}

void ReqLogin::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReqLogin::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReqLogin_descriptor_;
}

const ReqLogin& ReqLogin::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ClownServerMessage_2eproto();  return *default_instance_;
}

ReqLogin* ReqLogin::default_instance_ = NULL;

ReqLogin* ReqLogin::New() const {
  return new ReqLogin;
}

void ReqLogin::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_rolename()) {
      if (rolename_ != &::google::protobuf::internal::kEmptyString) {
        rolename_->clear();
      }
    }
    userid_ = GOOGLE_LONGLONG(0);
    if (has_username()) {
      if (username_ != &::google::protobuf::internal::kEmptyString) {
        username_->clear();
      }
    }
    if (has_password()) {
      if (password_ != &::google::protobuf::internal::kEmptyString) {
        password_->clear();
      }
    }
    fathergameid_ = 0;
    if (has_loaderurl()) {
      if (loaderurl_ != &::google::protobuf::internal::kEmptyString) {
        loaderurl_->clear();
      }
    }
    force_ = false;
    if (has_ticket()) {
      if (ticket_ != &::google::protobuf::internal::kEmptyString) {
        ticket_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    ipaddress_ = GOOGLE_ULONGLONG(0);
    gameid_ = 0u;
    moneytype_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReqLogin::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string roleName = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_rolename()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->rolename().data(), this->rolename().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_userId;
        break;
      }
      
      // optional int64 userId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_userId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &userid_)));
          set_has_userid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_userName;
        break;
      }
      
      // required string userName = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_userName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_username()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->username().data(), this->username().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_password;
        break;
      }
      
      // optional string password = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_password:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_password()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->password().data(), this->password().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_fatherGameId;
        break;
      }
      
      // optional int32 fatherGameId = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fatherGameId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &fathergameid_)));
          set_has_fathergameid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_loaderURL;
        break;
      }
      
      // optional string loaderURL = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_loaderURL:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_loaderurl()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->loaderurl().data(), this->loaderurl().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_force;
        break;
      }
      
      // optional bool force = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_force:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &force_)));
          set_has_force();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_ticket;
        break;
      }
      
      // optional string ticket = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ticket:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ticket()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->ticket().data(), this->ticket().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_ipAddress;
        break;
      }
      
      // optional uint64 ipAddress = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ipAddress:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &ipaddress_)));
          set_has_ipaddress();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_gameId;
        break;
      }
      
      // optional uint32 gameId = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_gameId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gameid_)));
          set_has_gameid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_moneyType;
        break;
      }
      
      // optional uint32 moneyType = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_moneyType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &moneytype_)));
          set_has_moneytype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ReqLogin::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string roleName = 1;
  if (has_rolename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->rolename().data(), this->rolename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->rolename(), output);
  }
  
  // optional int64 userId = 2;
  if (has_userid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->userid(), output);
  }
  
  // required string userName = 3;
  if (has_username()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->username().data(), this->username().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->username(), output);
  }
  
  // optional string password = 4;
  if (has_password()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->password().data(), this->password().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->password(), output);
  }
  
  // optional int32 fatherGameId = 5;
  if (has_fathergameid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->fathergameid(), output);
  }
  
  // optional string loaderURL = 6;
  if (has_loaderurl()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->loaderurl().data(), this->loaderurl().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->loaderurl(), output);
  }
  
  // optional bool force = 7;
  if (has_force()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->force(), output);
  }
  
  // optional string ticket = 8;
  if (has_ticket()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ticket().data(), this->ticket().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      8, this->ticket(), output);
  }
  
  // optional uint64 ipAddress = 9;
  if (has_ipaddress()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(9, this->ipaddress(), output);
  }
  
  // optional uint32 gameId = 10;
  if (has_gameid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->gameid(), output);
  }
  
  // optional uint32 moneyType = 11;
  if (has_moneytype()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->moneytype(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ReqLogin::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string roleName = 1;
  if (has_rolename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->rolename().data(), this->rolename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->rolename(), target);
  }
  
  // optional int64 userId = 2;
  if (has_userid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->userid(), target);
  }
  
  // required string userName = 3;
  if (has_username()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->username().data(), this->username().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->username(), target);
  }
  
  // optional string password = 4;
  if (has_password()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->password().data(), this->password().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->password(), target);
  }
  
  // optional int32 fatherGameId = 5;
  if (has_fathergameid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->fathergameid(), target);
  }
  
  // optional string loaderURL = 6;
  if (has_loaderurl()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->loaderurl().data(), this->loaderurl().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->loaderurl(), target);
  }
  
  // optional bool force = 7;
  if (has_force()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->force(), target);
  }
  
  // optional string ticket = 8;
  if (has_ticket()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ticket().data(), this->ticket().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->ticket(), target);
  }
  
  // optional uint64 ipAddress = 9;
  if (has_ipaddress()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(9, this->ipaddress(), target);
  }
  
  // optional uint32 gameId = 10;
  if (has_gameid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->gameid(), target);
  }
  
  // optional uint32 moneyType = 11;
  if (has_moneytype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->moneytype(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ReqLogin::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string roleName = 1;
    if (has_rolename()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->rolename());
    }
    
    // optional int64 userId = 2;
    if (has_userid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->userid());
    }
    
    // required string userName = 3;
    if (has_username()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->username());
    }
    
    // optional string password = 4;
    if (has_password()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->password());
    }
    
    // optional int32 fatherGameId = 5;
    if (has_fathergameid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->fathergameid());
    }
    
    // optional string loaderURL = 6;
    if (has_loaderurl()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->loaderurl());
    }
    
    // optional bool force = 7;
    if (has_force()) {
      total_size += 1 + 1;
    }
    
    // optional string ticket = 8;
    if (has_ticket()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->ticket());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint64 ipAddress = 9;
    if (has_ipaddress()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->ipaddress());
    }
    
    // optional uint32 gameId = 10;
    if (has_gameid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->gameid());
    }
    
    // optional uint32 moneyType = 11;
    if (has_moneytype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->moneytype());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReqLogin::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReqLogin* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReqLogin*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReqLogin::MergeFrom(const ReqLogin& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_rolename()) {
      set_rolename(from.rolename());
    }
    if (from.has_userid()) {
      set_userid(from.userid());
    }
    if (from.has_username()) {
      set_username(from.username());
    }
    if (from.has_password()) {
      set_password(from.password());
    }
    if (from.has_fathergameid()) {
      set_fathergameid(from.fathergameid());
    }
    if (from.has_loaderurl()) {
      set_loaderurl(from.loaderurl());
    }
    if (from.has_force()) {
      set_force(from.force());
    }
    if (from.has_ticket()) {
      set_ticket(from.ticket());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_ipaddress()) {
      set_ipaddress(from.ipaddress());
    }
    if (from.has_gameid()) {
      set_gameid(from.gameid());
    }
    if (from.has_moneytype()) {
      set_moneytype(from.moneytype());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReqLogin::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqLogin::CopyFrom(const ReqLogin& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqLogin::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000005) != 0x00000005) return false;
  
  return true;
}

void ReqLogin::Swap(ReqLogin* other) {
  if (other != this) {
    std::swap(rolename_, other->rolename_);
    std::swap(userid_, other->userid_);
    std::swap(username_, other->username_);
    std::swap(password_, other->password_);
    std::swap(fathergameid_, other->fathergameid_);
    std::swap(loaderurl_, other->loaderurl_);
    std::swap(force_, other->force_);
    std::swap(ticket_, other->ticket_);
    std::swap(ipaddress_, other->ipaddress_);
    std::swap(gameid_, other->gameid_);
    std::swap(moneytype_, other->moneytype_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReqLogin::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReqLogin_descriptor_;
  metadata.reflection = ReqLogin_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AckLogin::kSessionIdFieldNumber;
const int AckLogin::kSuccessFieldNumber;
const int AckLogin::kFailReasonFieldNumber;
const int AckLogin::kUserIdFieldNumber;
const int AckLogin::kUsernameFieldNumber;
const int AckLogin::kUserMoneyFieldNumber;
const int AckLogin::kPlayTimesFieldNumber;
const int AckLogin::kDoubleTimesFieldNumber;
const int AckLogin::kIsGuideFieldNumber;
#endif  // !_MSC_VER

AckLogin::AckLogin()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AckLogin::InitAsDefaultInstance() {
}

AckLogin::AckLogin(const AckLogin& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AckLogin::SharedCtor() {
  _cached_size_ = 0;
  sessionid_ = GOOGLE_LONGLONG(0);
  success_ = 0;
  failreason_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  userid_ = GOOGLE_LONGLONG(0);
  username_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  usermoney_ = GOOGLE_LONGLONG(0);
  playtimes_ = 0;
  doubletimes_ = 0;
  is_guide_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AckLogin::~AckLogin() {
  SharedDtor();
}

void AckLogin::SharedDtor() {
  if (failreason_ != &::google::protobuf::internal::kEmptyString) {
    delete failreason_;
  }
  if (username_ != &::google::protobuf::internal::kEmptyString) {
    delete username_;
  }
  if (this != default_instance_) {
  }
}

void AckLogin::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AckLogin::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AckLogin_descriptor_;
}

const AckLogin& AckLogin::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ClownServerMessage_2eproto();  return *default_instance_;
}

AckLogin* AckLogin::default_instance_ = NULL;

AckLogin* AckLogin::New() const {
  return new AckLogin;
}

void AckLogin::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    sessionid_ = GOOGLE_LONGLONG(0);
    success_ = 0;
    if (has_failreason()) {
      if (failreason_ != &::google::protobuf::internal::kEmptyString) {
        failreason_->clear();
      }
    }
    userid_ = GOOGLE_LONGLONG(0);
    if (has_username()) {
      if (username_ != &::google::protobuf::internal::kEmptyString) {
        username_->clear();
      }
    }
    usermoney_ = GOOGLE_LONGLONG(0);
    playtimes_ = 0;
    doubletimes_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    is_guide_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AckLogin::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 sessionId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &sessionid_)));
          set_has_sessionid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_success;
        break;
      }
      
      // required int32 success = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_success:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &success_)));
          set_has_success();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_failReason;
        break;
      }
      
      // optional string failReason = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_failReason:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_failreason()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->failreason().data(), this->failreason().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_userId;
        break;
      }
      
      // optional int64 userId = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_userId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &userid_)));
          set_has_userid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_username;
        break;
      }
      
      // optional string username = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_username:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_username()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->username().data(), this->username().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_userMoney;
        break;
      }
      
      // optional int64 userMoney = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_userMoney:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &usermoney_)));
          set_has_usermoney();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_playTimes;
        break;
      }
      
      // optional int32 playTimes = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_playTimes:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &playtimes_)));
          set_has_playtimes();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_doubleTimes;
        break;
      }
      
      // optional int32 doubleTimes = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_doubleTimes:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &doubletimes_)));
          set_has_doubletimes();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_is_guide;
        break;
      }
      
      // optional int32 is_guide = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_guide:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &is_guide_)));
          set_has_is_guide();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AckLogin::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int64 sessionId = 1;
  if (has_sessionid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->sessionid(), output);
  }
  
  // required int32 success = 2;
  if (has_success()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->success(), output);
  }
  
  // optional string failReason = 3;
  if (has_failreason()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->failreason().data(), this->failreason().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->failreason(), output);
  }
  
  // optional int64 userId = 4;
  if (has_userid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->userid(), output);
  }
  
  // optional string username = 5;
  if (has_username()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->username().data(), this->username().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->username(), output);
  }
  
  // optional int64 userMoney = 6;
  if (has_usermoney()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(6, this->usermoney(), output);
  }
  
  // optional int32 playTimes = 7;
  if (has_playtimes()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->playtimes(), output);
  }
  
  // optional int32 doubleTimes = 8;
  if (has_doubletimes()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->doubletimes(), output);
  }
  
  // optional int32 is_guide = 9;
  if (has_is_guide()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->is_guide(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AckLogin::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int64 sessionId = 1;
  if (has_sessionid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->sessionid(), target);
  }
  
  // required int32 success = 2;
  if (has_success()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->success(), target);
  }
  
  // optional string failReason = 3;
  if (has_failreason()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->failreason().data(), this->failreason().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->failreason(), target);
  }
  
  // optional int64 userId = 4;
  if (has_userid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->userid(), target);
  }
  
  // optional string username = 5;
  if (has_username()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->username().data(), this->username().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->username(), target);
  }
  
  // optional int64 userMoney = 6;
  if (has_usermoney()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(6, this->usermoney(), target);
  }
  
  // optional int32 playTimes = 7;
  if (has_playtimes()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->playtimes(), target);
  }
  
  // optional int32 doubleTimes = 8;
  if (has_doubletimes()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->doubletimes(), target);
  }
  
  // optional int32 is_guide = 9;
  if (has_is_guide()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->is_guide(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AckLogin::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 sessionId = 1;
    if (has_sessionid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->sessionid());
    }
    
    // required int32 success = 2;
    if (has_success()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->success());
    }
    
    // optional string failReason = 3;
    if (has_failreason()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->failreason());
    }
    
    // optional int64 userId = 4;
    if (has_userid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->userid());
    }
    
    // optional string username = 5;
    if (has_username()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->username());
    }
    
    // optional int64 userMoney = 6;
    if (has_usermoney()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->usermoney());
    }
    
    // optional int32 playTimes = 7;
    if (has_playtimes()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->playtimes());
    }
    
    // optional int32 doubleTimes = 8;
    if (has_doubletimes()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->doubletimes());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 is_guide = 9;
    if (has_is_guide()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->is_guide());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AckLogin::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AckLogin* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AckLogin*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AckLogin::MergeFrom(const AckLogin& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_sessionid()) {
      set_sessionid(from.sessionid());
    }
    if (from.has_success()) {
      set_success(from.success());
    }
    if (from.has_failreason()) {
      set_failreason(from.failreason());
    }
    if (from.has_userid()) {
      set_userid(from.userid());
    }
    if (from.has_username()) {
      set_username(from.username());
    }
    if (from.has_usermoney()) {
      set_usermoney(from.usermoney());
    }
    if (from.has_playtimes()) {
      set_playtimes(from.playtimes());
    }
    if (from.has_doubletimes()) {
      set_doubletimes(from.doubletimes());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_is_guide()) {
      set_is_guide(from.is_guide());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AckLogin::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AckLogin::CopyFrom(const AckLogin& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AckLogin::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void AckLogin::Swap(AckLogin* other) {
  if (other != this) {
    std::swap(sessionid_, other->sessionid_);
    std::swap(success_, other->success_);
    std::swap(failreason_, other->failreason_);
    std::swap(userid_, other->userid_);
    std::swap(username_, other->username_);
    std::swap(usermoney_, other->usermoney_);
    std::swap(playtimes_, other->playtimes_);
    std::swap(doubletimes_, other->doubletimes_);
    std::swap(is_guide_, other->is_guide_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AckLogin::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AckLogin_descriptor_;
  metadata.reflection = AckLogin_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ReqChipIn::kSessionIdFieldNumber;
const int ReqChipIn::kAnteFieldNumber;
const int ReqChipIn::kUseDoubleFieldNumber;
#endif  // !_MSC_VER

ReqChipIn::ReqChipIn()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ReqChipIn::InitAsDefaultInstance() {
}

ReqChipIn::ReqChipIn(const ReqChipIn& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ReqChipIn::SharedCtor() {
  _cached_size_ = 0;
  sessionid_ = GOOGLE_LONGLONG(0);
  ante_ = GOOGLE_LONGLONG(0);
  usedouble_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReqChipIn::~ReqChipIn() {
  SharedDtor();
}

void ReqChipIn::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ReqChipIn::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReqChipIn::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReqChipIn_descriptor_;
}

const ReqChipIn& ReqChipIn::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ClownServerMessage_2eproto();  return *default_instance_;
}

ReqChipIn* ReqChipIn::default_instance_ = NULL;

ReqChipIn* ReqChipIn::New() const {
  return new ReqChipIn;
}

void ReqChipIn::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    sessionid_ = GOOGLE_LONGLONG(0);
    ante_ = GOOGLE_LONGLONG(0);
    usedouble_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReqChipIn::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 sessionId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &sessionid_)));
          set_has_sessionid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_ante;
        break;
      }
      
      // required int64 ante = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ante:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &ante_)));
          set_has_ante();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_useDouble;
        break;
      }
      
      // optional bool useDouble = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_useDouble:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &usedouble_)));
          set_has_usedouble();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ReqChipIn::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int64 sessionId = 1;
  if (has_sessionid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->sessionid(), output);
  }
  
  // required int64 ante = 2;
  if (has_ante()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->ante(), output);
  }
  
  // optional bool useDouble = 3;
  if (has_usedouble()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->usedouble(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ReqChipIn::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int64 sessionId = 1;
  if (has_sessionid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->sessionid(), target);
  }
  
  // required int64 ante = 2;
  if (has_ante()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->ante(), target);
  }
  
  // optional bool useDouble = 3;
  if (has_usedouble()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->usedouble(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ReqChipIn::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 sessionId = 1;
    if (has_sessionid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->sessionid());
    }
    
    // required int64 ante = 2;
    if (has_ante()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->ante());
    }
    
    // optional bool useDouble = 3;
    if (has_usedouble()) {
      total_size += 1 + 1;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReqChipIn::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReqChipIn* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReqChipIn*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReqChipIn::MergeFrom(const ReqChipIn& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_sessionid()) {
      set_sessionid(from.sessionid());
    }
    if (from.has_ante()) {
      set_ante(from.ante());
    }
    if (from.has_usedouble()) {
      set_usedouble(from.usedouble());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReqChipIn::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqChipIn::CopyFrom(const ReqChipIn& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqChipIn::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void ReqChipIn::Swap(ReqChipIn* other) {
  if (other != this) {
    std::swap(sessionid_, other->sessionid_);
    std::swap(ante_, other->ante_);
    std::swap(usedouble_, other->usedouble_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReqChipIn::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReqChipIn_descriptor_;
  metadata.reflection = ReqChipIn_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AckChipInResult::kSessionIdFieldNumber;
const int AckChipInResult::kPatternsFieldNumber;
const int AckChipInResult::kAwardMoneyFieldNumber;
const int AckChipInResult::kUserMoneyFieldNumber;
const int AckChipInResult::kAwardIndexFieldNumber;
const int AckChipInResult::kPlayTimesFieldNumber;
const int AckChipInResult::kDoubleTimesFieldNumber;
const int AckChipInResult::kCanBetFieldNumber;
const int AckChipInResult::kCanDoubleBetFieldNumber;
#endif  // !_MSC_VER

AckChipInResult::AckChipInResult()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AckChipInResult::InitAsDefaultInstance() {
}

AckChipInResult::AckChipInResult(const AckChipInResult& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AckChipInResult::SharedCtor() {
  _cached_size_ = 0;
  sessionid_ = GOOGLE_LONGLONG(0);
  patterns_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  awardmoney_ = GOOGLE_LONGLONG(0);
  usermoney_ = GOOGLE_LONGLONG(0);
  awardindex_ = 0;
  playtimes_ = 0;
  doubletimes_ = 0;
  canbet_ = false;
  candoublebet_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AckChipInResult::~AckChipInResult() {
  SharedDtor();
}

void AckChipInResult::SharedDtor() {
  if (patterns_ != &::google::protobuf::internal::kEmptyString) {
    delete patterns_;
  }
  if (this != default_instance_) {
  }
}

void AckChipInResult::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AckChipInResult::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AckChipInResult_descriptor_;
}

const AckChipInResult& AckChipInResult::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ClownServerMessage_2eproto();  return *default_instance_;
}

AckChipInResult* AckChipInResult::default_instance_ = NULL;

AckChipInResult* AckChipInResult::New() const {
  return new AckChipInResult;
}

void AckChipInResult::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    sessionid_ = GOOGLE_LONGLONG(0);
    if (has_patterns()) {
      if (patterns_ != &::google::protobuf::internal::kEmptyString) {
        patterns_->clear();
      }
    }
    awardmoney_ = GOOGLE_LONGLONG(0);
    usermoney_ = GOOGLE_LONGLONG(0);
    awardindex_ = 0;
    playtimes_ = 0;
    doubletimes_ = 0;
    canbet_ = false;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    candoublebet_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AckChipInResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 sessionId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &sessionid_)));
          set_has_sessionid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_patterns;
        break;
      }
      
      // required string patterns = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_patterns:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_patterns()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->patterns().data(), this->patterns().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_awardMoney;
        break;
      }
      
      // required int64 awardMoney = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_awardMoney:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &awardmoney_)));
          set_has_awardmoney();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_userMoney;
        break;
      }
      
      // required int64 userMoney = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_userMoney:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &usermoney_)));
          set_has_usermoney();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_awardIndex;
        break;
      }
      
      // optional int32 awardIndex = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_awardIndex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &awardindex_)));
          set_has_awardindex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_playTimes;
        break;
      }
      
      // optional int32 playTimes = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_playTimes:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &playtimes_)));
          set_has_playtimes();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_doubleTimes;
        break;
      }
      
      // optional int32 doubleTimes = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_doubleTimes:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &doubletimes_)));
          set_has_doubletimes();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_canBet;
        break;
      }
      
      // required bool canBet = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_canBet:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &canbet_)));
          set_has_canbet();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_canDoubleBet;
        break;
      }
      
      // required bool canDoubleBet = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_canDoubleBet:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &candoublebet_)));
          set_has_candoublebet();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AckChipInResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int64 sessionId = 1;
  if (has_sessionid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->sessionid(), output);
  }
  
  // required string patterns = 2;
  if (has_patterns()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->patterns().data(), this->patterns().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->patterns(), output);
  }
  
  // required int64 awardMoney = 3;
  if (has_awardmoney()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->awardmoney(), output);
  }
  
  // required int64 userMoney = 4;
  if (has_usermoney()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->usermoney(), output);
  }
  
  // optional int32 awardIndex = 5;
  if (has_awardindex()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->awardindex(), output);
  }
  
  // optional int32 playTimes = 6;
  if (has_playtimes()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->playtimes(), output);
  }
  
  // optional int32 doubleTimes = 7;
  if (has_doubletimes()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->doubletimes(), output);
  }
  
  // required bool canBet = 8;
  if (has_canbet()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(8, this->canbet(), output);
  }
  
  // required bool canDoubleBet = 9;
  if (has_candoublebet()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(9, this->candoublebet(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AckChipInResult::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int64 sessionId = 1;
  if (has_sessionid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->sessionid(), target);
  }
  
  // required string patterns = 2;
  if (has_patterns()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->patterns().data(), this->patterns().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->patterns(), target);
  }
  
  // required int64 awardMoney = 3;
  if (has_awardmoney()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->awardmoney(), target);
  }
  
  // required int64 userMoney = 4;
  if (has_usermoney()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->usermoney(), target);
  }
  
  // optional int32 awardIndex = 5;
  if (has_awardindex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->awardindex(), target);
  }
  
  // optional int32 playTimes = 6;
  if (has_playtimes()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->playtimes(), target);
  }
  
  // optional int32 doubleTimes = 7;
  if (has_doubletimes()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->doubletimes(), target);
  }
  
  // required bool canBet = 8;
  if (has_canbet()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(8, this->canbet(), target);
  }
  
  // required bool canDoubleBet = 9;
  if (has_candoublebet()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(9, this->candoublebet(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AckChipInResult::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 sessionId = 1;
    if (has_sessionid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->sessionid());
    }
    
    // required string patterns = 2;
    if (has_patterns()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->patterns());
    }
    
    // required int64 awardMoney = 3;
    if (has_awardmoney()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->awardmoney());
    }
    
    // required int64 userMoney = 4;
    if (has_usermoney()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->usermoney());
    }
    
    // optional int32 awardIndex = 5;
    if (has_awardindex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->awardindex());
    }
    
    // optional int32 playTimes = 6;
    if (has_playtimes()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->playtimes());
    }
    
    // optional int32 doubleTimes = 7;
    if (has_doubletimes()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->doubletimes());
    }
    
    // required bool canBet = 8;
    if (has_canbet()) {
      total_size += 1 + 1;
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // required bool canDoubleBet = 9;
    if (has_candoublebet()) {
      total_size += 1 + 1;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AckChipInResult::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AckChipInResult* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AckChipInResult*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AckChipInResult::MergeFrom(const AckChipInResult& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_sessionid()) {
      set_sessionid(from.sessionid());
    }
    if (from.has_patterns()) {
      set_patterns(from.patterns());
    }
    if (from.has_awardmoney()) {
      set_awardmoney(from.awardmoney());
    }
    if (from.has_usermoney()) {
      set_usermoney(from.usermoney());
    }
    if (from.has_awardindex()) {
      set_awardindex(from.awardindex());
    }
    if (from.has_playtimes()) {
      set_playtimes(from.playtimes());
    }
    if (from.has_doubletimes()) {
      set_doubletimes(from.doubletimes());
    }
    if (from.has_canbet()) {
      set_canbet(from.canbet());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_candoublebet()) {
      set_candoublebet(from.candoublebet());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AckChipInResult::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AckChipInResult::CopyFrom(const AckChipInResult& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AckChipInResult::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000018f) != 0x0000018f) return false;
  
  return true;
}

void AckChipInResult::Swap(AckChipInResult* other) {
  if (other != this) {
    std::swap(sessionid_, other->sessionid_);
    std::swap(patterns_, other->patterns_);
    std::swap(awardmoney_, other->awardmoney_);
    std::swap(usermoney_, other->usermoney_);
    std::swap(awardindex_, other->awardindex_);
    std::swap(playtimes_, other->playtimes_);
    std::swap(doubletimes_, other->doubletimes_);
    std::swap(canbet_, other->canbet_);
    std::swap(candoublebet_, other->candoublebet_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AckChipInResult::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AckChipInResult_descriptor_;
  metadata.reflection = AckChipInResult_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ReqCharge::kSessionIdFieldNumber;
#endif  // !_MSC_VER

ReqCharge::ReqCharge()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ReqCharge::InitAsDefaultInstance() {
}

ReqCharge::ReqCharge(const ReqCharge& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ReqCharge::SharedCtor() {
  _cached_size_ = 0;
  sessionid_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReqCharge::~ReqCharge() {
  SharedDtor();
}

void ReqCharge::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ReqCharge::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReqCharge::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReqCharge_descriptor_;
}

const ReqCharge& ReqCharge::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ClownServerMessage_2eproto();  return *default_instance_;
}

ReqCharge* ReqCharge::default_instance_ = NULL;

ReqCharge* ReqCharge::New() const {
  return new ReqCharge;
}

void ReqCharge::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    sessionid_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReqCharge::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 sessionId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &sessionid_)));
          set_has_sessionid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ReqCharge::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int64 sessionId = 1;
  if (has_sessionid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->sessionid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ReqCharge::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int64 sessionId = 1;
  if (has_sessionid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->sessionid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ReqCharge::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 sessionId = 1;
    if (has_sessionid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->sessionid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReqCharge::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReqCharge* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReqCharge*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReqCharge::MergeFrom(const ReqCharge& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_sessionid()) {
      set_sessionid(from.sessionid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReqCharge::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqCharge::CopyFrom(const ReqCharge& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqCharge::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void ReqCharge::Swap(ReqCharge* other) {
  if (other != this) {
    std::swap(sessionid_, other->sessionid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReqCharge::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReqCharge_descriptor_;
  metadata.reflection = ReqCharge_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AckCharge::kSessionIdFieldNumber;
const int AckCharge::kSuccessFieldNumber;
const int AckCharge::kUserMoneyFieldNumber;
const int AckCharge::kExtraAwardFieldNumber;
const int AckCharge::kPersentFieldNumber;
#endif  // !_MSC_VER

AckCharge::AckCharge()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AckCharge::InitAsDefaultInstance() {
}

AckCharge::AckCharge(const AckCharge& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AckCharge::SharedCtor() {
  _cached_size_ = 0;
  sessionid_ = GOOGLE_LONGLONG(0);
  success_ = false;
  usermoney_ = GOOGLE_LONGLONG(0);
  extraaward_ = GOOGLE_LONGLONG(0);
  persent_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AckCharge::~AckCharge() {
  SharedDtor();
}

void AckCharge::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AckCharge::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AckCharge::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AckCharge_descriptor_;
}

const AckCharge& AckCharge::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ClownServerMessage_2eproto();  return *default_instance_;
}

AckCharge* AckCharge::default_instance_ = NULL;

AckCharge* AckCharge::New() const {
  return new AckCharge;
}

void AckCharge::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    sessionid_ = GOOGLE_LONGLONG(0);
    success_ = false;
    usermoney_ = GOOGLE_LONGLONG(0);
    extraaward_ = GOOGLE_LONGLONG(0);
    persent_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AckCharge::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 sessionId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &sessionid_)));
          set_has_sessionid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_success;
        break;
      }
      
      // required bool success = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_success:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &success_)));
          set_has_success();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_userMoney;
        break;
      }
      
      // required int64 userMoney = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_userMoney:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &usermoney_)));
          set_has_usermoney();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_extraAward;
        break;
      }
      
      // optional int64 extraAward = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_extraAward:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &extraaward_)));
          set_has_extraaward();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_persent;
        break;
      }
      
      // optional int32 persent = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_persent:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &persent_)));
          set_has_persent();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AckCharge::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int64 sessionId = 1;
  if (has_sessionid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->sessionid(), output);
  }
  
  // required bool success = 2;
  if (has_success()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->success(), output);
  }
  
  // required int64 userMoney = 3;
  if (has_usermoney()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->usermoney(), output);
  }
  
  // optional int64 extraAward = 4;
  if (has_extraaward()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->extraaward(), output);
  }
  
  // optional int32 persent = 5;
  if (has_persent()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->persent(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AckCharge::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int64 sessionId = 1;
  if (has_sessionid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->sessionid(), target);
  }
  
  // required bool success = 2;
  if (has_success()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->success(), target);
  }
  
  // required int64 userMoney = 3;
  if (has_usermoney()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->usermoney(), target);
  }
  
  // optional int64 extraAward = 4;
  if (has_extraaward()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->extraaward(), target);
  }
  
  // optional int32 persent = 5;
  if (has_persent()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->persent(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AckCharge::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 sessionId = 1;
    if (has_sessionid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->sessionid());
    }
    
    // required bool success = 2;
    if (has_success()) {
      total_size += 1 + 1;
    }
    
    // required int64 userMoney = 3;
    if (has_usermoney()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->usermoney());
    }
    
    // optional int64 extraAward = 4;
    if (has_extraaward()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->extraaward());
    }
    
    // optional int32 persent = 5;
    if (has_persent()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->persent());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AckCharge::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AckCharge* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AckCharge*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AckCharge::MergeFrom(const AckCharge& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_sessionid()) {
      set_sessionid(from.sessionid());
    }
    if (from.has_success()) {
      set_success(from.success());
    }
    if (from.has_usermoney()) {
      set_usermoney(from.usermoney());
    }
    if (from.has_extraaward()) {
      set_extraaward(from.extraaward());
    }
    if (from.has_persent()) {
      set_persent(from.persent());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AckCharge::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AckCharge::CopyFrom(const AckCharge& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AckCharge::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  
  return true;
}

void AckCharge::Swap(AckCharge* other) {
  if (other != this) {
    std::swap(sessionid_, other->sessionid_);
    std::swap(success_, other->success_);
    std::swap(usermoney_, other->usermoney_);
    std::swap(extraaward_, other->extraaward_);
    std::swap(persent_, other->persent_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AckCharge::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AckCharge_descriptor_;
  metadata.reflection = AckCharge_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AckEntityAward::kIdFieldNumber;
const int AckEntityAward::kAmountFieldNumber;
const int AckEntityAward::kNameFieldNumber;
const int AckEntityAward::kUnitFieldNumber;
const int AckEntityAward::kUrlFieldNumber;
#endif  // !_MSC_VER

AckEntityAward::AckEntityAward()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AckEntityAward::InitAsDefaultInstance() {
}

AckEntityAward::AckEntityAward(const AckEntityAward& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AckEntityAward::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0u;
  amount_ = 0u;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  unit_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  url_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AckEntityAward::~AckEntityAward() {
  SharedDtor();
}

void AckEntityAward::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (unit_ != &::google::protobuf::internal::kEmptyString) {
    delete unit_;
  }
  if (url_ != &::google::protobuf::internal::kEmptyString) {
    delete url_;
  }
  if (this != default_instance_) {
  }
}

void AckEntityAward::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AckEntityAward::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AckEntityAward_descriptor_;
}

const AckEntityAward& AckEntityAward::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ClownServerMessage_2eproto();  return *default_instance_;
}

AckEntityAward* AckEntityAward::default_instance_ = NULL;

AckEntityAward* AckEntityAward::New() const {
  return new AckEntityAward;
}

void AckEntityAward::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0u;
    amount_ = 0u;
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    if (has_unit()) {
      if (unit_ != &::google::protobuf::internal::kEmptyString) {
        unit_->clear();
      }
    }
    if (has_url()) {
      if (url_ != &::google::protobuf::internal::kEmptyString) {
        url_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AckEntityAward::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_amount;
        break;
      }
      
      // required uint32 amount = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_amount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &amount_)));
          set_has_amount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_name;
        break;
      }
      
      // required string name = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_unit;
        break;
      }
      
      // required string unit = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_unit:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_unit()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->unit().data(), this->unit().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_url;
        break;
      }
      
      // required string url = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_url:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_url()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->url().data(), this->url().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AckEntityAward::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }
  
  // required uint32 amount = 2;
  if (has_amount()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->amount(), output);
  }
  
  // required string name = 3;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->name(), output);
  }
  
  // required string unit = 4;
  if (has_unit()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->unit().data(), this->unit().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->unit(), output);
  }
  
  // required string url = 5;
  if (has_url()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->url().data(), this->url().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->url(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AckEntityAward::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }
  
  // required uint32 amount = 2;
  if (has_amount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->amount(), target);
  }
  
  // required string name = 3;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->name(), target);
  }
  
  // required string unit = 4;
  if (has_unit()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->unit().data(), this->unit().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->unit(), target);
  }
  
  // required string url = 5;
  if (has_url()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->url().data(), this->url().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->url(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AckEntityAward::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }
    
    // required uint32 amount = 2;
    if (has_amount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->amount());
    }
    
    // required string name = 3;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }
    
    // required string unit = 4;
    if (has_unit()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->unit());
    }
    
    // required string url = 5;
    if (has_url()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->url());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AckEntityAward::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AckEntityAward* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AckEntityAward*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AckEntityAward::MergeFrom(const AckEntityAward& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_amount()) {
      set_amount(from.amount());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_unit()) {
      set_unit(from.unit());
    }
    if (from.has_url()) {
      set_url(from.url());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AckEntityAward::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AckEntityAward::CopyFrom(const AckEntityAward& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AckEntityAward::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;
  
  return true;
}

void AckEntityAward::Swap(AckEntityAward* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(amount_, other->amount_);
    std::swap(name_, other->name_);
    std::swap(unit_, other->unit_);
    std::swap(url_, other->url_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AckEntityAward::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AckEntityAward_descriptor_;
  metadata.reflection = AckEntityAward_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ReqFillUserInfo::kRealNameFieldNumber;
const int ReqFillUserInfo::kMobileFieldNumber;
const int ReqFillUserInfo::kAddressFieldNumber;
const int ReqFillUserInfo::kZipCodeFieldNumber;
const int ReqFillUserInfo::kIdcardFieldNumber;
const int ReqFillUserInfo::kAreaCodeFieldNumber;
const int ReqFillUserInfo::kPhoneFieldNumber;
const int ReqFillUserInfo::kMemoFieldNumber;
#endif  // !_MSC_VER

ReqFillUserInfo::ReqFillUserInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ReqFillUserInfo::InitAsDefaultInstance() {
}

ReqFillUserInfo::ReqFillUserInfo(const ReqFillUserInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ReqFillUserInfo::SharedCtor() {
  _cached_size_ = 0;
  realname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  mobile_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  address_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  zipcode_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  idcard_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  areacode_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  phone_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  memo_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReqFillUserInfo::~ReqFillUserInfo() {
  SharedDtor();
}

void ReqFillUserInfo::SharedDtor() {
  if (realname_ != &::google::protobuf::internal::kEmptyString) {
    delete realname_;
  }
  if (mobile_ != &::google::protobuf::internal::kEmptyString) {
    delete mobile_;
  }
  if (address_ != &::google::protobuf::internal::kEmptyString) {
    delete address_;
  }
  if (zipcode_ != &::google::protobuf::internal::kEmptyString) {
    delete zipcode_;
  }
  if (idcard_ != &::google::protobuf::internal::kEmptyString) {
    delete idcard_;
  }
  if (areacode_ != &::google::protobuf::internal::kEmptyString) {
    delete areacode_;
  }
  if (phone_ != &::google::protobuf::internal::kEmptyString) {
    delete phone_;
  }
  if (memo_ != &::google::protobuf::internal::kEmptyString) {
    delete memo_;
  }
  if (this != default_instance_) {
  }
}

void ReqFillUserInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReqFillUserInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReqFillUserInfo_descriptor_;
}

const ReqFillUserInfo& ReqFillUserInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ClownServerMessage_2eproto();  return *default_instance_;
}

ReqFillUserInfo* ReqFillUserInfo::default_instance_ = NULL;

ReqFillUserInfo* ReqFillUserInfo::New() const {
  return new ReqFillUserInfo;
}

void ReqFillUserInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_realname()) {
      if (realname_ != &::google::protobuf::internal::kEmptyString) {
        realname_->clear();
      }
    }
    if (has_mobile()) {
      if (mobile_ != &::google::protobuf::internal::kEmptyString) {
        mobile_->clear();
      }
    }
    if (has_address()) {
      if (address_ != &::google::protobuf::internal::kEmptyString) {
        address_->clear();
      }
    }
    if (has_zipcode()) {
      if (zipcode_ != &::google::protobuf::internal::kEmptyString) {
        zipcode_->clear();
      }
    }
    if (has_idcard()) {
      if (idcard_ != &::google::protobuf::internal::kEmptyString) {
        idcard_->clear();
      }
    }
    if (has_areacode()) {
      if (areacode_ != &::google::protobuf::internal::kEmptyString) {
        areacode_->clear();
      }
    }
    if (has_phone()) {
      if (phone_ != &::google::protobuf::internal::kEmptyString) {
        phone_->clear();
      }
    }
    if (has_memo()) {
      if (memo_ != &::google::protobuf::internal::kEmptyString) {
        memo_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReqFillUserInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string realName = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_realname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->realname().data(), this->realname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_mobile;
        break;
      }
      
      // required string mobile = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_mobile:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_mobile()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->mobile().data(), this->mobile().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_address;
        break;
      }
      
      // required string address = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_address:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_address()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->address().data(), this->address().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_zipCode;
        break;
      }
      
      // required string zipCode = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_zipCode:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_zipcode()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->zipcode().data(), this->zipcode().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_idcard;
        break;
      }
      
      // required string idcard = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_idcard:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_idcard()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->idcard().data(), this->idcard().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_areaCode;
        break;
      }
      
      // optional string areaCode = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_areaCode:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_areacode()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->areacode().data(), this->areacode().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_phone;
        break;
      }
      
      // optional string phone = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_phone:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_phone()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->phone().data(), this->phone().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_memo;
        break;
      }
      
      // optional string memo = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_memo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_memo()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->memo().data(), this->memo().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ReqFillUserInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string realName = 1;
  if (has_realname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->realname().data(), this->realname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->realname(), output);
  }
  
  // required string mobile = 2;
  if (has_mobile()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->mobile().data(), this->mobile().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->mobile(), output);
  }
  
  // required string address = 3;
  if (has_address()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->address().data(), this->address().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->address(), output);
  }
  
  // required string zipCode = 4;
  if (has_zipcode()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->zipcode().data(), this->zipcode().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->zipcode(), output);
  }
  
  // required string idcard = 5;
  if (has_idcard()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->idcard().data(), this->idcard().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->idcard(), output);
  }
  
  // optional string areaCode = 6;
  if (has_areacode()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->areacode().data(), this->areacode().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->areacode(), output);
  }
  
  // optional string phone = 7;
  if (has_phone()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->phone().data(), this->phone().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->phone(), output);
  }
  
  // optional string memo = 8;
  if (has_memo()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->memo().data(), this->memo().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      8, this->memo(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ReqFillUserInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string realName = 1;
  if (has_realname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->realname().data(), this->realname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->realname(), target);
  }
  
  // required string mobile = 2;
  if (has_mobile()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->mobile().data(), this->mobile().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->mobile(), target);
  }
  
  // required string address = 3;
  if (has_address()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->address().data(), this->address().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->address(), target);
  }
  
  // required string zipCode = 4;
  if (has_zipcode()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->zipcode().data(), this->zipcode().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->zipcode(), target);
  }
  
  // required string idcard = 5;
  if (has_idcard()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->idcard().data(), this->idcard().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->idcard(), target);
  }
  
  // optional string areaCode = 6;
  if (has_areacode()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->areacode().data(), this->areacode().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->areacode(), target);
  }
  
  // optional string phone = 7;
  if (has_phone()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->phone().data(), this->phone().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->phone(), target);
  }
  
  // optional string memo = 8;
  if (has_memo()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->memo().data(), this->memo().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->memo(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ReqFillUserInfo::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string realName = 1;
    if (has_realname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->realname());
    }
    
    // required string mobile = 2;
    if (has_mobile()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->mobile());
    }
    
    // required string address = 3;
    if (has_address()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->address());
    }
    
    // required string zipCode = 4;
    if (has_zipcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->zipcode());
    }
    
    // required string idcard = 5;
    if (has_idcard()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->idcard());
    }
    
    // optional string areaCode = 6;
    if (has_areacode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->areacode());
    }
    
    // optional string phone = 7;
    if (has_phone()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->phone());
    }
    
    // optional string memo = 8;
    if (has_memo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->memo());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReqFillUserInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReqFillUserInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReqFillUserInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReqFillUserInfo::MergeFrom(const ReqFillUserInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_realname()) {
      set_realname(from.realname());
    }
    if (from.has_mobile()) {
      set_mobile(from.mobile());
    }
    if (from.has_address()) {
      set_address(from.address());
    }
    if (from.has_zipcode()) {
      set_zipcode(from.zipcode());
    }
    if (from.has_idcard()) {
      set_idcard(from.idcard());
    }
    if (from.has_areacode()) {
      set_areacode(from.areacode());
    }
    if (from.has_phone()) {
      set_phone(from.phone());
    }
    if (from.has_memo()) {
      set_memo(from.memo());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReqFillUserInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqFillUserInfo::CopyFrom(const ReqFillUserInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqFillUserInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;
  
  return true;
}

void ReqFillUserInfo::Swap(ReqFillUserInfo* other) {
  if (other != this) {
    std::swap(realname_, other->realname_);
    std::swap(mobile_, other->mobile_);
    std::swap(address_, other->address_);
    std::swap(zipcode_, other->zipcode_);
    std::swap(idcard_, other->idcard_);
    std::swap(areacode_, other->areacode_);
    std::swap(phone_, other->phone_);
    std::swap(memo_, other->memo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReqFillUserInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReqFillUserInfo_descriptor_;
  metadata.reflection = ReqFillUserInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AckFillUserInfo::kSuccessFieldNumber;
const int AckFillUserInfo::kFailResonFieldNumber;
#endif  // !_MSC_VER

AckFillUserInfo::AckFillUserInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AckFillUserInfo::InitAsDefaultInstance() {
}

AckFillUserInfo::AckFillUserInfo(const AckFillUserInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AckFillUserInfo::SharedCtor() {
  _cached_size_ = 0;
  success_ = 0;
  failreson_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AckFillUserInfo::~AckFillUserInfo() {
  SharedDtor();
}

void AckFillUserInfo::SharedDtor() {
  if (failreson_ != &::google::protobuf::internal::kEmptyString) {
    delete failreson_;
  }
  if (this != default_instance_) {
  }
}

void AckFillUserInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AckFillUserInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AckFillUserInfo_descriptor_;
}

const AckFillUserInfo& AckFillUserInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ClownServerMessage_2eproto();  return *default_instance_;
}

AckFillUserInfo* AckFillUserInfo::default_instance_ = NULL;

AckFillUserInfo* AckFillUserInfo::New() const {
  return new AckFillUserInfo;
}

void AckFillUserInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    success_ = 0;
    if (has_failreson()) {
      if (failreson_ != &::google::protobuf::internal::kEmptyString) {
        failreson_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AckFillUserInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 success = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &success_)));
          set_has_success();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_failReson;
        break;
      }
      
      // optional string failReson = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_failReson:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_failreson()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->failreson().data(), this->failreson().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AckFillUserInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 success = 1;
  if (has_success()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->success(), output);
  }
  
  // optional string failReson = 2;
  if (has_failreson()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->failreson().data(), this->failreson().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->failreson(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AckFillUserInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 success = 1;
  if (has_success()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->success(), target);
  }
  
  // optional string failReson = 2;
  if (has_failreson()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->failreson().data(), this->failreson().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->failreson(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AckFillUserInfo::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 success = 1;
    if (has_success()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->success());
    }
    
    // optional string failReson = 2;
    if (has_failreson()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->failreson());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AckFillUserInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AckFillUserInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AckFillUserInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AckFillUserInfo::MergeFrom(const AckFillUserInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_success()) {
      set_success(from.success());
    }
    if (from.has_failreson()) {
      set_failreson(from.failreson());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AckFillUserInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AckFillUserInfo::CopyFrom(const AckFillUserInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AckFillUserInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void AckFillUserInfo::Swap(AckFillUserInfo* other) {
  if (other != this) {
    std::swap(success_, other->success_);
    std::swap(failreson_, other->failreson_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AckFillUserInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AckFillUserInfo_descriptor_;
  metadata.reflection = AckFillUserInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int EntityAward::kIdFieldNumber;
const int EntityAward::kNicknameFieldNumber;
const int EntityAward::kDateFieldNumber;
const int EntityAward::kAmountFieldNumber;
const int EntityAward::kUnitFieldNumber;
const int EntityAward::kNameFieldNumber;
#endif  // !_MSC_VER

EntityAward::EntityAward()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void EntityAward::InitAsDefaultInstance() {
}

EntityAward::EntityAward(const EntityAward& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void EntityAward::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  nickname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  date_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  amount_ = GOOGLE_ULONGLONG(0);
  unit_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

EntityAward::~EntityAward() {
  SharedDtor();
}

void EntityAward::SharedDtor() {
  if (nickname_ != &::google::protobuf::internal::kEmptyString) {
    delete nickname_;
  }
  if (date_ != &::google::protobuf::internal::kEmptyString) {
    delete date_;
  }
  if (unit_ != &::google::protobuf::internal::kEmptyString) {
    delete unit_;
  }
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void EntityAward::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EntityAward::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EntityAward_descriptor_;
}

const EntityAward& EntityAward::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ClownServerMessage_2eproto();  return *default_instance_;
}

EntityAward* EntityAward::default_instance_ = NULL;

EntityAward* EntityAward::New() const {
  return new EntityAward;
}

void EntityAward::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
    if (has_nickname()) {
      if (nickname_ != &::google::protobuf::internal::kEmptyString) {
        nickname_->clear();
      }
    }
    if (has_date()) {
      if (date_ != &::google::protobuf::internal::kEmptyString) {
        date_->clear();
      }
    }
    amount_ = GOOGLE_ULONGLONG(0);
    if (has_unit()) {
      if (unit_ != &::google::protobuf::internal::kEmptyString) {
        unit_->clear();
      }
    }
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool EntityAward::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_nickname;
        break;
      }
      
      // required string nickname = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_nickname:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_nickname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->nickname().data(), this->nickname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_date;
        break;
      }
      
      // required string date = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_date:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_date()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->date().data(), this->date().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_amount;
        break;
      }
      
      // required uint64 amount = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_amount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &amount_)));
          set_has_amount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_unit;
        break;
      }
      
      // required string unit = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_unit:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_unit()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->unit().data(), this->unit().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_name;
        break;
      }
      
      // required string name = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void EntityAward::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }
  
  // required string nickname = 2;
  if (has_nickname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->nickname().data(), this->nickname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->nickname(), output);
  }
  
  // required string date = 3;
  if (has_date()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->date().data(), this->date().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->date(), output);
  }
  
  // required uint64 amount = 4;
  if (has_amount()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->amount(), output);
  }
  
  // required string unit = 5;
  if (has_unit()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->unit().data(), this->unit().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->unit(), output);
  }
  
  // required string name = 6;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->name(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* EntityAward::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }
  
  // required string nickname = 2;
  if (has_nickname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->nickname().data(), this->nickname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->nickname(), target);
  }
  
  // required string date = 3;
  if (has_date()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->date().data(), this->date().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->date(), target);
  }
  
  // required uint64 amount = 4;
  if (has_amount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->amount(), target);
  }
  
  // required string unit = 5;
  if (has_unit()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->unit().data(), this->unit().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->unit(), target);
  }
  
  // required string name = 6;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->name(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int EntityAward::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }
    
    // required string nickname = 2;
    if (has_nickname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->nickname());
    }
    
    // required string date = 3;
    if (has_date()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->date());
    }
    
    // required uint64 amount = 4;
    if (has_amount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->amount());
    }
    
    // required string unit = 5;
    if (has_unit()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->unit());
    }
    
    // required string name = 6;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EntityAward::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const EntityAward* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const EntityAward*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void EntityAward::MergeFrom(const EntityAward& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_nickname()) {
      set_nickname(from.nickname());
    }
    if (from.has_date()) {
      set_date(from.date());
    }
    if (from.has_amount()) {
      set_amount(from.amount());
    }
    if (from.has_unit()) {
      set_unit(from.unit());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void EntityAward::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EntityAward::CopyFrom(const EntityAward& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EntityAward::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000003f) != 0x0000003f) return false;
  
  return true;
}

void EntityAward::Swap(EntityAward* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(nickname_, other->nickname_);
    std::swap(date_, other->date_);
    std::swap(amount_, other->amount_);
    std::swap(unit_, other->unit_);
    std::swap(name_, other->name_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata EntityAward::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = EntityAward_descriptor_;
  metadata.reflection = EntityAward_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ReqActivityAwardList::kPageFieldNumber;
const int ReqActivityAwardList::kSizeFieldNumber;
#endif  // !_MSC_VER

ReqActivityAwardList::ReqActivityAwardList()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ReqActivityAwardList::InitAsDefaultInstance() {
}

ReqActivityAwardList::ReqActivityAwardList(const ReqActivityAwardList& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ReqActivityAwardList::SharedCtor() {
  _cached_size_ = 0;
  page_ = 1;
  size_ = 10;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReqActivityAwardList::~ReqActivityAwardList() {
  SharedDtor();
}

void ReqActivityAwardList::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ReqActivityAwardList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReqActivityAwardList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReqActivityAwardList_descriptor_;
}

const ReqActivityAwardList& ReqActivityAwardList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ClownServerMessage_2eproto();  return *default_instance_;
}

ReqActivityAwardList* ReqActivityAwardList::default_instance_ = NULL;

ReqActivityAwardList* ReqActivityAwardList::New() const {
  return new ReqActivityAwardList;
}

void ReqActivityAwardList::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    page_ = 1;
    size_ = 10;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReqActivityAwardList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 page = 1 [default = 1];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &page_)));
          set_has_page();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_size;
        break;
      }
      
      // optional int32 size = 2 [default = 10];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_size:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &size_)));
          set_has_size();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ReqActivityAwardList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 page = 1 [default = 1];
  if (has_page()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->page(), output);
  }
  
  // optional int32 size = 2 [default = 10];
  if (has_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->size(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ReqActivityAwardList::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 page = 1 [default = 1];
  if (has_page()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->page(), target);
  }
  
  // optional int32 size = 2 [default = 10];
  if (has_size()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->size(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ReqActivityAwardList::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 page = 1 [default = 1];
    if (has_page()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->page());
    }
    
    // optional int32 size = 2 [default = 10];
    if (has_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->size());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReqActivityAwardList::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReqActivityAwardList* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReqActivityAwardList*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReqActivityAwardList::MergeFrom(const ReqActivityAwardList& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_page()) {
      set_page(from.page());
    }
    if (from.has_size()) {
      set_size(from.size());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReqActivityAwardList::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqActivityAwardList::CopyFrom(const ReqActivityAwardList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqActivityAwardList::IsInitialized() const {
  
  return true;
}

void ReqActivityAwardList::Swap(ReqActivityAwardList* other) {
  if (other != this) {
    std::swap(page_, other->page_);
    std::swap(size_, other->size_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReqActivityAwardList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReqActivityAwardList_descriptor_;
  metadata.reflection = ReqActivityAwardList_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AckActivityAwardList::kAwardListFieldNumber;
#endif  // !_MSC_VER

AckActivityAwardList::AckActivityAwardList()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AckActivityAwardList::InitAsDefaultInstance() {
}

AckActivityAwardList::AckActivityAwardList(const AckActivityAwardList& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AckActivityAwardList::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AckActivityAwardList::~AckActivityAwardList() {
  SharedDtor();
}

void AckActivityAwardList::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AckActivityAwardList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AckActivityAwardList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AckActivityAwardList_descriptor_;
}

const AckActivityAwardList& AckActivityAwardList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ClownServerMessage_2eproto();  return *default_instance_;
}

AckActivityAwardList* AckActivityAwardList::default_instance_ = NULL;

AckActivityAwardList* AckActivityAwardList::New() const {
  return new AckActivityAwardList;
}

void AckActivityAwardList::Clear() {
  awardlist_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AckActivityAwardList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .com.ourgame.clown.msg.EntityAward awardList = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_awardList:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_awardlist()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_awardList;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AckActivityAwardList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .com.ourgame.clown.msg.EntityAward awardList = 1;
  for (int i = 0; i < this->awardlist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->awardlist(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AckActivityAwardList::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .com.ourgame.clown.msg.EntityAward awardList = 1;
  for (int i = 0; i < this->awardlist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->awardlist(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AckActivityAwardList::ByteSize() const {
  int total_size = 0;
  
  // repeated .com.ourgame.clown.msg.EntityAward awardList = 1;
  total_size += 1 * this->awardlist_size();
  for (int i = 0; i < this->awardlist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->awardlist(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AckActivityAwardList::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AckActivityAwardList* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AckActivityAwardList*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AckActivityAwardList::MergeFrom(const AckActivityAwardList& from) {
  GOOGLE_CHECK_NE(&from, this);
  awardlist_.MergeFrom(from.awardlist_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AckActivityAwardList::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AckActivityAwardList::CopyFrom(const AckActivityAwardList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AckActivityAwardList::IsInitialized() const {
  
  for (int i = 0; i < awardlist_size(); i++) {
    if (!this->awardlist(i).IsInitialized()) return false;
  }
  return true;
}

void AckActivityAwardList::Swap(AckActivityAwardList* other) {
  if (other != this) {
    awardlist_.Swap(&other->awardlist_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AckActivityAwardList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AckActivityAwardList_descriptor_;
  metadata.reflection = AckActivityAwardList_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ReqEntityAwardHistory::kPageFieldNumber;
const int ReqEntityAwardHistory::kSizeFieldNumber;
#endif  // !_MSC_VER

ReqEntityAwardHistory::ReqEntityAwardHistory()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ReqEntityAwardHistory::InitAsDefaultInstance() {
}

ReqEntityAwardHistory::ReqEntityAwardHistory(const ReqEntityAwardHistory& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ReqEntityAwardHistory::SharedCtor() {
  _cached_size_ = 0;
  page_ = 1;
  size_ = 10;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReqEntityAwardHistory::~ReqEntityAwardHistory() {
  SharedDtor();
}

void ReqEntityAwardHistory::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ReqEntityAwardHistory::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReqEntityAwardHistory::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReqEntityAwardHistory_descriptor_;
}

const ReqEntityAwardHistory& ReqEntityAwardHistory::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ClownServerMessage_2eproto();  return *default_instance_;
}

ReqEntityAwardHistory* ReqEntityAwardHistory::default_instance_ = NULL;

ReqEntityAwardHistory* ReqEntityAwardHistory::New() const {
  return new ReqEntityAwardHistory;
}

void ReqEntityAwardHistory::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    page_ = 1;
    size_ = 10;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReqEntityAwardHistory::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 page = 1 [default = 1];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &page_)));
          set_has_page();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_size;
        break;
      }
      
      // optional int32 size = 2 [default = 10];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_size:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &size_)));
          set_has_size();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ReqEntityAwardHistory::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 page = 1 [default = 1];
  if (has_page()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->page(), output);
  }
  
  // optional int32 size = 2 [default = 10];
  if (has_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->size(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ReqEntityAwardHistory::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 page = 1 [default = 1];
  if (has_page()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->page(), target);
  }
  
  // optional int32 size = 2 [default = 10];
  if (has_size()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->size(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ReqEntityAwardHistory::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 page = 1 [default = 1];
    if (has_page()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->page());
    }
    
    // optional int32 size = 2 [default = 10];
    if (has_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->size());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReqEntityAwardHistory::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReqEntityAwardHistory* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReqEntityAwardHistory*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReqEntityAwardHistory::MergeFrom(const ReqEntityAwardHistory& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_page()) {
      set_page(from.page());
    }
    if (from.has_size()) {
      set_size(from.size());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReqEntityAwardHistory::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqEntityAwardHistory::CopyFrom(const ReqEntityAwardHistory& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqEntityAwardHistory::IsInitialized() const {
  
  return true;
}

void ReqEntityAwardHistory::Swap(ReqEntityAwardHistory* other) {
  if (other != this) {
    std::swap(page_, other->page_);
    std::swap(size_, other->size_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReqEntityAwardHistory::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReqEntityAwardHistory_descriptor_;
  metadata.reflection = ReqEntityAwardHistory_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AckEntityAwardHistory::kAwardListFieldNumber;
#endif  // !_MSC_VER

AckEntityAwardHistory::AckEntityAwardHistory()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AckEntityAwardHistory::InitAsDefaultInstance() {
}

AckEntityAwardHistory::AckEntityAwardHistory(const AckEntityAwardHistory& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AckEntityAwardHistory::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AckEntityAwardHistory::~AckEntityAwardHistory() {
  SharedDtor();
}

void AckEntityAwardHistory::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AckEntityAwardHistory::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AckEntityAwardHistory::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AckEntityAwardHistory_descriptor_;
}

const AckEntityAwardHistory& AckEntityAwardHistory::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ClownServerMessage_2eproto();  return *default_instance_;
}

AckEntityAwardHistory* AckEntityAwardHistory::default_instance_ = NULL;

AckEntityAwardHistory* AckEntityAwardHistory::New() const {
  return new AckEntityAwardHistory;
}

void AckEntityAwardHistory::Clear() {
  awardlist_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AckEntityAwardHistory::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .com.ourgame.clown.msg.EntityAward awardList = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_awardList:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_awardlist()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_awardList;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AckEntityAwardHistory::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .com.ourgame.clown.msg.EntityAward awardList = 1;
  for (int i = 0; i < this->awardlist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->awardlist(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AckEntityAwardHistory::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .com.ourgame.clown.msg.EntityAward awardList = 1;
  for (int i = 0; i < this->awardlist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->awardlist(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AckEntityAwardHistory::ByteSize() const {
  int total_size = 0;
  
  // repeated .com.ourgame.clown.msg.EntityAward awardList = 1;
  total_size += 1 * this->awardlist_size();
  for (int i = 0; i < this->awardlist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->awardlist(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AckEntityAwardHistory::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AckEntityAwardHistory* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AckEntityAwardHistory*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AckEntityAwardHistory::MergeFrom(const AckEntityAwardHistory& from) {
  GOOGLE_CHECK_NE(&from, this);
  awardlist_.MergeFrom(from.awardlist_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AckEntityAwardHistory::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AckEntityAwardHistory::CopyFrom(const AckEntityAwardHistory& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AckEntityAwardHistory::IsInitialized() const {
  
  for (int i = 0; i < awardlist_size(); i++) {
    if (!this->awardlist(i).IsInitialized()) return false;
  }
  return true;
}

void AckEntityAwardHistory::Swap(AckEntityAwardHistory* other) {
  if (other != this) {
    awardlist_.Swap(&other->awardlist_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AckEntityAwardHistory::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AckEntityAwardHistory_descriptor_;
  metadata.reflection = AckEntityAwardHistory_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ReqBet::kSessionIdFieldNumber;
const int ReqBet::kBetTypeFieldNumber;
#endif  // !_MSC_VER

ReqBet::ReqBet()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ReqBet::InitAsDefaultInstance() {
}

ReqBet::ReqBet(const ReqBet& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ReqBet::SharedCtor() {
  _cached_size_ = 0;
  sessionid_ = GOOGLE_LONGLONG(0);
  bettype_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReqBet::~ReqBet() {
  SharedDtor();
}

void ReqBet::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ReqBet::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReqBet::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReqBet_descriptor_;
}

const ReqBet& ReqBet::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ClownServerMessage_2eproto();  return *default_instance_;
}

ReqBet* ReqBet::default_instance_ = NULL;

ReqBet* ReqBet::New() const {
  return new ReqBet;
}

void ReqBet::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    sessionid_ = GOOGLE_LONGLONG(0);
    bettype_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReqBet::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 sessionId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &sessionid_)));
          set_has_sessionid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_betType;
        break;
      }
      
      // required int32 betType = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_betType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bettype_)));
          set_has_bettype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ReqBet::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int64 sessionId = 1;
  if (has_sessionid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->sessionid(), output);
  }
  
  // required int32 betType = 2;
  if (has_bettype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->bettype(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ReqBet::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int64 sessionId = 1;
  if (has_sessionid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->sessionid(), target);
  }
  
  // required int32 betType = 2;
  if (has_bettype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->bettype(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ReqBet::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 sessionId = 1;
    if (has_sessionid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->sessionid());
    }
    
    // required int32 betType = 2;
    if (has_bettype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->bettype());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReqBet::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReqBet* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReqBet*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReqBet::MergeFrom(const ReqBet& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_sessionid()) {
      set_sessionid(from.sessionid());
    }
    if (from.has_bettype()) {
      set_bettype(from.bettype());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReqBet::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqBet::CopyFrom(const ReqBet& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqBet::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void ReqBet::Swap(ReqBet* other) {
  if (other != this) {
    std::swap(sessionid_, other->sessionid_);
    std::swap(bettype_, other->bettype_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReqBet::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReqBet_descriptor_;
  metadata.reflection = ReqBet_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AckBet::kSessionIdFieldNumber;
const int AckBet::kBetResultFieldNumber;
const int AckBet::kAwardMoneyFieldNumber;
const int AckBet::kBaseAnteFieldNumber;
const int AckBet::kBetTimesFieldNumber;
const int AckBet::kUserMoneyFieldNumber;
const int AckBet::kNextMultipleFieldNumber;
const int AckBet::kCanBetFieldNumber;
const int AckBet::kCanDoubleBetFieldNumber;
const int AckBet::kTipMessageFieldNumber;
#endif  // !_MSC_VER

AckBet::AckBet()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AckBet::InitAsDefaultInstance() {
}

AckBet::AckBet(const AckBet& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AckBet::SharedCtor() {
  _cached_size_ = 0;
  sessionid_ = GOOGLE_LONGLONG(0);
  betresult_ = 0;
  awardmoney_ = GOOGLE_LONGLONG(0);
  baseante_ = GOOGLE_LONGLONG(0);
  bettimes_ = 0;
  usermoney_ = GOOGLE_LONGLONG(0);
  nextmultiple_ = 0;
  canbet_ = false;
  candoublebet_ = false;
  tipmessage_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AckBet::~AckBet() {
  SharedDtor();
}

void AckBet::SharedDtor() {
  if (tipmessage_ != &::google::protobuf::internal::kEmptyString) {
    delete tipmessage_;
  }
  if (this != default_instance_) {
  }
}

void AckBet::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AckBet::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AckBet_descriptor_;
}

const AckBet& AckBet::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ClownServerMessage_2eproto();  return *default_instance_;
}

AckBet* AckBet::default_instance_ = NULL;

AckBet* AckBet::New() const {
  return new AckBet;
}

void AckBet::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    sessionid_ = GOOGLE_LONGLONG(0);
    betresult_ = 0;
    awardmoney_ = GOOGLE_LONGLONG(0);
    baseante_ = GOOGLE_LONGLONG(0);
    bettimes_ = 0;
    usermoney_ = GOOGLE_LONGLONG(0);
    nextmultiple_ = 0;
    canbet_ = false;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    candoublebet_ = false;
    if (has_tipmessage()) {
      if (tipmessage_ != &::google::protobuf::internal::kEmptyString) {
        tipmessage_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AckBet::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 sessionId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &sessionid_)));
          set_has_sessionid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_betResult;
        break;
      }
      
      // required int32 betResult = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_betResult:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &betresult_)));
          set_has_betresult();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_awardMoney;
        break;
      }
      
      // required int64 awardMoney = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_awardMoney:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &awardmoney_)));
          set_has_awardmoney();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_baseAnte;
        break;
      }
      
      // required int64 baseAnte = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_baseAnte:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &baseante_)));
          set_has_baseante();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_betTimes;
        break;
      }
      
      // required int32 betTimes = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_betTimes:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bettimes_)));
          set_has_bettimes();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_userMoney;
        break;
      }
      
      // required int64 userMoney = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_userMoney:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &usermoney_)));
          set_has_usermoney();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_nextMultiple;
        break;
      }
      
      // optional int32 nextMultiple = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_nextMultiple:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &nextmultiple_)));
          set_has_nextmultiple();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_canBet;
        break;
      }
      
      // required bool canBet = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_canBet:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &canbet_)));
          set_has_canbet();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_canDoubleBet;
        break;
      }
      
      // required bool canDoubleBet = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_canDoubleBet:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &candoublebet_)));
          set_has_candoublebet();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_tipMessage;
        break;
      }
      
      // optional string tipMessage = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_tipMessage:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_tipmessage()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->tipmessage().data(), this->tipmessage().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AckBet::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int64 sessionId = 1;
  if (has_sessionid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->sessionid(), output);
  }
  
  // required int32 betResult = 2;
  if (has_betresult()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->betresult(), output);
  }
  
  // required int64 awardMoney = 3;
  if (has_awardmoney()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->awardmoney(), output);
  }
  
  // required int64 baseAnte = 4;
  if (has_baseante()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->baseante(), output);
  }
  
  // required int32 betTimes = 5;
  if (has_bettimes()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->bettimes(), output);
  }
  
  // required int64 userMoney = 6;
  if (has_usermoney()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(6, this->usermoney(), output);
  }
  
  // optional int32 nextMultiple = 7;
  if (has_nextmultiple()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->nextmultiple(), output);
  }
  
  // required bool canBet = 8;
  if (has_canbet()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(8, this->canbet(), output);
  }
  
  // required bool canDoubleBet = 9;
  if (has_candoublebet()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(9, this->candoublebet(), output);
  }
  
  // optional string tipMessage = 10;
  if (has_tipmessage()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->tipmessage().data(), this->tipmessage().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      10, this->tipmessage(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AckBet::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int64 sessionId = 1;
  if (has_sessionid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->sessionid(), target);
  }
  
  // required int32 betResult = 2;
  if (has_betresult()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->betresult(), target);
  }
  
  // required int64 awardMoney = 3;
  if (has_awardmoney()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->awardmoney(), target);
  }
  
  // required int64 baseAnte = 4;
  if (has_baseante()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->baseante(), target);
  }
  
  // required int32 betTimes = 5;
  if (has_bettimes()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->bettimes(), target);
  }
  
  // required int64 userMoney = 6;
  if (has_usermoney()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(6, this->usermoney(), target);
  }
  
  // optional int32 nextMultiple = 7;
  if (has_nextmultiple()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->nextmultiple(), target);
  }
  
  // required bool canBet = 8;
  if (has_canbet()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(8, this->canbet(), target);
  }
  
  // required bool canDoubleBet = 9;
  if (has_candoublebet()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(9, this->candoublebet(), target);
  }
  
  // optional string tipMessage = 10;
  if (has_tipmessage()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->tipmessage().data(), this->tipmessage().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->tipmessage(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AckBet::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 sessionId = 1;
    if (has_sessionid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->sessionid());
    }
    
    // required int32 betResult = 2;
    if (has_betresult()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->betresult());
    }
    
    // required int64 awardMoney = 3;
    if (has_awardmoney()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->awardmoney());
    }
    
    // required int64 baseAnte = 4;
    if (has_baseante()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->baseante());
    }
    
    // required int32 betTimes = 5;
    if (has_bettimes()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->bettimes());
    }
    
    // required int64 userMoney = 6;
    if (has_usermoney()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->usermoney());
    }
    
    // optional int32 nextMultiple = 7;
    if (has_nextmultiple()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->nextmultiple());
    }
    
    // required bool canBet = 8;
    if (has_canbet()) {
      total_size += 1 + 1;
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // required bool canDoubleBet = 9;
    if (has_candoublebet()) {
      total_size += 1 + 1;
    }
    
    // optional string tipMessage = 10;
    if (has_tipmessage()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->tipmessage());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AckBet::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AckBet* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AckBet*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AckBet::MergeFrom(const AckBet& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_sessionid()) {
      set_sessionid(from.sessionid());
    }
    if (from.has_betresult()) {
      set_betresult(from.betresult());
    }
    if (from.has_awardmoney()) {
      set_awardmoney(from.awardmoney());
    }
    if (from.has_baseante()) {
      set_baseante(from.baseante());
    }
    if (from.has_bettimes()) {
      set_bettimes(from.bettimes());
    }
    if (from.has_usermoney()) {
      set_usermoney(from.usermoney());
    }
    if (from.has_nextmultiple()) {
      set_nextmultiple(from.nextmultiple());
    }
    if (from.has_canbet()) {
      set_canbet(from.canbet());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_candoublebet()) {
      set_candoublebet(from.candoublebet());
    }
    if (from.has_tipmessage()) {
      set_tipmessage(from.tipmessage());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AckBet::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AckBet::CopyFrom(const AckBet& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AckBet::IsInitialized() const {
  if ((_has_bits_[0] & 0x000001bf) != 0x000001bf) return false;
  
  return true;
}

void AckBet::Swap(AckBet* other) {
  if (other != this) {
    std::swap(sessionid_, other->sessionid_);
    std::swap(betresult_, other->betresult_);
    std::swap(awardmoney_, other->awardmoney_);
    std::swap(baseante_, other->baseante_);
    std::swap(bettimes_, other->bettimes_);
    std::swap(usermoney_, other->usermoney_);
    std::swap(nextmultiple_, other->nextmultiple_);
    std::swap(canbet_, other->canbet_);
    std::swap(candoublebet_, other->candoublebet_);
    std::swap(tipmessage_, other->tipmessage_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AckBet::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AckBet_descriptor_;
  metadata.reflection = AckBet_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AckTipMessage::kSessionIdFieldNumber;
const int AckTipMessage::kMsgTypeFieldNumber;
const int AckTipMessage::kTxtMsgFieldNumber;
#endif  // !_MSC_VER

AckTipMessage::AckTipMessage()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AckTipMessage::InitAsDefaultInstance() {
}

AckTipMessage::AckTipMessage(const AckTipMessage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AckTipMessage::SharedCtor() {
  _cached_size_ = 0;
  sessionid_ = GOOGLE_LONGLONG(0);
  msgtype_ = 0;
  txtmsg_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AckTipMessage::~AckTipMessage() {
  SharedDtor();
}

void AckTipMessage::SharedDtor() {
  if (txtmsg_ != &::google::protobuf::internal::kEmptyString) {
    delete txtmsg_;
  }
  if (this != default_instance_) {
  }
}

void AckTipMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AckTipMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AckTipMessage_descriptor_;
}

const AckTipMessage& AckTipMessage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ClownServerMessage_2eproto();  return *default_instance_;
}

AckTipMessage* AckTipMessage::default_instance_ = NULL;

AckTipMessage* AckTipMessage::New() const {
  return new AckTipMessage;
}

void AckTipMessage::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    sessionid_ = GOOGLE_LONGLONG(0);
    msgtype_ = 0;
    if (has_txtmsg()) {
      if (txtmsg_ != &::google::protobuf::internal::kEmptyString) {
        txtmsg_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AckTipMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 sessionId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &sessionid_)));
          set_has_sessionid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_msgType;
        break;
      }
      
      // required int32 msgType = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_msgType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &msgtype_)));
          set_has_msgtype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_txtMsg;
        break;
      }
      
      // required string txtMsg = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_txtMsg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_txtmsg()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->txtmsg().data(), this->txtmsg().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AckTipMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int64 sessionId = 1;
  if (has_sessionid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->sessionid(), output);
  }
  
  // required int32 msgType = 2;
  if (has_msgtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->msgtype(), output);
  }
  
  // required string txtMsg = 3;
  if (has_txtmsg()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->txtmsg().data(), this->txtmsg().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->txtmsg(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AckTipMessage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int64 sessionId = 1;
  if (has_sessionid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->sessionid(), target);
  }
  
  // required int32 msgType = 2;
  if (has_msgtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->msgtype(), target);
  }
  
  // required string txtMsg = 3;
  if (has_txtmsg()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->txtmsg().data(), this->txtmsg().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->txtmsg(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AckTipMessage::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 sessionId = 1;
    if (has_sessionid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->sessionid());
    }
    
    // required int32 msgType = 2;
    if (has_msgtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->msgtype());
    }
    
    // required string txtMsg = 3;
    if (has_txtmsg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->txtmsg());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AckTipMessage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AckTipMessage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AckTipMessage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AckTipMessage::MergeFrom(const AckTipMessage& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_sessionid()) {
      set_sessionid(from.sessionid());
    }
    if (from.has_msgtype()) {
      set_msgtype(from.msgtype());
    }
    if (from.has_txtmsg()) {
      set_txtmsg(from.txtmsg());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AckTipMessage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AckTipMessage::CopyFrom(const AckTipMessage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AckTipMessage::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  
  return true;
}

void AckTipMessage::Swap(AckTipMessage* other) {
  if (other != this) {
    std::swap(sessionid_, other->sessionid_);
    std::swap(msgtype_, other->msgtype_);
    std::swap(txtmsg_, other->txtmsg_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AckTipMessage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AckTipMessage_descriptor_;
  metadata.reflection = AckTipMessage_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AckHugeAward::kUsernameFieldNumber;
const int AckHugeAward::kAwardMoneyFieldNumber;
const int AckHugeAward::kAwardTimeFieldNumber;
#endif  // !_MSC_VER

AckHugeAward::AckHugeAward()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AckHugeAward::InitAsDefaultInstance() {
}

AckHugeAward::AckHugeAward(const AckHugeAward& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AckHugeAward::SharedCtor() {
  _cached_size_ = 0;
  username_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  awardmoney_ = GOOGLE_LONGLONG(0);
  awardtime_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AckHugeAward::~AckHugeAward() {
  SharedDtor();
}

void AckHugeAward::SharedDtor() {
  if (username_ != &::google::protobuf::internal::kEmptyString) {
    delete username_;
  }
  if (this != default_instance_) {
  }
}

void AckHugeAward::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AckHugeAward::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AckHugeAward_descriptor_;
}

const AckHugeAward& AckHugeAward::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ClownServerMessage_2eproto();  return *default_instance_;
}

AckHugeAward* AckHugeAward::default_instance_ = NULL;

AckHugeAward* AckHugeAward::New() const {
  return new AckHugeAward;
}

void AckHugeAward::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_username()) {
      if (username_ != &::google::protobuf::internal::kEmptyString) {
        username_->clear();
      }
    }
    awardmoney_ = GOOGLE_LONGLONG(0);
    awardtime_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AckHugeAward::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string username = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_username()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->username().data(), this->username().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_awardMoney;
        break;
      }
      
      // required int64 awardMoney = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_awardMoney:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &awardmoney_)));
          set_has_awardmoney();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_awardTime;
        break;
      }
      
      // required int64 awardTime = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_awardTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &awardtime_)));
          set_has_awardtime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AckHugeAward::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string username = 1;
  if (has_username()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->username().data(), this->username().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->username(), output);
  }
  
  // required int64 awardMoney = 2;
  if (has_awardmoney()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->awardmoney(), output);
  }
  
  // required int64 awardTime = 3;
  if (has_awardtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->awardtime(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AckHugeAward::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string username = 1;
  if (has_username()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->username().data(), this->username().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->username(), target);
  }
  
  // required int64 awardMoney = 2;
  if (has_awardmoney()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->awardmoney(), target);
  }
  
  // required int64 awardTime = 3;
  if (has_awardtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->awardtime(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AckHugeAward::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string username = 1;
    if (has_username()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->username());
    }
    
    // required int64 awardMoney = 2;
    if (has_awardmoney()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->awardmoney());
    }
    
    // required int64 awardTime = 3;
    if (has_awardtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->awardtime());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AckHugeAward::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AckHugeAward* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AckHugeAward*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AckHugeAward::MergeFrom(const AckHugeAward& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_username()) {
      set_username(from.username());
    }
    if (from.has_awardmoney()) {
      set_awardmoney(from.awardmoney());
    }
    if (from.has_awardtime()) {
      set_awardtime(from.awardtime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AckHugeAward::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AckHugeAward::CopyFrom(const AckHugeAward& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AckHugeAward::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  
  return true;
}

void AckHugeAward::Swap(AckHugeAward* other) {
  if (other != this) {
    std::swap(username_, other->username_);
    std::swap(awardmoney_, other->awardmoney_);
    std::swap(awardtime_, other->awardtime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AckHugeAward::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AckHugeAward_descriptor_;
  metadata.reflection = AckHugeAward_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AckDoubleChanceAward::kSessionIdFieldNumber;
const int AckDoubleChanceAward::kChanceFieldNumber;
const int AckDoubleChanceAward::kTotalChanceFieldNumber;
#endif  // !_MSC_VER

AckDoubleChanceAward::AckDoubleChanceAward()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AckDoubleChanceAward::InitAsDefaultInstance() {
}

AckDoubleChanceAward::AckDoubleChanceAward(const AckDoubleChanceAward& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AckDoubleChanceAward::SharedCtor() {
  _cached_size_ = 0;
  sessionid_ = GOOGLE_LONGLONG(0);
  chance_ = 0;
  totalchance_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AckDoubleChanceAward::~AckDoubleChanceAward() {
  SharedDtor();
}

void AckDoubleChanceAward::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AckDoubleChanceAward::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AckDoubleChanceAward::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AckDoubleChanceAward_descriptor_;
}

const AckDoubleChanceAward& AckDoubleChanceAward::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ClownServerMessage_2eproto();  return *default_instance_;
}

AckDoubleChanceAward* AckDoubleChanceAward::default_instance_ = NULL;

AckDoubleChanceAward* AckDoubleChanceAward::New() const {
  return new AckDoubleChanceAward;
}

void AckDoubleChanceAward::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    sessionid_ = GOOGLE_LONGLONG(0);
    chance_ = 0;
    totalchance_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AckDoubleChanceAward::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 sessionId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &sessionid_)));
          set_has_sessionid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_chance;
        break;
      }
      
      // required int32 chance = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_chance:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &chance_)));
          set_has_chance();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_totalChance;
        break;
      }
      
      // required int32 totalChance = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_totalChance:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &totalchance_)));
          set_has_totalchance();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AckDoubleChanceAward::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int64 sessionId = 1;
  if (has_sessionid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->sessionid(), output);
  }
  
  // required int32 chance = 2;
  if (has_chance()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->chance(), output);
  }
  
  // required int32 totalChance = 3;
  if (has_totalchance()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->totalchance(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AckDoubleChanceAward::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int64 sessionId = 1;
  if (has_sessionid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->sessionid(), target);
  }
  
  // required int32 chance = 2;
  if (has_chance()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->chance(), target);
  }
  
  // required int32 totalChance = 3;
  if (has_totalchance()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->totalchance(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AckDoubleChanceAward::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 sessionId = 1;
    if (has_sessionid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->sessionid());
    }
    
    // required int32 chance = 2;
    if (has_chance()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->chance());
    }
    
    // required int32 totalChance = 3;
    if (has_totalchance()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->totalchance());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AckDoubleChanceAward::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AckDoubleChanceAward* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AckDoubleChanceAward*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AckDoubleChanceAward::MergeFrom(const AckDoubleChanceAward& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_sessionid()) {
      set_sessionid(from.sessionid());
    }
    if (from.has_chance()) {
      set_chance(from.chance());
    }
    if (from.has_totalchance()) {
      set_totalchance(from.totalchance());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AckDoubleChanceAward::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AckDoubleChanceAward::CopyFrom(const AckDoubleChanceAward& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AckDoubleChanceAward::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  
  return true;
}

void AckDoubleChanceAward::Swap(AckDoubleChanceAward* other) {
  if (other != this) {
    std::swap(sessionid_, other->sessionid_);
    std::swap(chance_, other->chance_);
    std::swap(totalchance_, other->totalchance_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AckDoubleChanceAward::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AckDoubleChanceAward_descriptor_;
  metadata.reflection = AckDoubleChanceAward_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AckLoseTooMuch::kSessionIdFieldNumber;
#endif  // !_MSC_VER

AckLoseTooMuch::AckLoseTooMuch()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AckLoseTooMuch::InitAsDefaultInstance() {
}

AckLoseTooMuch::AckLoseTooMuch(const AckLoseTooMuch& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AckLoseTooMuch::SharedCtor() {
  _cached_size_ = 0;
  sessionid_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AckLoseTooMuch::~AckLoseTooMuch() {
  SharedDtor();
}

void AckLoseTooMuch::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AckLoseTooMuch::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AckLoseTooMuch::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AckLoseTooMuch_descriptor_;
}

const AckLoseTooMuch& AckLoseTooMuch::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ClownServerMessage_2eproto();  return *default_instance_;
}

AckLoseTooMuch* AckLoseTooMuch::default_instance_ = NULL;

AckLoseTooMuch* AckLoseTooMuch::New() const {
  return new AckLoseTooMuch;
}

void AckLoseTooMuch::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    sessionid_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AckLoseTooMuch::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 sessionId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &sessionid_)));
          set_has_sessionid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AckLoseTooMuch::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int64 sessionId = 1;
  if (has_sessionid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->sessionid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AckLoseTooMuch::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int64 sessionId = 1;
  if (has_sessionid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->sessionid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AckLoseTooMuch::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 sessionId = 1;
    if (has_sessionid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->sessionid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AckLoseTooMuch::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AckLoseTooMuch* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AckLoseTooMuch*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AckLoseTooMuch::MergeFrom(const AckLoseTooMuch& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_sessionid()) {
      set_sessionid(from.sessionid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AckLoseTooMuch::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AckLoseTooMuch::CopyFrom(const AckLoseTooMuch& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AckLoseTooMuch::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void AckLoseTooMuch::Swap(AckLoseTooMuch* other) {
  if (other != this) {
    std::swap(sessionid_, other->sessionid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AckLoseTooMuch::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AckLoseTooMuch_descriptor_;
  metadata.reflection = AckLoseTooMuch_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AckCloseConnection::kSessionIdFieldNumber;
#endif  // !_MSC_VER

AckCloseConnection::AckCloseConnection()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AckCloseConnection::InitAsDefaultInstance() {
}

AckCloseConnection::AckCloseConnection(const AckCloseConnection& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AckCloseConnection::SharedCtor() {
  _cached_size_ = 0;
  sessionid_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AckCloseConnection::~AckCloseConnection() {
  SharedDtor();
}

void AckCloseConnection::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AckCloseConnection::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AckCloseConnection::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AckCloseConnection_descriptor_;
}

const AckCloseConnection& AckCloseConnection::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ClownServerMessage_2eproto();  return *default_instance_;
}

AckCloseConnection* AckCloseConnection::default_instance_ = NULL;

AckCloseConnection* AckCloseConnection::New() const {
  return new AckCloseConnection;
}

void AckCloseConnection::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    sessionid_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AckCloseConnection::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 sessionId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &sessionid_)));
          set_has_sessionid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AckCloseConnection::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int64 sessionId = 1;
  if (has_sessionid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->sessionid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AckCloseConnection::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int64 sessionId = 1;
  if (has_sessionid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->sessionid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AckCloseConnection::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 sessionId = 1;
    if (has_sessionid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->sessionid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AckCloseConnection::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AckCloseConnection* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AckCloseConnection*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AckCloseConnection::MergeFrom(const AckCloseConnection& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_sessionid()) {
      set_sessionid(from.sessionid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AckCloseConnection::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AckCloseConnection::CopyFrom(const AckCloseConnection& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AckCloseConnection::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void AckCloseConnection::Swap(AckCloseConnection* other) {
  if (other != this) {
    std::swap(sessionid_, other->sessionid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AckCloseConnection::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AckCloseConnection_descriptor_;
  metadata.reflection = AckCloseConnection_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

ReqOpenClown::ReqOpenClown()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ReqOpenClown::InitAsDefaultInstance() {
}

ReqOpenClown::ReqOpenClown(const ReqOpenClown& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ReqOpenClown::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReqOpenClown::~ReqOpenClown() {
  SharedDtor();
}

void ReqOpenClown::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ReqOpenClown::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReqOpenClown::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReqOpenClown_descriptor_;
}

const ReqOpenClown& ReqOpenClown::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ClownServerMessage_2eproto();  return *default_instance_;
}

ReqOpenClown* ReqOpenClown::default_instance_ = NULL;

ReqOpenClown* ReqOpenClown::New() const {
  return new ReqOpenClown;
}

void ReqOpenClown::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReqOpenClown::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void ReqOpenClown::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ReqOpenClown::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ReqOpenClown::ByteSize() const {
  int total_size = 0;
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReqOpenClown::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReqOpenClown* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReqOpenClown*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReqOpenClown::MergeFrom(const ReqOpenClown& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReqOpenClown::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqOpenClown::CopyFrom(const ReqOpenClown& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqOpenClown::IsInitialized() const {
  
  return true;
}

void ReqOpenClown::Swap(ReqOpenClown* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReqOpenClown::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReqOpenClown_descriptor_;
  metadata.reflection = ReqOpenClown_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AckOpenClown::kResultFieldNumber;
const int AckOpenClown::kFreeMoneyFieldNumber;
const int AckOpenClown::kExchangeMoneyFieldNumber;
#endif  // !_MSC_VER

AckOpenClown::AckOpenClown()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AckOpenClown::InitAsDefaultInstance() {
}

AckOpenClown::AckOpenClown(const AckOpenClown& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AckOpenClown::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
  freemoney_ = GOOGLE_LONGLONG(0);
  exchangemoney_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AckOpenClown::~AckOpenClown() {
  SharedDtor();
}

void AckOpenClown::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AckOpenClown::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AckOpenClown::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AckOpenClown_descriptor_;
}

const AckOpenClown& AckOpenClown::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ClownServerMessage_2eproto();  return *default_instance_;
}

AckOpenClown* AckOpenClown::default_instance_ = NULL;

AckOpenClown* AckOpenClown::New() const {
  return new AckOpenClown;
}

void AckOpenClown::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0;
    freemoney_ = GOOGLE_LONGLONG(0);
    exchangemoney_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AckOpenClown::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_freeMoney;
        break;
      }
      
      // optional int64 freeMoney = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_freeMoney:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &freemoney_)));
          set_has_freemoney();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_exchangeMoney;
        break;
      }
      
      // optional int64 exchangeMoney = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_exchangeMoney:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &exchangemoney_)));
          set_has_exchangemoney();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AckOpenClown::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }
  
  // optional int64 freeMoney = 2;
  if (has_freemoney()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->freemoney(), output);
  }
  
  // optional int64 exchangeMoney = 3;
  if (has_exchangemoney()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->exchangemoney(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AckOpenClown::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }
  
  // optional int64 freeMoney = 2;
  if (has_freemoney()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->freemoney(), target);
  }
  
  // optional int64 exchangeMoney = 3;
  if (has_exchangemoney()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->exchangemoney(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AckOpenClown::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }
    
    // optional int64 freeMoney = 2;
    if (has_freemoney()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->freemoney());
    }
    
    // optional int64 exchangeMoney = 3;
    if (has_exchangemoney()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->exchangemoney());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AckOpenClown::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AckOpenClown* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AckOpenClown*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AckOpenClown::MergeFrom(const AckOpenClown& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_freemoney()) {
      set_freemoney(from.freemoney());
    }
    if (from.has_exchangemoney()) {
      set_exchangemoney(from.exchangemoney());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AckOpenClown::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AckOpenClown::CopyFrom(const AckOpenClown& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AckOpenClown::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void AckOpenClown::Swap(AckOpenClown* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(freemoney_, other->freemoney_);
    std::swap(exchangemoney_, other->exchangemoney_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AckOpenClown::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AckOpenClown_descriptor_;
  metadata.reflection = AckOpenClown_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

ReqCloseClown::ReqCloseClown()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ReqCloseClown::InitAsDefaultInstance() {
}

ReqCloseClown::ReqCloseClown(const ReqCloseClown& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ReqCloseClown::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReqCloseClown::~ReqCloseClown() {
  SharedDtor();
}

void ReqCloseClown::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ReqCloseClown::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReqCloseClown::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReqCloseClown_descriptor_;
}

const ReqCloseClown& ReqCloseClown::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ClownServerMessage_2eproto();  return *default_instance_;
}

ReqCloseClown* ReqCloseClown::default_instance_ = NULL;

ReqCloseClown* ReqCloseClown::New() const {
  return new ReqCloseClown;
}

void ReqCloseClown::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReqCloseClown::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void ReqCloseClown::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ReqCloseClown::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ReqCloseClown::ByteSize() const {
  int total_size = 0;
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReqCloseClown::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReqCloseClown* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReqCloseClown*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReqCloseClown::MergeFrom(const ReqCloseClown& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReqCloseClown::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqCloseClown::CopyFrom(const ReqCloseClown& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqCloseClown::IsInitialized() const {
  
  return true;
}

void ReqCloseClown::Swap(ReqCloseClown* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReqCloseClown::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReqCloseClown_descriptor_;
  metadata.reflection = ReqCloseClown_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AckCloseClown::kResultFieldNumber;
#endif  // !_MSC_VER

AckCloseClown::AckCloseClown()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AckCloseClown::InitAsDefaultInstance() {
}

AckCloseClown::AckCloseClown(const AckCloseClown& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AckCloseClown::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AckCloseClown::~AckCloseClown() {
  SharedDtor();
}

void AckCloseClown::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AckCloseClown::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AckCloseClown::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AckCloseClown_descriptor_;
}

const AckCloseClown& AckCloseClown::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ClownServerMessage_2eproto();  return *default_instance_;
}

AckCloseClown* AckCloseClown::default_instance_ = NULL;

AckCloseClown* AckCloseClown::New() const {
  return new AckCloseClown;
}

void AckCloseClown::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AckCloseClown::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AckCloseClown::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AckCloseClown::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AckCloseClown::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AckCloseClown::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AckCloseClown* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AckCloseClown*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AckCloseClown::MergeFrom(const AckCloseClown& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AckCloseClown::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AckCloseClown::CopyFrom(const AckCloseClown& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AckCloseClown::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void AckCloseClown::Swap(AckCloseClown* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AckCloseClown::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AckCloseClown_descriptor_;
  metadata.reflection = AckCloseClown_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

AckServerInMaintaining::AckServerInMaintaining()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AckServerInMaintaining::InitAsDefaultInstance() {
}

AckServerInMaintaining::AckServerInMaintaining(const AckServerInMaintaining& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AckServerInMaintaining::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AckServerInMaintaining::~AckServerInMaintaining() {
  SharedDtor();
}

void AckServerInMaintaining::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AckServerInMaintaining::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AckServerInMaintaining::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AckServerInMaintaining_descriptor_;
}

const AckServerInMaintaining& AckServerInMaintaining::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ClownServerMessage_2eproto();  return *default_instance_;
}

AckServerInMaintaining* AckServerInMaintaining::default_instance_ = NULL;

AckServerInMaintaining* AckServerInMaintaining::New() const {
  return new AckServerInMaintaining;
}

void AckServerInMaintaining::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AckServerInMaintaining::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void AckServerInMaintaining::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AckServerInMaintaining::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AckServerInMaintaining::ByteSize() const {
  int total_size = 0;
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AckServerInMaintaining::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AckServerInMaintaining* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AckServerInMaintaining*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AckServerInMaintaining::MergeFrom(const AckServerInMaintaining& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AckServerInMaintaining::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AckServerInMaintaining::CopyFrom(const AckServerInMaintaining& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AckServerInMaintaining::IsInitialized() const {
  
  return true;
}

void AckServerInMaintaining::Swap(AckServerInMaintaining* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AckServerInMaintaining::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AckServerInMaintaining_descriptor_;
  metadata.reflection = AckServerInMaintaining_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AckPoolValue::kPoolValueFieldNumber;
#endif  // !_MSC_VER

AckPoolValue::AckPoolValue()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AckPoolValue::InitAsDefaultInstance() {
}

AckPoolValue::AckPoolValue(const AckPoolValue& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AckPoolValue::SharedCtor() {
  _cached_size_ = 0;
  poolvalue_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AckPoolValue::~AckPoolValue() {
  SharedDtor();
}

void AckPoolValue::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AckPoolValue::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AckPoolValue::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AckPoolValue_descriptor_;
}

const AckPoolValue& AckPoolValue::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ClownServerMessage_2eproto();  return *default_instance_;
}

AckPoolValue* AckPoolValue::default_instance_ = NULL;

AckPoolValue* AckPoolValue::New() const {
  return new AckPoolValue;
}

void AckPoolValue::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    poolvalue_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AckPoolValue::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 poolValue = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &poolvalue_)));
          set_has_poolvalue();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AckPoolValue::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint64 poolValue = 1;
  if (has_poolvalue()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->poolvalue(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AckPoolValue::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint64 poolValue = 1;
  if (has_poolvalue()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->poolvalue(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AckPoolValue::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 poolValue = 1;
    if (has_poolvalue()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->poolvalue());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AckPoolValue::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AckPoolValue* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AckPoolValue*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AckPoolValue::MergeFrom(const AckPoolValue& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_poolvalue()) {
      set_poolvalue(from.poolvalue());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AckPoolValue::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AckPoolValue::CopyFrom(const AckPoolValue& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AckPoolValue::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void AckPoolValue::Swap(AckPoolValue* other) {
  if (other != this) {
    std::swap(poolvalue_, other->poolvalue_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AckPoolValue::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AckPoolValue_descriptor_;
  metadata.reflection = AckPoolValue_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ReqRankingList::kDaysFieldNumber;
const int ReqRankingList::kTypeFieldNumber;
const int ReqRankingList::kNumberFieldNumber;
const int ReqRankingList::kContainSelfFieldNumber;
const int ReqRankingList::kStrictChannelFieldNumber;
#endif  // !_MSC_VER

ReqRankingList::ReqRankingList()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ReqRankingList::InitAsDefaultInstance() {
}

ReqRankingList::ReqRankingList(const ReqRankingList& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ReqRankingList::SharedCtor() {
  _cached_size_ = 0;
  days_ = 0u;
  type_ = 0u;
  number_ = 10u;
  containself_ = true;
  strictchannel_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReqRankingList::~ReqRankingList() {
  SharedDtor();
}

void ReqRankingList::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ReqRankingList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReqRankingList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReqRankingList_descriptor_;
}

const ReqRankingList& ReqRankingList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ClownServerMessage_2eproto();  return *default_instance_;
}

ReqRankingList* ReqRankingList::default_instance_ = NULL;

ReqRankingList* ReqRankingList::New() const {
  return new ReqRankingList;
}

void ReqRankingList::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    days_ = 0u;
    type_ = 0u;
    number_ = 10u;
    containself_ = true;
    strictchannel_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReqRankingList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 days = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &days_)));
          set_has_days();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_type;
        break;
      }
      
      // required uint32 type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_number;
        break;
      }
      
      // optional uint32 number = 3 [default = 10];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_number:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &number_)));
          set_has_number();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_containSelf;
        break;
      }
      
      // optional bool containSelf = 4 [default = true];
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_containSelf:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &containself_)));
          set_has_containself();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_strictChannel;
        break;
      }
      
      // optional bool strictChannel = 5 [default = false];
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_strictChannel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &strictchannel_)));
          set_has_strictchannel();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ReqRankingList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 days = 1;
  if (has_days()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->days(), output);
  }
  
  // required uint32 type = 2;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->type(), output);
  }
  
  // optional uint32 number = 3 [default = 10];
  if (has_number()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->number(), output);
  }
  
  // optional bool containSelf = 4 [default = true];
  if (has_containself()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->containself(), output);
  }
  
  // optional bool strictChannel = 5 [default = false];
  if (has_strictchannel()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->strictchannel(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ReqRankingList::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 days = 1;
  if (has_days()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->days(), target);
  }
  
  // required uint32 type = 2;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->type(), target);
  }
  
  // optional uint32 number = 3 [default = 10];
  if (has_number()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->number(), target);
  }
  
  // optional bool containSelf = 4 [default = true];
  if (has_containself()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->containself(), target);
  }
  
  // optional bool strictChannel = 5 [default = false];
  if (has_strictchannel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->strictchannel(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ReqRankingList::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 days = 1;
    if (has_days()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->days());
    }
    
    // required uint32 type = 2;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->type());
    }
    
    // optional uint32 number = 3 [default = 10];
    if (has_number()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->number());
    }
    
    // optional bool containSelf = 4 [default = true];
    if (has_containself()) {
      total_size += 1 + 1;
    }
    
    // optional bool strictChannel = 5 [default = false];
    if (has_strictchannel()) {
      total_size += 1 + 1;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReqRankingList::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReqRankingList* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReqRankingList*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReqRankingList::MergeFrom(const ReqRankingList& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_days()) {
      set_days(from.days());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_number()) {
      set_number(from.number());
    }
    if (from.has_containself()) {
      set_containself(from.containself());
    }
    if (from.has_strictchannel()) {
      set_strictchannel(from.strictchannel());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReqRankingList::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqRankingList::CopyFrom(const ReqRankingList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqRankingList::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void ReqRankingList::Swap(ReqRankingList* other) {
  if (other != this) {
    std::swap(days_, other->days_);
    std::swap(type_, other->type_);
    std::swap(number_, other->number_);
    std::swap(containself_, other->containself_);
    std::swap(strictchannel_, other->strictchannel_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReqRankingList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReqRankingList_descriptor_;
  metadata.reflection = ReqRankingList_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AckRankingList_RankInfo::kSerialFieldNumber;
const int AckRankingList_RankInfo::kUserIdFieldNumber;
const int AckRankingList_RankInfo::kRoleNameFieldNumber;
const int AckRankingList_RankInfo::kValueFieldNumber;
const int AckRankingList_RankInfo::kSubValueFieldNumber;
#endif  // !_MSC_VER

AckRankingList_RankInfo::AckRankingList_RankInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AckRankingList_RankInfo::InitAsDefaultInstance() {
}

AckRankingList_RankInfo::AckRankingList_RankInfo(const AckRankingList_RankInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AckRankingList_RankInfo::SharedCtor() {
  _cached_size_ = 0;
  serial_ = 0u;
  userid_ = GOOGLE_ULONGLONG(0);
  rolename_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  value_ = GOOGLE_LONGLONG(0);
  subvalue_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AckRankingList_RankInfo::~AckRankingList_RankInfo() {
  SharedDtor();
}

void AckRankingList_RankInfo::SharedDtor() {
  if (rolename_ != &::google::protobuf::internal::kEmptyString) {
    delete rolename_;
  }
  if (this != default_instance_) {
  }
}

void AckRankingList_RankInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AckRankingList_RankInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AckRankingList_RankInfo_descriptor_;
}

const AckRankingList_RankInfo& AckRankingList_RankInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ClownServerMessage_2eproto();  return *default_instance_;
}

AckRankingList_RankInfo* AckRankingList_RankInfo::default_instance_ = NULL;

AckRankingList_RankInfo* AckRankingList_RankInfo::New() const {
  return new AckRankingList_RankInfo;
}

void AckRankingList_RankInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    serial_ = 0u;
    userid_ = GOOGLE_ULONGLONG(0);
    if (has_rolename()) {
      if (rolename_ != &::google::protobuf::internal::kEmptyString) {
        rolename_->clear();
      }
    }
    value_ = GOOGLE_LONGLONG(0);
    subvalue_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AckRankingList_RankInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 serial = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &serial_)));
          set_has_serial();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_userId;
        break;
      }
      
      // required uint64 userId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_userId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &userid_)));
          set_has_userid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_roleName;
        break;
      }
      
      // required string roleName = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_roleName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_rolename()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->rolename().data(), this->rolename().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_value;
        break;
      }
      
      // required int64 value = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &value_)));
          set_has_value();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_subValue;
        break;
      }
      
      // required uint64 subValue = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_subValue:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &subvalue_)));
          set_has_subvalue();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AckRankingList_RankInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 serial = 1;
  if (has_serial()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->serial(), output);
  }
  
  // required uint64 userId = 2;
  if (has_userid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->userid(), output);
  }
  
  // required string roleName = 3;
  if (has_rolename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->rolename().data(), this->rolename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->rolename(), output);
  }
  
  // required int64 value = 4;
  if (has_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->value(), output);
  }
  
  // required uint64 subValue = 5;
  if (has_subvalue()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->subvalue(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AckRankingList_RankInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 serial = 1;
  if (has_serial()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->serial(), target);
  }
  
  // required uint64 userId = 2;
  if (has_userid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->userid(), target);
  }
  
  // required string roleName = 3;
  if (has_rolename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->rolename().data(), this->rolename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->rolename(), target);
  }
  
  // required int64 value = 4;
  if (has_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->value(), target);
  }
  
  // required uint64 subValue = 5;
  if (has_subvalue()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->subvalue(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AckRankingList_RankInfo::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 serial = 1;
    if (has_serial()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->serial());
    }
    
    // required uint64 userId = 2;
    if (has_userid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->userid());
    }
    
    // required string roleName = 3;
    if (has_rolename()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->rolename());
    }
    
    // required int64 value = 4;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->value());
    }
    
    // required uint64 subValue = 5;
    if (has_subvalue()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->subvalue());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AckRankingList_RankInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AckRankingList_RankInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AckRankingList_RankInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AckRankingList_RankInfo::MergeFrom(const AckRankingList_RankInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_serial()) {
      set_serial(from.serial());
    }
    if (from.has_userid()) {
      set_userid(from.userid());
    }
    if (from.has_rolename()) {
      set_rolename(from.rolename());
    }
    if (from.has_value()) {
      set_value(from.value());
    }
    if (from.has_subvalue()) {
      set_subvalue(from.subvalue());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AckRankingList_RankInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AckRankingList_RankInfo::CopyFrom(const AckRankingList_RankInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AckRankingList_RankInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;
  
  return true;
}

void AckRankingList_RankInfo::Swap(AckRankingList_RankInfo* other) {
  if (other != this) {
    std::swap(serial_, other->serial_);
    std::swap(userid_, other->userid_);
    std::swap(rolename_, other->rolename_);
    std::swap(value_, other->value_);
    std::swap(subvalue_, other->subvalue_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AckRankingList_RankInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AckRankingList_RankInfo_descriptor_;
  metadata.reflection = AckRankingList_RankInfo_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int AckRankingList::kTypeFieldNumber;
const int AckRankingList::kChannelFieldNumber;
const int AckRankingList::kListFieldNumber;
#endif  // !_MSC_VER

AckRankingList::AckRankingList()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AckRankingList::InitAsDefaultInstance() {
}

AckRankingList::AckRankingList(const AckRankingList& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AckRankingList::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0u;
  channel_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AckRankingList::~AckRankingList() {
  SharedDtor();
}

void AckRankingList::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AckRankingList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AckRankingList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AckRankingList_descriptor_;
}

const AckRankingList& AckRankingList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ClownServerMessage_2eproto();  return *default_instance_;
}

AckRankingList* AckRankingList::default_instance_ = NULL;

AckRankingList* AckRankingList::New() const {
  return new AckRankingList;
}

void AckRankingList::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 0u;
    channel_ = 0u;
  }
  list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AckRankingList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_channel;
        break;
      }
      
      // optional uint32 channel = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_channel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &channel_)));
          set_has_channel();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_list;
        break;
      }
      
      // repeated .com.ourgame.clown.msg.AckRankingList.RankInfo list = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_list;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AckRankingList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->type(), output);
  }
  
  // optional uint32 channel = 2;
  if (has_channel()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->channel(), output);
  }
  
  // repeated .com.ourgame.clown.msg.AckRankingList.RankInfo list = 3;
  for (int i = 0; i < this->list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->list(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AckRankingList::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->type(), target);
  }
  
  // optional uint32 channel = 2;
  if (has_channel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->channel(), target);
  }
  
  // repeated .com.ourgame.clown.msg.AckRankingList.RankInfo list = 3;
  for (int i = 0; i < this->list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->list(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AckRankingList::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->type());
    }
    
    // optional uint32 channel = 2;
    if (has_channel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->channel());
    }
    
  }
  // repeated .com.ourgame.clown.msg.AckRankingList.RankInfo list = 3;
  total_size += 1 * this->list_size();
  for (int i = 0; i < this->list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->list(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AckRankingList::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AckRankingList* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AckRankingList*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AckRankingList::MergeFrom(const AckRankingList& from) {
  GOOGLE_CHECK_NE(&from, this);
  list_.MergeFrom(from.list_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_channel()) {
      set_channel(from.channel());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AckRankingList::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AckRankingList::CopyFrom(const AckRankingList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AckRankingList::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  for (int i = 0; i < list_size(); i++) {
    if (!this->list(i).IsInitialized()) return false;
  }
  return true;
}

void AckRankingList::Swap(AckRankingList* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(channel_, other->channel_);
    list_.Swap(&other->list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AckRankingList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AckRankingList_descriptor_;
  metadata.reflection = AckRankingList_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ReqHandselAwardHistory::kTypeFieldNumber;
const int ReqHandselAwardHistory::kRowsFieldNumber;
#endif  // !_MSC_VER

ReqHandselAwardHistory::ReqHandselAwardHistory()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ReqHandselAwardHistory::InitAsDefaultInstance() {
}

ReqHandselAwardHistory::ReqHandselAwardHistory(const ReqHandselAwardHistory& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ReqHandselAwardHistory::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0u;
  rows_ = 20u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReqHandselAwardHistory::~ReqHandselAwardHistory() {
  SharedDtor();
}

void ReqHandselAwardHistory::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ReqHandselAwardHistory::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReqHandselAwardHistory::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReqHandselAwardHistory_descriptor_;
}

const ReqHandselAwardHistory& ReqHandselAwardHistory::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ClownServerMessage_2eproto();  return *default_instance_;
}

ReqHandselAwardHistory* ReqHandselAwardHistory::default_instance_ = NULL;

ReqHandselAwardHistory* ReqHandselAwardHistory::New() const {
  return new ReqHandselAwardHistory;
}

void ReqHandselAwardHistory::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 0u;
    rows_ = 20u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReqHandselAwardHistory::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_rows;
        break;
      }
      
      // optional uint32 rows = 2 [default = 20];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_rows:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &rows_)));
          set_has_rows();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ReqHandselAwardHistory::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->type(), output);
  }
  
  // optional uint32 rows = 2 [default = 20];
  if (has_rows()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->rows(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ReqHandselAwardHistory::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->type(), target);
  }
  
  // optional uint32 rows = 2 [default = 20];
  if (has_rows()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->rows(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ReqHandselAwardHistory::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->type());
    }
    
    // optional uint32 rows = 2 [default = 20];
    if (has_rows()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->rows());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReqHandselAwardHistory::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReqHandselAwardHistory* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReqHandselAwardHistory*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReqHandselAwardHistory::MergeFrom(const ReqHandselAwardHistory& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_rows()) {
      set_rows(from.rows());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReqHandselAwardHistory::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqHandselAwardHistory::CopyFrom(const ReqHandselAwardHistory& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqHandselAwardHistory::IsInitialized() const {
  
  return true;
}

void ReqHandselAwardHistory::Swap(ReqHandselAwardHistory* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(rows_, other->rows_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReqHandselAwardHistory::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReqHandselAwardHistory_descriptor_;
  metadata.reflection = ReqHandselAwardHistory_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AckHandselAwardHistory_HandselAward::kSerialFieldNumber;
const int AckHandselAwardHistory_HandselAward::kUsernameFieldNumber;
const int AckHandselAwardHistory_HandselAward::kHappenTimeFieldNumber;
const int AckHandselAwardHistory_HandselAward::kAwardMoneyFieldNumber;
const int AckHandselAwardHistory_HandselAward::kHandselPoolFieldNumber;
#endif  // !_MSC_VER

AckHandselAwardHistory_HandselAward::AckHandselAwardHistory_HandselAward()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AckHandselAwardHistory_HandselAward::InitAsDefaultInstance() {
}

AckHandselAwardHistory_HandselAward::AckHandselAwardHistory_HandselAward(const AckHandselAwardHistory_HandselAward& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AckHandselAwardHistory_HandselAward::SharedCtor() {
  _cached_size_ = 0;
  serial_ = 0u;
  username_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  happentime_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  awardmoney_ = GOOGLE_ULONGLONG(0);
  handselpool_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AckHandselAwardHistory_HandselAward::~AckHandselAwardHistory_HandselAward() {
  SharedDtor();
}

void AckHandselAwardHistory_HandselAward::SharedDtor() {
  if (username_ != &::google::protobuf::internal::kEmptyString) {
    delete username_;
  }
  if (happentime_ != &::google::protobuf::internal::kEmptyString) {
    delete happentime_;
  }
  if (this != default_instance_) {
  }
}

void AckHandselAwardHistory_HandselAward::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AckHandselAwardHistory_HandselAward::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AckHandselAwardHistory_HandselAward_descriptor_;
}

const AckHandselAwardHistory_HandselAward& AckHandselAwardHistory_HandselAward::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ClownServerMessage_2eproto();  return *default_instance_;
}

AckHandselAwardHistory_HandselAward* AckHandselAwardHistory_HandselAward::default_instance_ = NULL;

AckHandselAwardHistory_HandselAward* AckHandselAwardHistory_HandselAward::New() const {
  return new AckHandselAwardHistory_HandselAward;
}

void AckHandselAwardHistory_HandselAward::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    serial_ = 0u;
    if (has_username()) {
      if (username_ != &::google::protobuf::internal::kEmptyString) {
        username_->clear();
      }
    }
    if (has_happentime()) {
      if (happentime_ != &::google::protobuf::internal::kEmptyString) {
        happentime_->clear();
      }
    }
    awardmoney_ = GOOGLE_ULONGLONG(0);
    handselpool_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AckHandselAwardHistory_HandselAward::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 serial = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &serial_)));
          set_has_serial();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_username;
        break;
      }
      
      // required string username = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_username:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_username()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->username().data(), this->username().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_happenTime;
        break;
      }
      
      // required string happenTime = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_happenTime:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_happentime()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->happentime().data(), this->happentime().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_awardMoney;
        break;
      }
      
      // required uint64 awardMoney = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_awardMoney:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &awardmoney_)));
          set_has_awardmoney();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_handselPool;
        break;
      }
      
      // required uint64 handselPool = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_handselPool:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &handselpool_)));
          set_has_handselpool();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AckHandselAwardHistory_HandselAward::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 serial = 1;
  if (has_serial()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->serial(), output);
  }
  
  // required string username = 2;
  if (has_username()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->username().data(), this->username().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->username(), output);
  }
  
  // required string happenTime = 3;
  if (has_happentime()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->happentime().data(), this->happentime().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->happentime(), output);
  }
  
  // required uint64 awardMoney = 4;
  if (has_awardmoney()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->awardmoney(), output);
  }
  
  // required uint64 handselPool = 5;
  if (has_handselpool()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->handselpool(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AckHandselAwardHistory_HandselAward::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 serial = 1;
  if (has_serial()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->serial(), target);
  }
  
  // required string username = 2;
  if (has_username()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->username().data(), this->username().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->username(), target);
  }
  
  // required string happenTime = 3;
  if (has_happentime()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->happentime().data(), this->happentime().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->happentime(), target);
  }
  
  // required uint64 awardMoney = 4;
  if (has_awardmoney()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->awardmoney(), target);
  }
  
  // required uint64 handselPool = 5;
  if (has_handselpool()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->handselpool(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AckHandselAwardHistory_HandselAward::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 serial = 1;
    if (has_serial()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->serial());
    }
    
    // required string username = 2;
    if (has_username()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->username());
    }
    
    // required string happenTime = 3;
    if (has_happentime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->happentime());
    }
    
    // required uint64 awardMoney = 4;
    if (has_awardmoney()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->awardmoney());
    }
    
    // required uint64 handselPool = 5;
    if (has_handselpool()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->handselpool());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AckHandselAwardHistory_HandselAward::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AckHandselAwardHistory_HandselAward* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AckHandselAwardHistory_HandselAward*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AckHandselAwardHistory_HandselAward::MergeFrom(const AckHandselAwardHistory_HandselAward& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_serial()) {
      set_serial(from.serial());
    }
    if (from.has_username()) {
      set_username(from.username());
    }
    if (from.has_happentime()) {
      set_happentime(from.happentime());
    }
    if (from.has_awardmoney()) {
      set_awardmoney(from.awardmoney());
    }
    if (from.has_handselpool()) {
      set_handselpool(from.handselpool());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AckHandselAwardHistory_HandselAward::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AckHandselAwardHistory_HandselAward::CopyFrom(const AckHandselAwardHistory_HandselAward& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AckHandselAwardHistory_HandselAward::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;
  
  return true;
}

void AckHandselAwardHistory_HandselAward::Swap(AckHandselAwardHistory_HandselAward* other) {
  if (other != this) {
    std::swap(serial_, other->serial_);
    std::swap(username_, other->username_);
    std::swap(happentime_, other->happentime_);
    std::swap(awardmoney_, other->awardmoney_);
    std::swap(handselpool_, other->handselpool_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AckHandselAwardHistory_HandselAward::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AckHandselAwardHistory_HandselAward_descriptor_;
  metadata.reflection = AckHandselAwardHistory_HandselAward_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int AckHandselAwardHistory::kTypeFieldNumber;
const int AckHandselAwardHistory::kHistoryFieldNumber;
#endif  // !_MSC_VER

AckHandselAwardHistory::AckHandselAwardHistory()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AckHandselAwardHistory::InitAsDefaultInstance() {
}

AckHandselAwardHistory::AckHandselAwardHistory(const AckHandselAwardHistory& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AckHandselAwardHistory::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AckHandselAwardHistory::~AckHandselAwardHistory() {
  SharedDtor();
}

void AckHandselAwardHistory::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AckHandselAwardHistory::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AckHandselAwardHistory::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AckHandselAwardHistory_descriptor_;
}

const AckHandselAwardHistory& AckHandselAwardHistory::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ClownServerMessage_2eproto();  return *default_instance_;
}

AckHandselAwardHistory* AckHandselAwardHistory::default_instance_ = NULL;

AckHandselAwardHistory* AckHandselAwardHistory::New() const {
  return new AckHandselAwardHistory;
}

void AckHandselAwardHistory::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 0u;
  }
  history_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AckHandselAwardHistory::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 type = 1 [default = 0];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_history;
        break;
      }
      
      // repeated .com.ourgame.clown.msg.AckHandselAwardHistory.HandselAward history = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_history:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_history()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_history;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AckHandselAwardHistory::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 type = 1 [default = 0];
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->type(), output);
  }
  
  // repeated .com.ourgame.clown.msg.AckHandselAwardHistory.HandselAward history = 2;
  for (int i = 0; i < this->history_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->history(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AckHandselAwardHistory::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 type = 1 [default = 0];
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->type(), target);
  }
  
  // repeated .com.ourgame.clown.msg.AckHandselAwardHistory.HandselAward history = 2;
  for (int i = 0; i < this->history_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->history(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AckHandselAwardHistory::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 type = 1 [default = 0];
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->type());
    }
    
  }
  // repeated .com.ourgame.clown.msg.AckHandselAwardHistory.HandselAward history = 2;
  total_size += 1 * this->history_size();
  for (int i = 0; i < this->history_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->history(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AckHandselAwardHistory::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AckHandselAwardHistory* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AckHandselAwardHistory*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AckHandselAwardHistory::MergeFrom(const AckHandselAwardHistory& from) {
  GOOGLE_CHECK_NE(&from, this);
  history_.MergeFrom(from.history_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AckHandselAwardHistory::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AckHandselAwardHistory::CopyFrom(const AckHandselAwardHistory& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AckHandselAwardHistory::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  for (int i = 0; i < history_size(); i++) {
    if (!this->history(i).IsInitialized()) return false;
  }
  return true;
}

void AckHandselAwardHistory::Swap(AckHandselAwardHistory* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    history_.Swap(&other->history_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AckHandselAwardHistory::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AckHandselAwardHistory_descriptor_;
  metadata.reflection = AckHandselAwardHistory_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AckIncreaseExpActivity::kLevelFieldNumber;
const int AckIncreaseExpActivity::kOrLevFieldNumber;
const int AckIncreaseExpActivity::kAwardFieldNumber;
const int AckIncreaseExpActivity::kCurExpFieldNumber;
const int AckIncreaseExpActivity::kMaxExpFieldNumber;
const int AckIncreaseExpActivity::kTitleFieldNumber;
#endif  // !_MSC_VER

AckIncreaseExpActivity::AckIncreaseExpActivity()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AckIncreaseExpActivity::InitAsDefaultInstance() {
}

AckIncreaseExpActivity::AckIncreaseExpActivity(const AckIncreaseExpActivity& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AckIncreaseExpActivity::SharedCtor() {
  _cached_size_ = 0;
  level_ = 0;
  orlev_ = 0;
  award_ = GOOGLE_LONGLONG(0);
  curexp_ = GOOGLE_LONGLONG(0);
  maxexp_ = GOOGLE_LONGLONG(0);
  title_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AckIncreaseExpActivity::~AckIncreaseExpActivity() {
  SharedDtor();
}

void AckIncreaseExpActivity::SharedDtor() {
  if (title_ != &::google::protobuf::internal::kEmptyString) {
    delete title_;
  }
  if (this != default_instance_) {
  }
}

void AckIncreaseExpActivity::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AckIncreaseExpActivity::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AckIncreaseExpActivity_descriptor_;
}

const AckIncreaseExpActivity& AckIncreaseExpActivity::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ClownServerMessage_2eproto();  return *default_instance_;
}

AckIncreaseExpActivity* AckIncreaseExpActivity::default_instance_ = NULL;

AckIncreaseExpActivity* AckIncreaseExpActivity::New() const {
  return new AckIncreaseExpActivity;
}

void AckIncreaseExpActivity::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    level_ = 0;
    orlev_ = 0;
    award_ = GOOGLE_LONGLONG(0);
    curexp_ = GOOGLE_LONGLONG(0);
    maxexp_ = GOOGLE_LONGLONG(0);
    if (has_title()) {
      if (title_ != &::google::protobuf::internal::kEmptyString) {
        title_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AckIncreaseExpActivity::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 level = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_orLev;
        break;
      }
      
      // required int32 orLev = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_orLev:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &orlev_)));
          set_has_orlev();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_award;
        break;
      }
      
      // required int64 award = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_award:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &award_)));
          set_has_award();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_curExp;
        break;
      }
      
      // required int64 curExp = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_curExp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &curexp_)));
          set_has_curexp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_maxExp;
        break;
      }
      
      // required int64 maxExp = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_maxExp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &maxexp_)));
          set_has_maxexp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_title;
        break;
      }
      
      // required string title = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_title:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_title()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->title().data(), this->title().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AckIncreaseExpActivity::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 level = 1;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->level(), output);
  }
  
  // required int32 orLev = 2;
  if (has_orlev()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->orlev(), output);
  }
  
  // required int64 award = 3;
  if (has_award()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->award(), output);
  }
  
  // required int64 curExp = 4;
  if (has_curexp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->curexp(), output);
  }
  
  // required int64 maxExp = 5;
  if (has_maxexp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(5, this->maxexp(), output);
  }
  
  // required string title = 6;
  if (has_title()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->title().data(), this->title().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->title(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AckIncreaseExpActivity::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 level = 1;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->level(), target);
  }
  
  // required int32 orLev = 2;
  if (has_orlev()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->orlev(), target);
  }
  
  // required int64 award = 3;
  if (has_award()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->award(), target);
  }
  
  // required int64 curExp = 4;
  if (has_curexp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->curexp(), target);
  }
  
  // required int64 maxExp = 5;
  if (has_maxexp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(5, this->maxexp(), target);
  }
  
  // required string title = 6;
  if (has_title()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->title().data(), this->title().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->title(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AckIncreaseExpActivity::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 level = 1;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->level());
    }
    
    // required int32 orLev = 2;
    if (has_orlev()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->orlev());
    }
    
    // required int64 award = 3;
    if (has_award()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->award());
    }
    
    // required int64 curExp = 4;
    if (has_curexp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->curexp());
    }
    
    // required int64 maxExp = 5;
    if (has_maxexp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->maxexp());
    }
    
    // required string title = 6;
    if (has_title()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->title());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AckIncreaseExpActivity::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AckIncreaseExpActivity* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AckIncreaseExpActivity*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AckIncreaseExpActivity::MergeFrom(const AckIncreaseExpActivity& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_orlev()) {
      set_orlev(from.orlev());
    }
    if (from.has_award()) {
      set_award(from.award());
    }
    if (from.has_curexp()) {
      set_curexp(from.curexp());
    }
    if (from.has_maxexp()) {
      set_maxexp(from.maxexp());
    }
    if (from.has_title()) {
      set_title(from.title());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AckIncreaseExpActivity::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AckIncreaseExpActivity::CopyFrom(const AckIncreaseExpActivity& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AckIncreaseExpActivity::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000003f) != 0x0000003f) return false;
  
  return true;
}

void AckIncreaseExpActivity::Swap(AckIncreaseExpActivity* other) {
  if (other != this) {
    std::swap(level_, other->level_);
    std::swap(orlev_, other->orlev_);
    std::swap(award_, other->award_);
    std::swap(curexp_, other->curexp_);
    std::swap(maxexp_, other->maxexp_);
    std::swap(title_, other->title_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AckIncreaseExpActivity::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AckIncreaseExpActivity_descriptor_;
  metadata.reflection = AckIncreaseExpActivity_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

ReqDegrade::ReqDegrade()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ReqDegrade::InitAsDefaultInstance() {
}

ReqDegrade::ReqDegrade(const ReqDegrade& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ReqDegrade::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReqDegrade::~ReqDegrade() {
  SharedDtor();
}

void ReqDegrade::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ReqDegrade::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReqDegrade::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReqDegrade_descriptor_;
}

const ReqDegrade& ReqDegrade::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ClownServerMessage_2eproto();  return *default_instance_;
}

ReqDegrade* ReqDegrade::default_instance_ = NULL;

ReqDegrade* ReqDegrade::New() const {
  return new ReqDegrade;
}

void ReqDegrade::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReqDegrade::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void ReqDegrade::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ReqDegrade::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ReqDegrade::ByteSize() const {
  int total_size = 0;
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReqDegrade::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReqDegrade* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReqDegrade*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReqDegrade::MergeFrom(const ReqDegrade& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReqDegrade::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqDegrade::CopyFrom(const ReqDegrade& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqDegrade::IsInitialized() const {
  
  return true;
}

void ReqDegrade::Swap(ReqDegrade* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReqDegrade::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReqDegrade_descriptor_;
  metadata.reflection = ReqDegrade_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

ReqNewActivityInfo::ReqNewActivityInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ReqNewActivityInfo::InitAsDefaultInstance() {
}

ReqNewActivityInfo::ReqNewActivityInfo(const ReqNewActivityInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ReqNewActivityInfo::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReqNewActivityInfo::~ReqNewActivityInfo() {
  SharedDtor();
}

void ReqNewActivityInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ReqNewActivityInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReqNewActivityInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReqNewActivityInfo_descriptor_;
}

const ReqNewActivityInfo& ReqNewActivityInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ClownServerMessage_2eproto();  return *default_instance_;
}

ReqNewActivityInfo* ReqNewActivityInfo::default_instance_ = NULL;

ReqNewActivityInfo* ReqNewActivityInfo::New() const {
  return new ReqNewActivityInfo;
}

void ReqNewActivityInfo::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReqNewActivityInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void ReqNewActivityInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ReqNewActivityInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ReqNewActivityInfo::ByteSize() const {
  int total_size = 0;
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReqNewActivityInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReqNewActivityInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReqNewActivityInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReqNewActivityInfo::MergeFrom(const ReqNewActivityInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReqNewActivityInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqNewActivityInfo::CopyFrom(const ReqNewActivityInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqNewActivityInfo::IsInitialized() const {
  
  return true;
}

void ReqNewActivityInfo::Swap(ReqNewActivityInfo* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReqNewActivityInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReqNewActivityInfo_descriptor_;
  metadata.reflection = ReqNewActivityInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AckNewActivityInfo_NewActivity::kActIdFieldNumber;
const int AckNewActivityInfo_NewActivity::kOpenFieldNumber;
const int AckNewActivityInfo_NewActivity::kTitleFieldNumber;
const int AckNewActivityInfo_NewActivity::kCurExpFieldNumber;
const int AckNewActivityInfo_NewActivity::kMaxExpFieldNumber;
#endif  // !_MSC_VER

AckNewActivityInfo_NewActivity::AckNewActivityInfo_NewActivity()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AckNewActivityInfo_NewActivity::InitAsDefaultInstance() {
}

AckNewActivityInfo_NewActivity::AckNewActivityInfo_NewActivity(const AckNewActivityInfo_NewActivity& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AckNewActivityInfo_NewActivity::SharedCtor() {
  _cached_size_ = 0;
  actid_ = 0;
  open_ = false;
  title_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  curexp_ = GOOGLE_LONGLONG(0);
  maxexp_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AckNewActivityInfo_NewActivity::~AckNewActivityInfo_NewActivity() {
  SharedDtor();
}

void AckNewActivityInfo_NewActivity::SharedDtor() {
  if (title_ != &::google::protobuf::internal::kEmptyString) {
    delete title_;
  }
  if (this != default_instance_) {
  }
}

void AckNewActivityInfo_NewActivity::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AckNewActivityInfo_NewActivity::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AckNewActivityInfo_NewActivity_descriptor_;
}

const AckNewActivityInfo_NewActivity& AckNewActivityInfo_NewActivity::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ClownServerMessage_2eproto();  return *default_instance_;
}

AckNewActivityInfo_NewActivity* AckNewActivityInfo_NewActivity::default_instance_ = NULL;

AckNewActivityInfo_NewActivity* AckNewActivityInfo_NewActivity::New() const {
  return new AckNewActivityInfo_NewActivity;
}

void AckNewActivityInfo_NewActivity::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    actid_ = 0;
    open_ = false;
    if (has_title()) {
      if (title_ != &::google::protobuf::internal::kEmptyString) {
        title_->clear();
      }
    }
    curexp_ = GOOGLE_LONGLONG(0);
    maxexp_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AckNewActivityInfo_NewActivity::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 actId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &actid_)));
          set_has_actid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_open;
        break;
      }
      
      // required bool open = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_open:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &open_)));
          set_has_open();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_title;
        break;
      }
      
      // required string title = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_title:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_title()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->title().data(), this->title().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_curExp;
        break;
      }
      
      // required int64 curExp = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_curExp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &curexp_)));
          set_has_curexp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_maxExp;
        break;
      }
      
      // required int64 maxExp = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_maxExp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &maxexp_)));
          set_has_maxexp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AckNewActivityInfo_NewActivity::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 actId = 1;
  if (has_actid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->actid(), output);
  }
  
  // required bool open = 2;
  if (has_open()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->open(), output);
  }
  
  // required string title = 3;
  if (has_title()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->title().data(), this->title().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->title(), output);
  }
  
  // required int64 curExp = 4;
  if (has_curexp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->curexp(), output);
  }
  
  // required int64 maxExp = 5;
  if (has_maxexp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(5, this->maxexp(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AckNewActivityInfo_NewActivity::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 actId = 1;
  if (has_actid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->actid(), target);
  }
  
  // required bool open = 2;
  if (has_open()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->open(), target);
  }
  
  // required string title = 3;
  if (has_title()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->title().data(), this->title().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->title(), target);
  }
  
  // required int64 curExp = 4;
  if (has_curexp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->curexp(), target);
  }
  
  // required int64 maxExp = 5;
  if (has_maxexp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(5, this->maxexp(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AckNewActivityInfo_NewActivity::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 actId = 1;
    if (has_actid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->actid());
    }
    
    // required bool open = 2;
    if (has_open()) {
      total_size += 1 + 1;
    }
    
    // required string title = 3;
    if (has_title()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->title());
    }
    
    // required int64 curExp = 4;
    if (has_curexp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->curexp());
    }
    
    // required int64 maxExp = 5;
    if (has_maxexp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->maxexp());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AckNewActivityInfo_NewActivity::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AckNewActivityInfo_NewActivity* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AckNewActivityInfo_NewActivity*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AckNewActivityInfo_NewActivity::MergeFrom(const AckNewActivityInfo_NewActivity& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_actid()) {
      set_actid(from.actid());
    }
    if (from.has_open()) {
      set_open(from.open());
    }
    if (from.has_title()) {
      set_title(from.title());
    }
    if (from.has_curexp()) {
      set_curexp(from.curexp());
    }
    if (from.has_maxexp()) {
      set_maxexp(from.maxexp());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AckNewActivityInfo_NewActivity::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AckNewActivityInfo_NewActivity::CopyFrom(const AckNewActivityInfo_NewActivity& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AckNewActivityInfo_NewActivity::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;
  
  return true;
}

void AckNewActivityInfo_NewActivity::Swap(AckNewActivityInfo_NewActivity* other) {
  if (other != this) {
    std::swap(actid_, other->actid_);
    std::swap(open_, other->open_);
    std::swap(title_, other->title_);
    std::swap(curexp_, other->curexp_);
    std::swap(maxexp_, other->maxexp_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AckNewActivityInfo_NewActivity::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AckNewActivityInfo_NewActivity_descriptor_;
  metadata.reflection = AckNewActivityInfo_NewActivity_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int AckNewActivityInfo::kNewActivityListFieldNumber;
#endif  // !_MSC_VER

AckNewActivityInfo::AckNewActivityInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AckNewActivityInfo::InitAsDefaultInstance() {
}

AckNewActivityInfo::AckNewActivityInfo(const AckNewActivityInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AckNewActivityInfo::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AckNewActivityInfo::~AckNewActivityInfo() {
  SharedDtor();
}

void AckNewActivityInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AckNewActivityInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AckNewActivityInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AckNewActivityInfo_descriptor_;
}

const AckNewActivityInfo& AckNewActivityInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ClownServerMessage_2eproto();  return *default_instance_;
}

AckNewActivityInfo* AckNewActivityInfo::default_instance_ = NULL;

AckNewActivityInfo* AckNewActivityInfo::New() const {
  return new AckNewActivityInfo;
}

void AckNewActivityInfo::Clear() {
  newactivitylist_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AckNewActivityInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .com.ourgame.clown.msg.AckNewActivityInfo.NewActivity newActivityList = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_newActivityList:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_newactivitylist()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_newActivityList;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AckNewActivityInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .com.ourgame.clown.msg.AckNewActivityInfo.NewActivity newActivityList = 1;
  for (int i = 0; i < this->newactivitylist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->newactivitylist(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AckNewActivityInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .com.ourgame.clown.msg.AckNewActivityInfo.NewActivity newActivityList = 1;
  for (int i = 0; i < this->newactivitylist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->newactivitylist(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AckNewActivityInfo::ByteSize() const {
  int total_size = 0;
  
  // repeated .com.ourgame.clown.msg.AckNewActivityInfo.NewActivity newActivityList = 1;
  total_size += 1 * this->newactivitylist_size();
  for (int i = 0; i < this->newactivitylist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->newactivitylist(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AckNewActivityInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AckNewActivityInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AckNewActivityInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AckNewActivityInfo::MergeFrom(const AckNewActivityInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  newactivitylist_.MergeFrom(from.newactivitylist_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AckNewActivityInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AckNewActivityInfo::CopyFrom(const AckNewActivityInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AckNewActivityInfo::IsInitialized() const {
  
  for (int i = 0; i < newactivitylist_size(); i++) {
    if (!this->newactivitylist(i).IsInitialized()) return false;
  }
  return true;
}

void AckNewActivityInfo::Swap(AckNewActivityInfo* other) {
  if (other != this) {
    newactivitylist_.Swap(&other->newactivitylist_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AckNewActivityInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AckNewActivityInfo_descriptor_;
  metadata.reflection = AckNewActivityInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

ReqBox::ReqBox()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ReqBox::InitAsDefaultInstance() {
}

ReqBox::ReqBox(const ReqBox& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ReqBox::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReqBox::~ReqBox() {
  SharedDtor();
}

void ReqBox::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ReqBox::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReqBox::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReqBox_descriptor_;
}

const ReqBox& ReqBox::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ClownServerMessage_2eproto();  return *default_instance_;
}

ReqBox* ReqBox::default_instance_ = NULL;

ReqBox* ReqBox::New() const {
  return new ReqBox;
}

void ReqBox::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReqBox::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void ReqBox::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ReqBox::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ReqBox::ByteSize() const {
  int total_size = 0;
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReqBox::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReqBox* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReqBox*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReqBox::MergeFrom(const ReqBox& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReqBox::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqBox::CopyFrom(const ReqBox& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqBox::IsInitialized() const {
  
  return true;
}

void ReqBox::Swap(ReqBox* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReqBox::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReqBox_descriptor_;
  metadata.reflection = ReqBox_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AckBox::kAwardFieldNumber;
const int AckBox::kBoxCountFieldNumber;
#endif  // !_MSC_VER

AckBox::AckBox()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AckBox::InitAsDefaultInstance() {
}

AckBox::AckBox(const AckBox& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AckBox::SharedCtor() {
  _cached_size_ = 0;
  award_ = GOOGLE_LONGLONG(0);
  boxcount_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AckBox::~AckBox() {
  SharedDtor();
}

void AckBox::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AckBox::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AckBox::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AckBox_descriptor_;
}

const AckBox& AckBox::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ClownServerMessage_2eproto();  return *default_instance_;
}

AckBox* AckBox::default_instance_ = NULL;

AckBox* AckBox::New() const {
  return new AckBox;
}

void AckBox::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    award_ = GOOGLE_LONGLONG(0);
    boxcount_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AckBox::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 award = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &award_)));
          set_has_award();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_boxCount;
        break;
      }
      
      // required int32 boxCount = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_boxCount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &boxcount_)));
          set_has_boxcount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AckBox::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int64 award = 1;
  if (has_award()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->award(), output);
  }
  
  // required int32 boxCount = 2;
  if (has_boxcount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->boxcount(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AckBox::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int64 award = 1;
  if (has_award()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->award(), target);
  }
  
  // required int32 boxCount = 2;
  if (has_boxcount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->boxcount(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AckBox::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 award = 1;
    if (has_award()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->award());
    }
    
    // required int32 boxCount = 2;
    if (has_boxcount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->boxcount());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AckBox::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AckBox* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AckBox*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AckBox::MergeFrom(const AckBox& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_award()) {
      set_award(from.award());
    }
    if (from.has_boxcount()) {
      set_boxcount(from.boxcount());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AckBox::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AckBox::CopyFrom(const AckBox& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AckBox::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void AckBox::Swap(AckBox* other) {
  if (other != this) {
    std::swap(award_, other->award_);
    std::swap(boxcount_, other->boxcount_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AckBox::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AckBox_descriptor_;
  metadata.reflection = AckBox_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AckUserMoney::kUserMoneyFieldNumber;
#endif  // !_MSC_VER

AckUserMoney::AckUserMoney()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AckUserMoney::InitAsDefaultInstance() {
}

AckUserMoney::AckUserMoney(const AckUserMoney& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AckUserMoney::SharedCtor() {
  _cached_size_ = 0;
  usermoney_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AckUserMoney::~AckUserMoney() {
  SharedDtor();
}

void AckUserMoney::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AckUserMoney::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AckUserMoney::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AckUserMoney_descriptor_;
}

const AckUserMoney& AckUserMoney::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ClownServerMessage_2eproto();  return *default_instance_;
}

AckUserMoney* AckUserMoney::default_instance_ = NULL;

AckUserMoney* AckUserMoney::New() const {
  return new AckUserMoney;
}

void AckUserMoney::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    usermoney_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AckUserMoney::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 userMoney = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &usermoney_)));
          set_has_usermoney();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AckUserMoney::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int64 userMoney = 1;
  if (has_usermoney()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->usermoney(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AckUserMoney::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int64 userMoney = 1;
  if (has_usermoney()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->usermoney(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AckUserMoney::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 userMoney = 1;
    if (has_usermoney()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->usermoney());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AckUserMoney::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AckUserMoney* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AckUserMoney*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AckUserMoney::MergeFrom(const AckUserMoney& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_usermoney()) {
      set_usermoney(from.usermoney());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AckUserMoney::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AckUserMoney::CopyFrom(const AckUserMoney& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AckUserMoney::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void AckUserMoney::Swap(AckUserMoney* other) {
  if (other != this) {
    std::swap(usermoney_, other->usermoney_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AckUserMoney::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AckUserMoney_descriptor_;
  metadata.reflection = AckUserMoney_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AckDegradeTime::kRemainTimeFieldNumber;
#endif  // !_MSC_VER

AckDegradeTime::AckDegradeTime()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AckDegradeTime::InitAsDefaultInstance() {
}

AckDegradeTime::AckDegradeTime(const AckDegradeTime& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AckDegradeTime::SharedCtor() {
  _cached_size_ = 0;
  remaintime_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AckDegradeTime::~AckDegradeTime() {
  SharedDtor();
}

void AckDegradeTime::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AckDegradeTime::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AckDegradeTime::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AckDegradeTime_descriptor_;
}

const AckDegradeTime& AckDegradeTime::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ClownServerMessage_2eproto();  return *default_instance_;
}

AckDegradeTime* AckDegradeTime::default_instance_ = NULL;

AckDegradeTime* AckDegradeTime::New() const {
  return new AckDegradeTime;
}

void AckDegradeTime::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    remaintime_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AckDegradeTime::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 remainTime = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &remaintime_)));
          set_has_remaintime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AckDegradeTime::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 remainTime = 1;
  if (has_remaintime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->remaintime(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AckDegradeTime::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 remainTime = 1;
  if (has_remaintime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->remaintime(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AckDegradeTime::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 remainTime = 1;
    if (has_remaintime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->remaintime());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AckDegradeTime::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AckDegradeTime* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AckDegradeTime*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AckDegradeTime::MergeFrom(const AckDegradeTime& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_remaintime()) {
      set_remaintime(from.remaintime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AckDegradeTime::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AckDegradeTime::CopyFrom(const AckDegradeTime& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AckDegradeTime::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void AckDegradeTime::Swap(AckDegradeTime* other) {
  if (other != this) {
    std::swap(remaintime_, other->remaintime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AckDegradeTime::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AckDegradeTime_descriptor_;
  metadata.reflection = AckDegradeTime_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ReqOrAccordRecharge::kUsernameFieldNumber;
#endif  // !_MSC_VER

ReqOrAccordRecharge::ReqOrAccordRecharge()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ReqOrAccordRecharge::InitAsDefaultInstance() {
}

ReqOrAccordRecharge::ReqOrAccordRecharge(const ReqOrAccordRecharge& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ReqOrAccordRecharge::SharedCtor() {
  _cached_size_ = 0;
  username_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReqOrAccordRecharge::~ReqOrAccordRecharge() {
  SharedDtor();
}

void ReqOrAccordRecharge::SharedDtor() {
  if (username_ != &::google::protobuf::internal::kEmptyString) {
    delete username_;
  }
  if (this != default_instance_) {
  }
}

void ReqOrAccordRecharge::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReqOrAccordRecharge::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReqOrAccordRecharge_descriptor_;
}

const ReqOrAccordRecharge& ReqOrAccordRecharge::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ClownServerMessage_2eproto();  return *default_instance_;
}

ReqOrAccordRecharge* ReqOrAccordRecharge::default_instance_ = NULL;

ReqOrAccordRecharge* ReqOrAccordRecharge::New() const {
  return new ReqOrAccordRecharge;
}

void ReqOrAccordRecharge::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_username()) {
      if (username_ != &::google::protobuf::internal::kEmptyString) {
        username_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReqOrAccordRecharge::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string username = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_username()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->username().data(), this->username().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ReqOrAccordRecharge::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string username = 1;
  if (has_username()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->username().data(), this->username().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->username(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ReqOrAccordRecharge::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string username = 1;
  if (has_username()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->username().data(), this->username().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->username(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ReqOrAccordRecharge::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string username = 1;
    if (has_username()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->username());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReqOrAccordRecharge::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReqOrAccordRecharge* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReqOrAccordRecharge*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReqOrAccordRecharge::MergeFrom(const ReqOrAccordRecharge& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_username()) {
      set_username(from.username());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReqOrAccordRecharge::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqOrAccordRecharge::CopyFrom(const ReqOrAccordRecharge& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqOrAccordRecharge::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void ReqOrAccordRecharge::Swap(ReqOrAccordRecharge* other) {
  if (other != this) {
    std::swap(username_, other->username_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReqOrAccordRecharge::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReqOrAccordRecharge_descriptor_;
  metadata.reflection = ReqOrAccordRecharge_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AckOrAccordRecharge::kOrCanFieldNumber;
#endif  // !_MSC_VER

AckOrAccordRecharge::AckOrAccordRecharge()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AckOrAccordRecharge::InitAsDefaultInstance() {
}

AckOrAccordRecharge::AckOrAccordRecharge(const AckOrAccordRecharge& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AckOrAccordRecharge::SharedCtor() {
  _cached_size_ = 0;
  orcan_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AckOrAccordRecharge::~AckOrAccordRecharge() {
  SharedDtor();
}

void AckOrAccordRecharge::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AckOrAccordRecharge::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AckOrAccordRecharge::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AckOrAccordRecharge_descriptor_;
}

const AckOrAccordRecharge& AckOrAccordRecharge::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ClownServerMessage_2eproto();  return *default_instance_;
}

AckOrAccordRecharge* AckOrAccordRecharge::default_instance_ = NULL;

AckOrAccordRecharge* AckOrAccordRecharge::New() const {
  return new AckOrAccordRecharge;
}

void AckOrAccordRecharge::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    orcan_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AckOrAccordRecharge::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 orCan = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &orcan_)));
          set_has_orcan();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AckOrAccordRecharge::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 orCan = 1;
  if (has_orcan()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->orcan(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AckOrAccordRecharge::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 orCan = 1;
  if (has_orcan()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->orcan(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AckOrAccordRecharge::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 orCan = 1;
    if (has_orcan()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->orcan());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AckOrAccordRecharge::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AckOrAccordRecharge* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AckOrAccordRecharge*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AckOrAccordRecharge::MergeFrom(const AckOrAccordRecharge& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_orcan()) {
      set_orcan(from.orcan());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AckOrAccordRecharge::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AckOrAccordRecharge::CopyFrom(const AckOrAccordRecharge& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AckOrAccordRecharge::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void AckOrAccordRecharge::Swap(AckOrAccordRecharge* other) {
  if (other != this) {
    std::swap(orcan_, other->orcan_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AckOrAccordRecharge::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AckOrAccordRecharge_descriptor_;
  metadata.reflection = AckOrAccordRecharge_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ReqAuthCode::kUsernameFieldNumber;
const int ReqAuthCode::kTelFieldNumber;
#endif  // !_MSC_VER

ReqAuthCode::ReqAuthCode()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ReqAuthCode::InitAsDefaultInstance() {
}

ReqAuthCode::ReqAuthCode(const ReqAuthCode& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ReqAuthCode::SharedCtor() {
  _cached_size_ = 0;
  username_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  tel_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReqAuthCode::~ReqAuthCode() {
  SharedDtor();
}

void ReqAuthCode::SharedDtor() {
  if (username_ != &::google::protobuf::internal::kEmptyString) {
    delete username_;
  }
  if (tel_ != &::google::protobuf::internal::kEmptyString) {
    delete tel_;
  }
  if (this != default_instance_) {
  }
}

void ReqAuthCode::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReqAuthCode::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReqAuthCode_descriptor_;
}

const ReqAuthCode& ReqAuthCode::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ClownServerMessage_2eproto();  return *default_instance_;
}

ReqAuthCode* ReqAuthCode::default_instance_ = NULL;

ReqAuthCode* ReqAuthCode::New() const {
  return new ReqAuthCode;
}

void ReqAuthCode::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_username()) {
      if (username_ != &::google::protobuf::internal::kEmptyString) {
        username_->clear();
      }
    }
    if (has_tel()) {
      if (tel_ != &::google::protobuf::internal::kEmptyString) {
        tel_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReqAuthCode::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string username = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_username()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->username().data(), this->username().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_tel;
        break;
      }
      
      // required string tel = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_tel:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_tel()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->tel().data(), this->tel().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ReqAuthCode::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string username = 1;
  if (has_username()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->username().data(), this->username().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->username(), output);
  }
  
  // required string tel = 2;
  if (has_tel()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->tel().data(), this->tel().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->tel(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ReqAuthCode::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string username = 1;
  if (has_username()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->username().data(), this->username().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->username(), target);
  }
  
  // required string tel = 2;
  if (has_tel()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->tel().data(), this->tel().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->tel(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ReqAuthCode::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string username = 1;
    if (has_username()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->username());
    }
    
    // required string tel = 2;
    if (has_tel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->tel());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReqAuthCode::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReqAuthCode* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReqAuthCode*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReqAuthCode::MergeFrom(const ReqAuthCode& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_username()) {
      set_username(from.username());
    }
    if (from.has_tel()) {
      set_tel(from.tel());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReqAuthCode::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqAuthCode::CopyFrom(const ReqAuthCode& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqAuthCode::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void ReqAuthCode::Swap(ReqAuthCode* other) {
  if (other != this) {
    std::swap(username_, other->username_);
    std::swap(tel_, other->tel_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReqAuthCode::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReqAuthCode_descriptor_;
  metadata.reflection = ReqAuthCode_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AckAuthCode::kSucessFieldNumber;
const int AckAuthCode::kReasonFieldNumber;
#endif  // !_MSC_VER

AckAuthCode::AckAuthCode()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AckAuthCode::InitAsDefaultInstance() {
}

AckAuthCode::AckAuthCode(const AckAuthCode& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AckAuthCode::SharedCtor() {
  _cached_size_ = 0;
  sucess_ = 0;
  reason_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AckAuthCode::~AckAuthCode() {
  SharedDtor();
}

void AckAuthCode::SharedDtor() {
  if (reason_ != &::google::protobuf::internal::kEmptyString) {
    delete reason_;
  }
  if (this != default_instance_) {
  }
}

void AckAuthCode::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AckAuthCode::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AckAuthCode_descriptor_;
}

const AckAuthCode& AckAuthCode::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ClownServerMessage_2eproto();  return *default_instance_;
}

AckAuthCode* AckAuthCode::default_instance_ = NULL;

AckAuthCode* AckAuthCode::New() const {
  return new AckAuthCode;
}

void AckAuthCode::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    sucess_ = 0;
    if (has_reason()) {
      if (reason_ != &::google::protobuf::internal::kEmptyString) {
        reason_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AckAuthCode::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 sucess = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sucess_)));
          set_has_sucess();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_reason;
        break;
      }
      
      // required string reason = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_reason:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_reason()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->reason().data(), this->reason().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AckAuthCode::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 sucess = 1;
  if (has_sucess()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->sucess(), output);
  }
  
  // required string reason = 3;
  if (has_reason()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->reason().data(), this->reason().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->reason(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AckAuthCode::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 sucess = 1;
  if (has_sucess()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->sucess(), target);
  }
  
  // required string reason = 3;
  if (has_reason()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->reason().data(), this->reason().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->reason(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AckAuthCode::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 sucess = 1;
    if (has_sucess()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sucess());
    }
    
    // required string reason = 3;
    if (has_reason()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->reason());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AckAuthCode::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AckAuthCode* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AckAuthCode*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AckAuthCode::MergeFrom(const AckAuthCode& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_sucess()) {
      set_sucess(from.sucess());
    }
    if (from.has_reason()) {
      set_reason(from.reason());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AckAuthCode::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AckAuthCode::CopyFrom(const AckAuthCode& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AckAuthCode::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void AckAuthCode::Swap(AckAuthCode* other) {
  if (other != this) {
    std::swap(sucess_, other->sucess_);
    std::swap(reason_, other->reason_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AckAuthCode::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AckAuthCode_descriptor_;
  metadata.reflection = AckAuthCode_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ReqUserRecharge::kUsernameFieldNumber;
const int ReqUserRecharge::kAuthCodeFieldNumber;
#endif  // !_MSC_VER

ReqUserRecharge::ReqUserRecharge()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ReqUserRecharge::InitAsDefaultInstance() {
}

ReqUserRecharge::ReqUserRecharge(const ReqUserRecharge& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ReqUserRecharge::SharedCtor() {
  _cached_size_ = 0;
  username_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  authcode_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReqUserRecharge::~ReqUserRecharge() {
  SharedDtor();
}

void ReqUserRecharge::SharedDtor() {
  if (username_ != &::google::protobuf::internal::kEmptyString) {
    delete username_;
  }
  if (authcode_ != &::google::protobuf::internal::kEmptyString) {
    delete authcode_;
  }
  if (this != default_instance_) {
  }
}

void ReqUserRecharge::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReqUserRecharge::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReqUserRecharge_descriptor_;
}

const ReqUserRecharge& ReqUserRecharge::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ClownServerMessage_2eproto();  return *default_instance_;
}

ReqUserRecharge* ReqUserRecharge::default_instance_ = NULL;

ReqUserRecharge* ReqUserRecharge::New() const {
  return new ReqUserRecharge;
}

void ReqUserRecharge::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_username()) {
      if (username_ != &::google::protobuf::internal::kEmptyString) {
        username_->clear();
      }
    }
    if (has_authcode()) {
      if (authcode_ != &::google::protobuf::internal::kEmptyString) {
        authcode_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReqUserRecharge::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string username = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_username()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->username().data(), this->username().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_authCode;
        break;
      }
      
      // required string authCode = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_authCode:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_authcode()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->authcode().data(), this->authcode().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ReqUserRecharge::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string username = 1;
  if (has_username()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->username().data(), this->username().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->username(), output);
  }
  
  // required string authCode = 2;
  if (has_authcode()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->authcode().data(), this->authcode().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->authcode(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ReqUserRecharge::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string username = 1;
  if (has_username()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->username().data(), this->username().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->username(), target);
  }
  
  // required string authCode = 2;
  if (has_authcode()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->authcode().data(), this->authcode().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->authcode(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ReqUserRecharge::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string username = 1;
    if (has_username()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->username());
    }
    
    // required string authCode = 2;
    if (has_authcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->authcode());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReqUserRecharge::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReqUserRecharge* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReqUserRecharge*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReqUserRecharge::MergeFrom(const ReqUserRecharge& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_username()) {
      set_username(from.username());
    }
    if (from.has_authcode()) {
      set_authcode(from.authcode());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReqUserRecharge::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqUserRecharge::CopyFrom(const ReqUserRecharge& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqUserRecharge::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void ReqUserRecharge::Swap(ReqUserRecharge* other) {
  if (other != this) {
    std::swap(username_, other->username_);
    std::swap(authcode_, other->authcode_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReqUserRecharge::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReqUserRecharge_descriptor_;
  metadata.reflection = ReqUserRecharge_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AckUserRecharge::kFrechargeFieldNumber;
const int AckUserRecharge::kMoneyFieldNumber;
const int AckUserRecharge::kTimesFieldNumber;
#endif  // !_MSC_VER

AckUserRecharge::AckUserRecharge()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AckUserRecharge::InitAsDefaultInstance() {
}

AckUserRecharge::AckUserRecharge(const AckUserRecharge& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AckUserRecharge::SharedCtor() {
  _cached_size_ = 0;
  frecharge_ = GOOGLE_LONGLONG(0);
  money_ = GOOGLE_LONGLONG(0);
  times_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AckUserRecharge::~AckUserRecharge() {
  SharedDtor();
}

void AckUserRecharge::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AckUserRecharge::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AckUserRecharge::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AckUserRecharge_descriptor_;
}

const AckUserRecharge& AckUserRecharge::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ClownServerMessage_2eproto();  return *default_instance_;
}

AckUserRecharge* AckUserRecharge::default_instance_ = NULL;

AckUserRecharge* AckUserRecharge::New() const {
  return new AckUserRecharge;
}

void AckUserRecharge::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    frecharge_ = GOOGLE_LONGLONG(0);
    money_ = GOOGLE_LONGLONG(0);
    times_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AckUserRecharge::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 frecharge = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &frecharge_)));
          set_has_frecharge();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_money;
        break;
      }
      
      // required int64 money = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_money:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &money_)));
          set_has_money();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_times;
        break;
      }
      
      // required int32 times = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_times:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &times_)));
          set_has_times();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AckUserRecharge::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int64 frecharge = 1;
  if (has_frecharge()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->frecharge(), output);
  }
  
  // required int64 money = 2;
  if (has_money()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->money(), output);
  }
  
  // required int32 times = 3;
  if (has_times()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->times(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AckUserRecharge::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int64 frecharge = 1;
  if (has_frecharge()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->frecharge(), target);
  }
  
  // required int64 money = 2;
  if (has_money()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->money(), target);
  }
  
  // required int32 times = 3;
  if (has_times()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->times(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AckUserRecharge::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 frecharge = 1;
    if (has_frecharge()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->frecharge());
    }
    
    // required int64 money = 2;
    if (has_money()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->money());
    }
    
    // required int32 times = 3;
    if (has_times()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->times());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AckUserRecharge::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AckUserRecharge* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AckUserRecharge*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AckUserRecharge::MergeFrom(const AckUserRecharge& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_frecharge()) {
      set_frecharge(from.frecharge());
    }
    if (from.has_money()) {
      set_money(from.money());
    }
    if (from.has_times()) {
      set_times(from.times());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AckUserRecharge::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AckUserRecharge::CopyFrom(const AckUserRecharge& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AckUserRecharge::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  
  return true;
}

void AckUserRecharge::Swap(AckUserRecharge* other) {
  if (other != this) {
    std::swap(frecharge_, other->frecharge_);
    std::swap(money_, other->money_);
    std::swap(times_, other->times_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AckUserRecharge::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AckUserRecharge_descriptor_;
  metadata.reflection = AckUserRecharge_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ReqMobleRecharge::kUsernameFieldNumber;
#endif  // !_MSC_VER

ReqMobleRecharge::ReqMobleRecharge()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ReqMobleRecharge::InitAsDefaultInstance() {
}

ReqMobleRecharge::ReqMobleRecharge(const ReqMobleRecharge& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ReqMobleRecharge::SharedCtor() {
  _cached_size_ = 0;
  username_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReqMobleRecharge::~ReqMobleRecharge() {
  SharedDtor();
}

void ReqMobleRecharge::SharedDtor() {
  if (username_ != &::google::protobuf::internal::kEmptyString) {
    delete username_;
  }
  if (this != default_instance_) {
  }
}

void ReqMobleRecharge::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReqMobleRecharge::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReqMobleRecharge_descriptor_;
}

const ReqMobleRecharge& ReqMobleRecharge::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ClownServerMessage_2eproto();  return *default_instance_;
}

ReqMobleRecharge* ReqMobleRecharge::default_instance_ = NULL;

ReqMobleRecharge* ReqMobleRecharge::New() const {
  return new ReqMobleRecharge;
}

void ReqMobleRecharge::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_username()) {
      if (username_ != &::google::protobuf::internal::kEmptyString) {
        username_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReqMobleRecharge::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string username = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_username()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->username().data(), this->username().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ReqMobleRecharge::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string username = 1;
  if (has_username()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->username().data(), this->username().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->username(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ReqMobleRecharge::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string username = 1;
  if (has_username()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->username().data(), this->username().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->username(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ReqMobleRecharge::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string username = 1;
    if (has_username()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->username());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReqMobleRecharge::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReqMobleRecharge* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReqMobleRecharge*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReqMobleRecharge::MergeFrom(const ReqMobleRecharge& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_username()) {
      set_username(from.username());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReqMobleRecharge::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqMobleRecharge::CopyFrom(const ReqMobleRecharge& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqMobleRecharge::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void ReqMobleRecharge::Swap(ReqMobleRecharge* other) {
  if (other != this) {
    std::swap(username_, other->username_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReqMobleRecharge::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReqMobleRecharge_descriptor_;
  metadata.reflection = ReqMobleRecharge_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AckMobleRecharge::kSuccessFieldNumber;
const int AckMobleRecharge::kReasonFieldNumber;
const int AckMobleRecharge::kMoneyFieldNumber;
#endif  // !_MSC_VER

AckMobleRecharge::AckMobleRecharge()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AckMobleRecharge::InitAsDefaultInstance() {
}

AckMobleRecharge::AckMobleRecharge(const AckMobleRecharge& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AckMobleRecharge::SharedCtor() {
  _cached_size_ = 0;
  success_ = 0;
  reason_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  money_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AckMobleRecharge::~AckMobleRecharge() {
  SharedDtor();
}

void AckMobleRecharge::SharedDtor() {
  if (reason_ != &::google::protobuf::internal::kEmptyString) {
    delete reason_;
  }
  if (this != default_instance_) {
  }
}

void AckMobleRecharge::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AckMobleRecharge::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AckMobleRecharge_descriptor_;
}

const AckMobleRecharge& AckMobleRecharge::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ClownServerMessage_2eproto();  return *default_instance_;
}

AckMobleRecharge* AckMobleRecharge::default_instance_ = NULL;

AckMobleRecharge* AckMobleRecharge::New() const {
  return new AckMobleRecharge;
}

void AckMobleRecharge::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    success_ = 0;
    if (has_reason()) {
      if (reason_ != &::google::protobuf::internal::kEmptyString) {
        reason_->clear();
      }
    }
    money_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AckMobleRecharge::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 success = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &success_)));
          set_has_success();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_reason;
        break;
      }
      
      // optional string reason = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_reason:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_reason()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->reason().data(), this->reason().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_money;
        break;
      }
      
      // optional int64 money = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_money:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &money_)));
          set_has_money();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AckMobleRecharge::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 success = 1;
  if (has_success()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->success(), output);
  }
  
  // optional string reason = 2;
  if (has_reason()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->reason().data(), this->reason().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->reason(), output);
  }
  
  // optional int64 money = 3;
  if (has_money()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->money(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AckMobleRecharge::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 success = 1;
  if (has_success()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->success(), target);
  }
  
  // optional string reason = 2;
  if (has_reason()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->reason().data(), this->reason().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->reason(), target);
  }
  
  // optional int64 money = 3;
  if (has_money()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->money(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AckMobleRecharge::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 success = 1;
    if (has_success()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->success());
    }
    
    // optional string reason = 2;
    if (has_reason()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->reason());
    }
    
    // optional int64 money = 3;
    if (has_money()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->money());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AckMobleRecharge::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AckMobleRecharge* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AckMobleRecharge*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AckMobleRecharge::MergeFrom(const AckMobleRecharge& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_success()) {
      set_success(from.success());
    }
    if (from.has_reason()) {
      set_reason(from.reason());
    }
    if (from.has_money()) {
      set_money(from.money());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AckMobleRecharge::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AckMobleRecharge::CopyFrom(const AckMobleRecharge& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AckMobleRecharge::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void AckMobleRecharge::Swap(AckMobleRecharge* other) {
  if (other != this) {
    std::swap(success_, other->success_);
    std::swap(reason_, other->reason_);
    std::swap(money_, other->money_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AckMobleRecharge::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AckMobleRecharge_descriptor_;
  metadata.reflection = AckMobleRecharge_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ReqPopMobleRecharge::kUsernameFieldNumber;
#endif  // !_MSC_VER

ReqPopMobleRecharge::ReqPopMobleRecharge()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ReqPopMobleRecharge::InitAsDefaultInstance() {
}

ReqPopMobleRecharge::ReqPopMobleRecharge(const ReqPopMobleRecharge& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ReqPopMobleRecharge::SharedCtor() {
  _cached_size_ = 0;
  username_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReqPopMobleRecharge::~ReqPopMobleRecharge() {
  SharedDtor();
}

void ReqPopMobleRecharge::SharedDtor() {
  if (username_ != &::google::protobuf::internal::kEmptyString) {
    delete username_;
  }
  if (this != default_instance_) {
  }
}

void ReqPopMobleRecharge::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReqPopMobleRecharge::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReqPopMobleRecharge_descriptor_;
}

const ReqPopMobleRecharge& ReqPopMobleRecharge::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ClownServerMessage_2eproto();  return *default_instance_;
}

ReqPopMobleRecharge* ReqPopMobleRecharge::default_instance_ = NULL;

ReqPopMobleRecharge* ReqPopMobleRecharge::New() const {
  return new ReqPopMobleRecharge;
}

void ReqPopMobleRecharge::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_username()) {
      if (username_ != &::google::protobuf::internal::kEmptyString) {
        username_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReqPopMobleRecharge::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string username = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_username()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->username().data(), this->username().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ReqPopMobleRecharge::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string username = 1;
  if (has_username()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->username().data(), this->username().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->username(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ReqPopMobleRecharge::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string username = 1;
  if (has_username()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->username().data(), this->username().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->username(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ReqPopMobleRecharge::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string username = 1;
    if (has_username()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->username());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReqPopMobleRecharge::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReqPopMobleRecharge* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReqPopMobleRecharge*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReqPopMobleRecharge::MergeFrom(const ReqPopMobleRecharge& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_username()) {
      set_username(from.username());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReqPopMobleRecharge::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqPopMobleRecharge::CopyFrom(const ReqPopMobleRecharge& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqPopMobleRecharge::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void ReqPopMobleRecharge::Swap(ReqPopMobleRecharge* other) {
  if (other != this) {
    std::swap(username_, other->username_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReqPopMobleRecharge::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReqPopMobleRecharge_descriptor_;
  metadata.reflection = ReqPopMobleRecharge_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AckPopMobleRecharge::kResultFieldNumber;
#endif  // !_MSC_VER

AckPopMobleRecharge::AckPopMobleRecharge()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AckPopMobleRecharge::InitAsDefaultInstance() {
}

AckPopMobleRecharge::AckPopMobleRecharge(const AckPopMobleRecharge& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AckPopMobleRecharge::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AckPopMobleRecharge::~AckPopMobleRecharge() {
  SharedDtor();
}

void AckPopMobleRecharge::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AckPopMobleRecharge::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AckPopMobleRecharge::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AckPopMobleRecharge_descriptor_;
}

const AckPopMobleRecharge& AckPopMobleRecharge::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ClownServerMessage_2eproto();  return *default_instance_;
}

AckPopMobleRecharge* AckPopMobleRecharge::default_instance_ = NULL;

AckPopMobleRecharge* AckPopMobleRecharge::New() const {
  return new AckPopMobleRecharge;
}

void AckPopMobleRecharge::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AckPopMobleRecharge::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AckPopMobleRecharge::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AckPopMobleRecharge::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AckPopMobleRecharge::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AckPopMobleRecharge::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AckPopMobleRecharge* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AckPopMobleRecharge*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AckPopMobleRecharge::MergeFrom(const AckPopMobleRecharge& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AckPopMobleRecharge::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AckPopMobleRecharge::CopyFrom(const AckPopMobleRecharge& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AckPopMobleRecharge::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void AckPopMobleRecharge::Swap(AckPopMobleRecharge* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AckPopMobleRecharge::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AckPopMobleRecharge_descriptor_;
  metadata.reflection = AckPopMobleRecharge_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AckWndAwardNotice::kWndCountFieldNumber;
const int AckWndAwardNotice::kYxdCountFieldNumber;
const int AckWndAwardNotice::kNoticeTypeFieldNumber;
#endif  // !_MSC_VER

AckWndAwardNotice::AckWndAwardNotice()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AckWndAwardNotice::InitAsDefaultInstance() {
}

AckWndAwardNotice::AckWndAwardNotice(const AckWndAwardNotice& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AckWndAwardNotice::SharedCtor() {
  _cached_size_ = 0;
  wndcount_ = GOOGLE_LONGLONG(0);
  yxdcount_ = GOOGLE_LONGLONG(0);
  noticetype_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AckWndAwardNotice::~AckWndAwardNotice() {
  SharedDtor();
}

void AckWndAwardNotice::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AckWndAwardNotice::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AckWndAwardNotice::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AckWndAwardNotice_descriptor_;
}

const AckWndAwardNotice& AckWndAwardNotice::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ClownServerMessage_2eproto();  return *default_instance_;
}

AckWndAwardNotice* AckWndAwardNotice::default_instance_ = NULL;

AckWndAwardNotice* AckWndAwardNotice::New() const {
  return new AckWndAwardNotice;
}

void AckWndAwardNotice::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    wndcount_ = GOOGLE_LONGLONG(0);
    yxdcount_ = GOOGLE_LONGLONG(0);
    noticetype_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AckWndAwardNotice::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 wndCount = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &wndcount_)));
          set_has_wndcount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_yxdCount;
        break;
      }
      
      // required int64 yxdCount = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_yxdCount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &yxdcount_)));
          set_has_yxdcount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_noticeType;
        break;
      }
      
      // required int32 noticeType = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_noticeType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &noticetype_)));
          set_has_noticetype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AckWndAwardNotice::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int64 wndCount = 1;
  if (has_wndcount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->wndcount(), output);
  }
  
  // required int64 yxdCount = 2;
  if (has_yxdcount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->yxdcount(), output);
  }
  
  // required int32 noticeType = 3;
  if (has_noticetype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->noticetype(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AckWndAwardNotice::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int64 wndCount = 1;
  if (has_wndcount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->wndcount(), target);
  }
  
  // required int64 yxdCount = 2;
  if (has_yxdcount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->yxdcount(), target);
  }
  
  // required int32 noticeType = 3;
  if (has_noticetype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->noticetype(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AckWndAwardNotice::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 wndCount = 1;
    if (has_wndcount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->wndcount());
    }
    
    // required int64 yxdCount = 2;
    if (has_yxdcount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->yxdcount());
    }
    
    // required int32 noticeType = 3;
    if (has_noticetype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->noticetype());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AckWndAwardNotice::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AckWndAwardNotice* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AckWndAwardNotice*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AckWndAwardNotice::MergeFrom(const AckWndAwardNotice& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_wndcount()) {
      set_wndcount(from.wndcount());
    }
    if (from.has_yxdcount()) {
      set_yxdcount(from.yxdcount());
    }
    if (from.has_noticetype()) {
      set_noticetype(from.noticetype());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AckWndAwardNotice::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AckWndAwardNotice::CopyFrom(const AckWndAwardNotice& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AckWndAwardNotice::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  
  return true;
}

void AckWndAwardNotice::Swap(AckWndAwardNotice* other) {
  if (other != this) {
    std::swap(wndcount_, other->wndcount_);
    std::swap(yxdcount_, other->yxdcount_);
    std::swap(noticetype_, other->noticetype_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AckWndAwardNotice::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AckWndAwardNotice_descriptor_;
  metadata.reflection = AckWndAwardNotice_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ReqNewGuideResult::kUsernameFieldNumber;
const int ReqNewGuideResult::kResultFieldNumber;
#endif  // !_MSC_VER

ReqNewGuideResult::ReqNewGuideResult()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ReqNewGuideResult::InitAsDefaultInstance() {
}

ReqNewGuideResult::ReqNewGuideResult(const ReqNewGuideResult& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ReqNewGuideResult::SharedCtor() {
  _cached_size_ = 0;
  username_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  result_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReqNewGuideResult::~ReqNewGuideResult() {
  SharedDtor();
}

void ReqNewGuideResult::SharedDtor() {
  if (username_ != &::google::protobuf::internal::kEmptyString) {
    delete username_;
  }
  if (this != default_instance_) {
  }
}

void ReqNewGuideResult::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReqNewGuideResult::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReqNewGuideResult_descriptor_;
}

const ReqNewGuideResult& ReqNewGuideResult::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ClownServerMessage_2eproto();  return *default_instance_;
}

ReqNewGuideResult* ReqNewGuideResult::default_instance_ = NULL;

ReqNewGuideResult* ReqNewGuideResult::New() const {
  return new ReqNewGuideResult;
}

void ReqNewGuideResult::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_username()) {
      if (username_ != &::google::protobuf::internal::kEmptyString) {
        username_->clear();
      }
    }
    result_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReqNewGuideResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string username = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_username()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->username().data(), this->username().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_result;
        break;
      }
      
      // required int32 result = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_result:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ReqNewGuideResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string username = 1;
  if (has_username()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->username().data(), this->username().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->username(), output);
  }
  
  // required int32 result = 2;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->result(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ReqNewGuideResult::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string username = 1;
  if (has_username()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->username().data(), this->username().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->username(), target);
  }
  
  // required int32 result = 2;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->result(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ReqNewGuideResult::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string username = 1;
    if (has_username()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->username());
    }
    
    // required int32 result = 2;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReqNewGuideResult::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReqNewGuideResult* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReqNewGuideResult*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReqNewGuideResult::MergeFrom(const ReqNewGuideResult& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_username()) {
      set_username(from.username());
    }
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReqNewGuideResult::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqNewGuideResult::CopyFrom(const ReqNewGuideResult& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqNewGuideResult::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void ReqNewGuideResult::Swap(ReqNewGuideResult* other) {
  if (other != this) {
    std::swap(username_, other->username_);
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReqNewGuideResult::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReqNewGuideResult_descriptor_;
  metadata.reflection = ReqNewGuideResult_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ackLotteryAward::kSessionIdFieldNumber;
const int ackLotteryAward::kPatternsFieldNumber;
const int ackLotteryAward::kAwardMoneyFieldNumber;
const int ackLotteryAward::kUserMoneyFieldNumber;
const int ackLotteryAward::kAwardIndexFieldNumber;
const int ackLotteryAward::kPlayTimesFieldNumber;
const int ackLotteryAward::kDoubleTimesFieldNumber;
const int ackLotteryAward::kCanBetFieldNumber;
const int ackLotteryAward::kCanDoubleBetFieldNumber;
const int ackLotteryAward::kCountFieldNumber;
#endif  // !_MSC_VER

ackLotteryAward::ackLotteryAward()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ackLotteryAward::InitAsDefaultInstance() {
}

ackLotteryAward::ackLotteryAward(const ackLotteryAward& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ackLotteryAward::SharedCtor() {
  _cached_size_ = 0;
  sessionid_ = GOOGLE_LONGLONG(0);
  patterns_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  awardmoney_ = GOOGLE_LONGLONG(0);
  usermoney_ = GOOGLE_LONGLONG(0);
  awardindex_ = 0;
  playtimes_ = 0;
  doubletimes_ = 0;
  canbet_ = false;
  candoublebet_ = false;
  count_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ackLotteryAward::~ackLotteryAward() {
  SharedDtor();
}

void ackLotteryAward::SharedDtor() {
  if (patterns_ != &::google::protobuf::internal::kEmptyString) {
    delete patterns_;
  }
  if (this != default_instance_) {
  }
}

void ackLotteryAward::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ackLotteryAward::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ackLotteryAward_descriptor_;
}

const ackLotteryAward& ackLotteryAward::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ClownServerMessage_2eproto();  return *default_instance_;
}

ackLotteryAward* ackLotteryAward::default_instance_ = NULL;

ackLotteryAward* ackLotteryAward::New() const {
  return new ackLotteryAward;
}

void ackLotteryAward::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    sessionid_ = GOOGLE_LONGLONG(0);
    if (has_patterns()) {
      if (patterns_ != &::google::protobuf::internal::kEmptyString) {
        patterns_->clear();
      }
    }
    awardmoney_ = GOOGLE_LONGLONG(0);
    usermoney_ = GOOGLE_LONGLONG(0);
    awardindex_ = 0;
    playtimes_ = 0;
    doubletimes_ = 0;
    canbet_ = false;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    candoublebet_ = false;
    count_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ackLotteryAward::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 sessionId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &sessionid_)));
          set_has_sessionid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_patterns;
        break;
      }
      
      // required string patterns = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_patterns:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_patterns()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->patterns().data(), this->patterns().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_awardMoney;
        break;
      }
      
      // required int64 awardMoney = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_awardMoney:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &awardmoney_)));
          set_has_awardmoney();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_userMoney;
        break;
      }
      
      // required int64 userMoney = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_userMoney:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &usermoney_)));
          set_has_usermoney();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_awardIndex;
        break;
      }
      
      // optional int32 awardIndex = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_awardIndex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &awardindex_)));
          set_has_awardindex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_playTimes;
        break;
      }
      
      // optional int32 playTimes = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_playTimes:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &playtimes_)));
          set_has_playtimes();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_doubleTimes;
        break;
      }
      
      // optional int32 doubleTimes = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_doubleTimes:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &doubletimes_)));
          set_has_doubletimes();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_canBet;
        break;
      }
      
      // required bool canBet = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_canBet:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &canbet_)));
          set_has_canbet();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_canDoubleBet;
        break;
      }
      
      // required bool canDoubleBet = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_canDoubleBet:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &candoublebet_)));
          set_has_candoublebet();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_count;
        break;
      }
      
      // required int32 count = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &count_)));
          set_has_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ackLotteryAward::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int64 sessionId = 1;
  if (has_sessionid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->sessionid(), output);
  }
  
  // required string patterns = 2;
  if (has_patterns()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->patterns().data(), this->patterns().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->patterns(), output);
  }
  
  // required int64 awardMoney = 3;
  if (has_awardmoney()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->awardmoney(), output);
  }
  
  // required int64 userMoney = 4;
  if (has_usermoney()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->usermoney(), output);
  }
  
  // optional int32 awardIndex = 5;
  if (has_awardindex()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->awardindex(), output);
  }
  
  // optional int32 playTimes = 6;
  if (has_playtimes()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->playtimes(), output);
  }
  
  // optional int32 doubleTimes = 7;
  if (has_doubletimes()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->doubletimes(), output);
  }
  
  // required bool canBet = 8;
  if (has_canbet()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(8, this->canbet(), output);
  }
  
  // required bool canDoubleBet = 9;
  if (has_candoublebet()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(9, this->candoublebet(), output);
  }
  
  // required int32 count = 10;
  if (has_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->count(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ackLotteryAward::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int64 sessionId = 1;
  if (has_sessionid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->sessionid(), target);
  }
  
  // required string patterns = 2;
  if (has_patterns()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->patterns().data(), this->patterns().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->patterns(), target);
  }
  
  // required int64 awardMoney = 3;
  if (has_awardmoney()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->awardmoney(), target);
  }
  
  // required int64 userMoney = 4;
  if (has_usermoney()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->usermoney(), target);
  }
  
  // optional int32 awardIndex = 5;
  if (has_awardindex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->awardindex(), target);
  }
  
  // optional int32 playTimes = 6;
  if (has_playtimes()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->playtimes(), target);
  }
  
  // optional int32 doubleTimes = 7;
  if (has_doubletimes()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->doubletimes(), target);
  }
  
  // required bool canBet = 8;
  if (has_canbet()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(8, this->canbet(), target);
  }
  
  // required bool canDoubleBet = 9;
  if (has_candoublebet()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(9, this->candoublebet(), target);
  }
  
  // required int32 count = 10;
  if (has_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->count(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ackLotteryAward::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 sessionId = 1;
    if (has_sessionid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->sessionid());
    }
    
    // required string patterns = 2;
    if (has_patterns()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->patterns());
    }
    
    // required int64 awardMoney = 3;
    if (has_awardmoney()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->awardmoney());
    }
    
    // required int64 userMoney = 4;
    if (has_usermoney()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->usermoney());
    }
    
    // optional int32 awardIndex = 5;
    if (has_awardindex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->awardindex());
    }
    
    // optional int32 playTimes = 6;
    if (has_playtimes()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->playtimes());
    }
    
    // optional int32 doubleTimes = 7;
    if (has_doubletimes()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->doubletimes());
    }
    
    // required bool canBet = 8;
    if (has_canbet()) {
      total_size += 1 + 1;
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // required bool canDoubleBet = 9;
    if (has_candoublebet()) {
      total_size += 1 + 1;
    }
    
    // required int32 count = 10;
    if (has_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->count());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ackLotteryAward::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ackLotteryAward* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ackLotteryAward*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ackLotteryAward::MergeFrom(const ackLotteryAward& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_sessionid()) {
      set_sessionid(from.sessionid());
    }
    if (from.has_patterns()) {
      set_patterns(from.patterns());
    }
    if (from.has_awardmoney()) {
      set_awardmoney(from.awardmoney());
    }
    if (from.has_usermoney()) {
      set_usermoney(from.usermoney());
    }
    if (from.has_awardindex()) {
      set_awardindex(from.awardindex());
    }
    if (from.has_playtimes()) {
      set_playtimes(from.playtimes());
    }
    if (from.has_doubletimes()) {
      set_doubletimes(from.doubletimes());
    }
    if (from.has_canbet()) {
      set_canbet(from.canbet());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_candoublebet()) {
      set_candoublebet(from.candoublebet());
    }
    if (from.has_count()) {
      set_count(from.count());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ackLotteryAward::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ackLotteryAward::CopyFrom(const ackLotteryAward& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ackLotteryAward::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000038f) != 0x0000038f) return false;
  
  return true;
}

void ackLotteryAward::Swap(ackLotteryAward* other) {
  if (other != this) {
    std::swap(sessionid_, other->sessionid_);
    std::swap(patterns_, other->patterns_);
    std::swap(awardmoney_, other->awardmoney_);
    std::swap(usermoney_, other->usermoney_);
    std::swap(awardindex_, other->awardindex_);
    std::swap(playtimes_, other->playtimes_);
    std::swap(doubletimes_, other->doubletimes_);
    std::swap(canbet_, other->canbet_);
    std::swap(candoublebet_, other->candoublebet_);
    std::swap(count_, other->count_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ackLotteryAward::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ackLotteryAward_descriptor_;
  metadata.reflection = ackLotteryAward_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ReqSendHorn::kUsernameFieldNumber;
const int ReqSendHorn::kContentsFieldNumber;
#endif  // !_MSC_VER

ReqSendHorn::ReqSendHorn()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ReqSendHorn::InitAsDefaultInstance() {
}

ReqSendHorn::ReqSendHorn(const ReqSendHorn& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ReqSendHorn::SharedCtor() {
  _cached_size_ = 0;
  username_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  contents_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReqSendHorn::~ReqSendHorn() {
  SharedDtor();
}

void ReqSendHorn::SharedDtor() {
  if (username_ != &::google::protobuf::internal::kEmptyString) {
    delete username_;
  }
  if (contents_ != &::google::protobuf::internal::kEmptyString) {
    delete contents_;
  }
  if (this != default_instance_) {
  }
}

void ReqSendHorn::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReqSendHorn::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReqSendHorn_descriptor_;
}

const ReqSendHorn& ReqSendHorn::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ClownServerMessage_2eproto();  return *default_instance_;
}

ReqSendHorn* ReqSendHorn::default_instance_ = NULL;

ReqSendHorn* ReqSendHorn::New() const {
  return new ReqSendHorn;
}

void ReqSendHorn::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_username()) {
      if (username_ != &::google::protobuf::internal::kEmptyString) {
        username_->clear();
      }
    }
    if (has_contents()) {
      if (contents_ != &::google::protobuf::internal::kEmptyString) {
        contents_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReqSendHorn::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string username = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_username()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->username().data(), this->username().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_contents;
        break;
      }
      
      // optional string contents = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_contents:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_contents()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->contents().data(), this->contents().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ReqSendHorn::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string username = 1;
  if (has_username()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->username().data(), this->username().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->username(), output);
  }
  
  // optional string contents = 2;
  if (has_contents()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->contents().data(), this->contents().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->contents(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ReqSendHorn::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string username = 1;
  if (has_username()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->username().data(), this->username().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->username(), target);
  }
  
  // optional string contents = 2;
  if (has_contents()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->contents().data(), this->contents().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->contents(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ReqSendHorn::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string username = 1;
    if (has_username()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->username());
    }
    
    // optional string contents = 2;
    if (has_contents()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->contents());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReqSendHorn::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReqSendHorn* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReqSendHorn*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReqSendHorn::MergeFrom(const ReqSendHorn& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_username()) {
      set_username(from.username());
    }
    if (from.has_contents()) {
      set_contents(from.contents());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReqSendHorn::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqSendHorn::CopyFrom(const ReqSendHorn& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqSendHorn::IsInitialized() const {
  
  return true;
}

void ReqSendHorn::Swap(ReqSendHorn* other) {
  if (other != this) {
    std::swap(username_, other->username_);
    std::swap(contents_, other->contents_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReqSendHorn::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReqSendHorn_descriptor_;
  metadata.reflection = ReqSendHorn_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ReqBetFromOthers::kSessionIdFieldNumber;
const int ReqBetFromOthers::kBetTypeFieldNumber;
const int ReqBetFromOthers::kAnteFieldNumber;
#endif  // !_MSC_VER

ReqBetFromOthers::ReqBetFromOthers()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ReqBetFromOthers::InitAsDefaultInstance() {
}

ReqBetFromOthers::ReqBetFromOthers(const ReqBetFromOthers& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ReqBetFromOthers::SharedCtor() {
  _cached_size_ = 0;
  sessionid_ = GOOGLE_LONGLONG(0);
  bettype_ = 0;
  ante_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReqBetFromOthers::~ReqBetFromOthers() {
  SharedDtor();
}

void ReqBetFromOthers::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ReqBetFromOthers::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReqBetFromOthers::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReqBetFromOthers_descriptor_;
}

const ReqBetFromOthers& ReqBetFromOthers::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ClownServerMessage_2eproto();  return *default_instance_;
}

ReqBetFromOthers* ReqBetFromOthers::default_instance_ = NULL;

ReqBetFromOthers* ReqBetFromOthers::New() const {
  return new ReqBetFromOthers;
}

void ReqBetFromOthers::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    sessionid_ = GOOGLE_LONGLONG(0);
    bettype_ = 0;
    ante_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReqBetFromOthers::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 sessionId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &sessionid_)));
          set_has_sessionid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_betType;
        break;
      }
      
      // required int32 betType = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_betType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bettype_)));
          set_has_bettype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_ante;
        break;
      }
      
      // required int64 ante = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ante:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &ante_)));
          set_has_ante();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ReqBetFromOthers::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int64 sessionId = 1;
  if (has_sessionid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->sessionid(), output);
  }
  
  // required int32 betType = 2;
  if (has_bettype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->bettype(), output);
  }
  
  // required int64 ante = 3;
  if (has_ante()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->ante(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ReqBetFromOthers::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int64 sessionId = 1;
  if (has_sessionid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->sessionid(), target);
  }
  
  // required int32 betType = 2;
  if (has_bettype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->bettype(), target);
  }
  
  // required int64 ante = 3;
  if (has_ante()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->ante(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ReqBetFromOthers::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 sessionId = 1;
    if (has_sessionid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->sessionid());
    }
    
    // required int32 betType = 2;
    if (has_bettype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->bettype());
    }
    
    // required int64 ante = 3;
    if (has_ante()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->ante());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReqBetFromOthers::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReqBetFromOthers* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReqBetFromOthers*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReqBetFromOthers::MergeFrom(const ReqBetFromOthers& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_sessionid()) {
      set_sessionid(from.sessionid());
    }
    if (from.has_bettype()) {
      set_bettype(from.bettype());
    }
    if (from.has_ante()) {
      set_ante(from.ante());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReqBetFromOthers::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqBetFromOthers::CopyFrom(const ReqBetFromOthers& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqBetFromOthers::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  
  return true;
}

void ReqBetFromOthers::Swap(ReqBetFromOthers* other) {
  if (other != this) {
    std::swap(sessionid_, other->sessionid_);
    std::swap(bettype_, other->bettype_);
    std::swap(ante_, other->ante_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReqBetFromOthers::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReqBetFromOthers_descriptor_;
  metadata.reflection = ReqBetFromOthers_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ReqUserMoney::kUsernameFieldNumber;
#endif  // !_MSC_VER

ReqUserMoney::ReqUserMoney()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ReqUserMoney::InitAsDefaultInstance() {
}

ReqUserMoney::ReqUserMoney(const ReqUserMoney& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ReqUserMoney::SharedCtor() {
  _cached_size_ = 0;
  username_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReqUserMoney::~ReqUserMoney() {
  SharedDtor();
}

void ReqUserMoney::SharedDtor() {
  if (username_ != &::google::protobuf::internal::kEmptyString) {
    delete username_;
  }
  if (this != default_instance_) {
  }
}

void ReqUserMoney::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReqUserMoney::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReqUserMoney_descriptor_;
}

const ReqUserMoney& ReqUserMoney::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ClownServerMessage_2eproto();  return *default_instance_;
}

ReqUserMoney* ReqUserMoney::default_instance_ = NULL;

ReqUserMoney* ReqUserMoney::New() const {
  return new ReqUserMoney;
}

void ReqUserMoney::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_username()) {
      if (username_ != &::google::protobuf::internal::kEmptyString) {
        username_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReqUserMoney::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string username = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_username()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->username().data(), this->username().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ReqUserMoney::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string username = 1;
  if (has_username()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->username().data(), this->username().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->username(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ReqUserMoney::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string username = 1;
  if (has_username()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->username().data(), this->username().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->username(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ReqUserMoney::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string username = 1;
    if (has_username()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->username());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReqUserMoney::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReqUserMoney* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReqUserMoney*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReqUserMoney::MergeFrom(const ReqUserMoney& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_username()) {
      set_username(from.username());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReqUserMoney::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqUserMoney::CopyFrom(const ReqUserMoney& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqUserMoney::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void ReqUserMoney::Swap(ReqUserMoney* other) {
  if (other != this) {
    std::swap(username_, other->username_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReqUserMoney::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReqUserMoney_descriptor_;
  metadata.reflection = ReqUserMoney_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace msg
}  // namespace clown
}  // namespace ourgame
}  // namespace com

// @@protoc_insertion_point(global_scope)
